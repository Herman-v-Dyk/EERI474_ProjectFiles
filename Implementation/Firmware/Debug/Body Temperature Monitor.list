
Body Temperature Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000984c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017e0  08009910  08009910  00019910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0f0  0800b0f0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0f0  0800b0f0  0001b0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0f8  0800b0f8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0f8  0800b0f8  0001b0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0fc  0800b0fc  0001b0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000080  0800b180  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  0800b180  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001103c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025dc  00000000  00000000  000310e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc0  00000000  00000000  000336c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014129  00000000  00000000  00035508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d50c  00000000  00000000  00049631  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007be5c  00000000  00000000  00056b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2999  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000436c  00000000  00000000  000d2a14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080098f4 	.word	0x080098f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	080098f4 	.word	0x080098f4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fb01 	bl	8001a20 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fa59 	bl	80018e0 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 faf3 	bl	8001a20 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fae9 	bl	8001a20 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fa7b 	bl	8001958 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fa71 	bl	8001958 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_cfrcmple>:
 8000484:	4684      	mov	ip, r0
 8000486:	1c08      	adds	r0, r1, #0
 8000488:	4661      	mov	r1, ip
 800048a:	e7ff      	b.n	800048c <__aeabi_cfcmpeq>

0800048c <__aeabi_cfcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f000 f9b5 	bl	80007fc <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cfcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_fcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f000 f937 	bl	8000710 <__eqsf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_fcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f9a7 	bl	80007fc <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_fcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f99d 	bl	80007fc <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_fcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f945 	bl	8000760 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_fcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 f93b 	bl	8000760 <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_fcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_uldivmod>:
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d111      	bne.n	8000520 <__aeabi_uldivmod+0x28>
 80004fc:	2a00      	cmp	r2, #0
 80004fe:	d10f      	bne.n	8000520 <__aeabi_uldivmod+0x28>
 8000500:	2900      	cmp	r1, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_uldivmod+0xe>
 8000504:	2800      	cmp	r0, #0
 8000506:	d002      	beq.n	800050e <__aeabi_uldivmod+0x16>
 8000508:	2100      	movs	r1, #0
 800050a:	43c9      	mvns	r1, r1
 800050c:	1c08      	adds	r0, r1, #0
 800050e:	b407      	push	{r0, r1, r2}
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <__aeabi_uldivmod+0x24>)
 8000512:	a102      	add	r1, pc, #8	; (adr r1, 800051c <__aeabi_uldivmod+0x24>)
 8000514:	1840      	adds	r0, r0, r1
 8000516:	9002      	str	r0, [sp, #8]
 8000518:	bd03      	pop	{r0, r1, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	fffffee9 	.word	0xfffffee9
 8000520:	b403      	push	{r0, r1}
 8000522:	4668      	mov	r0, sp
 8000524:	b501      	push	{r0, lr}
 8000526:	9802      	ldr	r0, [sp, #8]
 8000528:	f000 f830 	bl	800058c <__udivmoddi4>
 800052c:	9b01      	ldr	r3, [sp, #4]
 800052e:	469e      	mov	lr, r3
 8000530:	b002      	add	sp, #8
 8000532:	bc0c      	pop	{r2, r3}
 8000534:	4770      	bx	lr
 8000536:	46c0      	nop			; (mov r8, r8)

08000538 <__aeabi_lmul>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	46ce      	mov	lr, r9
 800053c:	4647      	mov	r7, r8
 800053e:	0415      	lsls	r5, r2, #16
 8000540:	0c2d      	lsrs	r5, r5, #16
 8000542:	002e      	movs	r6, r5
 8000544:	b580      	push	{r7, lr}
 8000546:	0407      	lsls	r7, r0, #16
 8000548:	0c14      	lsrs	r4, r2, #16
 800054a:	0c3f      	lsrs	r7, r7, #16
 800054c:	4699      	mov	r9, r3
 800054e:	0c03      	lsrs	r3, r0, #16
 8000550:	437e      	muls	r6, r7
 8000552:	435d      	muls	r5, r3
 8000554:	4367      	muls	r7, r4
 8000556:	4363      	muls	r3, r4
 8000558:	197f      	adds	r7, r7, r5
 800055a:	0c34      	lsrs	r4, r6, #16
 800055c:	19e4      	adds	r4, r4, r7
 800055e:	469c      	mov	ip, r3
 8000560:	42a5      	cmp	r5, r4
 8000562:	d903      	bls.n	800056c <__aeabi_lmul+0x34>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	025b      	lsls	r3, r3, #9
 8000568:	4698      	mov	r8, r3
 800056a:	44c4      	add	ip, r8
 800056c:	464b      	mov	r3, r9
 800056e:	4343      	muls	r3, r0
 8000570:	4351      	muls	r1, r2
 8000572:	0c25      	lsrs	r5, r4, #16
 8000574:	0436      	lsls	r6, r6, #16
 8000576:	4465      	add	r5, ip
 8000578:	0c36      	lsrs	r6, r6, #16
 800057a:	0424      	lsls	r4, r4, #16
 800057c:	19a4      	adds	r4, r4, r6
 800057e:	195b      	adds	r3, r3, r5
 8000580:	1859      	adds	r1, r3, r1
 8000582:	0020      	movs	r0, r4
 8000584:	bc0c      	pop	{r2, r3}
 8000586:	4690      	mov	r8, r2
 8000588:	4699      	mov	r9, r3
 800058a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800058c <__udivmoddi4>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	464f      	mov	r7, r9
 8000590:	4646      	mov	r6, r8
 8000592:	46d6      	mov	lr, sl
 8000594:	b5c0      	push	{r6, r7, lr}
 8000596:	0004      	movs	r4, r0
 8000598:	b082      	sub	sp, #8
 800059a:	000d      	movs	r5, r1
 800059c:	4691      	mov	r9, r2
 800059e:	4698      	mov	r8, r3
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d82f      	bhi.n	8000604 <__udivmoddi4+0x78>
 80005a4:	d02c      	beq.n	8000600 <__udivmoddi4+0x74>
 80005a6:	4641      	mov	r1, r8
 80005a8:	4648      	mov	r0, r9
 80005aa:	f002 f9f1 	bl	8002990 <__clzdi2>
 80005ae:	0029      	movs	r1, r5
 80005b0:	0006      	movs	r6, r0
 80005b2:	0020      	movs	r0, r4
 80005b4:	f002 f9ec 	bl	8002990 <__clzdi2>
 80005b8:	1a33      	subs	r3, r6, r0
 80005ba:	469c      	mov	ip, r3
 80005bc:	3b20      	subs	r3, #32
 80005be:	469a      	mov	sl, r3
 80005c0:	d500      	bpl.n	80005c4 <__udivmoddi4+0x38>
 80005c2:	e076      	b.n	80006b2 <__udivmoddi4+0x126>
 80005c4:	464b      	mov	r3, r9
 80005c6:	4652      	mov	r2, sl
 80005c8:	4093      	lsls	r3, r2
 80005ca:	001f      	movs	r7, r3
 80005cc:	464b      	mov	r3, r9
 80005ce:	4662      	mov	r2, ip
 80005d0:	4093      	lsls	r3, r2
 80005d2:	001e      	movs	r6, r3
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d828      	bhi.n	800062a <__udivmoddi4+0x9e>
 80005d8:	d025      	beq.n	8000626 <__udivmoddi4+0x9a>
 80005da:	4653      	mov	r3, sl
 80005dc:	1ba4      	subs	r4, r4, r6
 80005de:	41bd      	sbcs	r5, r7
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	da00      	bge.n	80005e6 <__udivmoddi4+0x5a>
 80005e4:	e07b      	b.n	80006de <__udivmoddi4+0x152>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2300      	movs	r3, #0
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4652      	mov	r2, sl
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	4662      	mov	r2, ip
 80005fa:	4093      	lsls	r3, r2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	e018      	b.n	8000632 <__udivmoddi4+0xa6>
 8000600:	4282      	cmp	r2, r0
 8000602:	d9d0      	bls.n	80005a6 <__udivmoddi4+0x1a>
 8000604:	2200      	movs	r2, #0
 8000606:	2300      	movs	r3, #0
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <__udivmoddi4+0x8a>
 8000612:	601c      	str	r4, [r3, #0]
 8000614:	605d      	str	r5, [r3, #4]
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	9901      	ldr	r1, [sp, #4]
 800061a:	b002      	add	sp, #8
 800061c:	bc1c      	pop	{r2, r3, r4}
 800061e:	4690      	mov	r8, r2
 8000620:	4699      	mov	r9, r3
 8000622:	46a2      	mov	sl, r4
 8000624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000626:	42a3      	cmp	r3, r4
 8000628:	d9d7      	bls.n	80005da <__udivmoddi4+0x4e>
 800062a:	2200      	movs	r2, #0
 800062c:	2300      	movs	r3, #0
 800062e:	9200      	str	r2, [sp, #0]
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	4663      	mov	r3, ip
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0e9      	beq.n	800060c <__udivmoddi4+0x80>
 8000638:	07fb      	lsls	r3, r7, #31
 800063a:	4698      	mov	r8, r3
 800063c:	4641      	mov	r1, r8
 800063e:	0872      	lsrs	r2, r6, #1
 8000640:	430a      	orrs	r2, r1
 8000642:	087b      	lsrs	r3, r7, #1
 8000644:	4666      	mov	r6, ip
 8000646:	e00e      	b.n	8000666 <__udivmoddi4+0xda>
 8000648:	42ab      	cmp	r3, r5
 800064a:	d101      	bne.n	8000650 <__udivmoddi4+0xc4>
 800064c:	42a2      	cmp	r2, r4
 800064e:	d80c      	bhi.n	800066a <__udivmoddi4+0xde>
 8000650:	1aa4      	subs	r4, r4, r2
 8000652:	419d      	sbcs	r5, r3
 8000654:	2001      	movs	r0, #1
 8000656:	1924      	adds	r4, r4, r4
 8000658:	416d      	adcs	r5, r5
 800065a:	2100      	movs	r1, #0
 800065c:	3e01      	subs	r6, #1
 800065e:	1824      	adds	r4, r4, r0
 8000660:	414d      	adcs	r5, r1
 8000662:	2e00      	cmp	r6, #0
 8000664:	d006      	beq.n	8000674 <__udivmoddi4+0xe8>
 8000666:	42ab      	cmp	r3, r5
 8000668:	d9ee      	bls.n	8000648 <__udivmoddi4+0xbc>
 800066a:	3e01      	subs	r6, #1
 800066c:	1924      	adds	r4, r4, r4
 800066e:	416d      	adcs	r5, r5
 8000670:	2e00      	cmp	r6, #0
 8000672:	d1f8      	bne.n	8000666 <__udivmoddi4+0xda>
 8000674:	9800      	ldr	r0, [sp, #0]
 8000676:	9901      	ldr	r1, [sp, #4]
 8000678:	4653      	mov	r3, sl
 800067a:	1900      	adds	r0, r0, r4
 800067c:	4169      	adcs	r1, r5
 800067e:	2b00      	cmp	r3, #0
 8000680:	db23      	blt.n	80006ca <__udivmoddi4+0x13e>
 8000682:	002b      	movs	r3, r5
 8000684:	4652      	mov	r2, sl
 8000686:	40d3      	lsrs	r3, r2
 8000688:	002a      	movs	r2, r5
 800068a:	4664      	mov	r4, ip
 800068c:	40e2      	lsrs	r2, r4
 800068e:	001c      	movs	r4, r3
 8000690:	4653      	mov	r3, sl
 8000692:	0015      	movs	r5, r2
 8000694:	2b00      	cmp	r3, #0
 8000696:	db2d      	blt.n	80006f4 <__udivmoddi4+0x168>
 8000698:	0026      	movs	r6, r4
 800069a:	4657      	mov	r7, sl
 800069c:	40be      	lsls	r6, r7
 800069e:	0033      	movs	r3, r6
 80006a0:	0026      	movs	r6, r4
 80006a2:	4667      	mov	r7, ip
 80006a4:	40be      	lsls	r6, r7
 80006a6:	0032      	movs	r2, r6
 80006a8:	1a80      	subs	r0, r0, r2
 80006aa:	4199      	sbcs	r1, r3
 80006ac:	9000      	str	r0, [sp, #0]
 80006ae:	9101      	str	r1, [sp, #4]
 80006b0:	e7ac      	b.n	800060c <__udivmoddi4+0x80>
 80006b2:	4662      	mov	r2, ip
 80006b4:	2320      	movs	r3, #32
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	464a      	mov	r2, r9
 80006ba:	40da      	lsrs	r2, r3
 80006bc:	4661      	mov	r1, ip
 80006be:	0013      	movs	r3, r2
 80006c0:	4642      	mov	r2, r8
 80006c2:	408a      	lsls	r2, r1
 80006c4:	0017      	movs	r7, r2
 80006c6:	431f      	orrs	r7, r3
 80006c8:	e780      	b.n	80005cc <__udivmoddi4+0x40>
 80006ca:	4662      	mov	r2, ip
 80006cc:	2320      	movs	r3, #32
 80006ce:	1a9b      	subs	r3, r3, r2
 80006d0:	002a      	movs	r2, r5
 80006d2:	4666      	mov	r6, ip
 80006d4:	409a      	lsls	r2, r3
 80006d6:	0023      	movs	r3, r4
 80006d8:	40f3      	lsrs	r3, r6
 80006da:	4313      	orrs	r3, r2
 80006dc:	e7d4      	b.n	8000688 <__udivmoddi4+0xfc>
 80006de:	4662      	mov	r2, ip
 80006e0:	2320      	movs	r3, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	2200      	movs	r2, #0
 80006e8:	9100      	str	r1, [sp, #0]
 80006ea:	9201      	str	r2, [sp, #4]
 80006ec:	2201      	movs	r2, #1
 80006ee:	40da      	lsrs	r2, r3
 80006f0:	9201      	str	r2, [sp, #4]
 80006f2:	e780      	b.n	80005f6 <__udivmoddi4+0x6a>
 80006f4:	2320      	movs	r3, #32
 80006f6:	4662      	mov	r2, ip
 80006f8:	0026      	movs	r6, r4
 80006fa:	1a9b      	subs	r3, r3, r2
 80006fc:	40de      	lsrs	r6, r3
 80006fe:	002f      	movs	r7, r5
 8000700:	46b0      	mov	r8, r6
 8000702:	4666      	mov	r6, ip
 8000704:	40b7      	lsls	r7, r6
 8000706:	4646      	mov	r6, r8
 8000708:	003b      	movs	r3, r7
 800070a:	4333      	orrs	r3, r6
 800070c:	e7c8      	b.n	80006a0 <__udivmoddi4+0x114>
 800070e:	46c0      	nop			; (mov r8, r8)

08000710 <__eqsf2>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	0042      	lsls	r2, r0, #1
 8000714:	024e      	lsls	r6, r1, #9
 8000716:	004c      	lsls	r4, r1, #1
 8000718:	0245      	lsls	r5, r0, #9
 800071a:	0a6d      	lsrs	r5, r5, #9
 800071c:	0e12      	lsrs	r2, r2, #24
 800071e:	0fc3      	lsrs	r3, r0, #31
 8000720:	0a76      	lsrs	r6, r6, #9
 8000722:	0e24      	lsrs	r4, r4, #24
 8000724:	0fc9      	lsrs	r1, r1, #31
 8000726:	2aff      	cmp	r2, #255	; 0xff
 8000728:	d00f      	beq.n	800074a <__eqsf2+0x3a>
 800072a:	2cff      	cmp	r4, #255	; 0xff
 800072c:	d011      	beq.n	8000752 <__eqsf2+0x42>
 800072e:	2001      	movs	r0, #1
 8000730:	42a2      	cmp	r2, r4
 8000732:	d000      	beq.n	8000736 <__eqsf2+0x26>
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	42b5      	cmp	r5, r6
 8000738:	d1fc      	bne.n	8000734 <__eqsf2+0x24>
 800073a:	428b      	cmp	r3, r1
 800073c:	d00d      	beq.n	800075a <__eqsf2+0x4a>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d1f8      	bne.n	8000734 <__eqsf2+0x24>
 8000742:	0028      	movs	r0, r5
 8000744:	1e45      	subs	r5, r0, #1
 8000746:	41a8      	sbcs	r0, r5
 8000748:	e7f4      	b.n	8000734 <__eqsf2+0x24>
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d1f1      	bne.n	8000734 <__eqsf2+0x24>
 8000750:	e7eb      	b.n	800072a <__eqsf2+0x1a>
 8000752:	2001      	movs	r0, #1
 8000754:	2e00      	cmp	r6, #0
 8000756:	d1ed      	bne.n	8000734 <__eqsf2+0x24>
 8000758:	e7e9      	b.n	800072e <__eqsf2+0x1e>
 800075a:	2000      	movs	r0, #0
 800075c:	e7ea      	b.n	8000734 <__eqsf2+0x24>
 800075e:	46c0      	nop			; (mov r8, r8)

08000760 <__gesf2>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	004a      	lsls	r2, r1, #1
 8000764:	024e      	lsls	r6, r1, #9
 8000766:	0245      	lsls	r5, r0, #9
 8000768:	0044      	lsls	r4, r0, #1
 800076a:	0a6d      	lsrs	r5, r5, #9
 800076c:	0e24      	lsrs	r4, r4, #24
 800076e:	0fc3      	lsrs	r3, r0, #31
 8000770:	0a76      	lsrs	r6, r6, #9
 8000772:	0e12      	lsrs	r2, r2, #24
 8000774:	0fc9      	lsrs	r1, r1, #31
 8000776:	2cff      	cmp	r4, #255	; 0xff
 8000778:	d015      	beq.n	80007a6 <__gesf2+0x46>
 800077a:	2aff      	cmp	r2, #255	; 0xff
 800077c:	d00e      	beq.n	800079c <__gesf2+0x3c>
 800077e:	2c00      	cmp	r4, #0
 8000780:	d115      	bne.n	80007ae <__gesf2+0x4e>
 8000782:	2a00      	cmp	r2, #0
 8000784:	d101      	bne.n	800078a <__gesf2+0x2a>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d01c      	beq.n	80007c4 <__gesf2+0x64>
 800078a:	2d00      	cmp	r5, #0
 800078c:	d014      	beq.n	80007b8 <__gesf2+0x58>
 800078e:	428b      	cmp	r3, r1
 8000790:	d027      	beq.n	80007e2 <__gesf2+0x82>
 8000792:	2002      	movs	r0, #2
 8000794:	3b01      	subs	r3, #1
 8000796:	4018      	ands	r0, r3
 8000798:	3801      	subs	r0, #1
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	2e00      	cmp	r6, #0
 800079e:	d0ee      	beq.n	800077e <__gesf2+0x1e>
 80007a0:	2002      	movs	r0, #2
 80007a2:	4240      	negs	r0, r0
 80007a4:	e7f9      	b.n	800079a <__gesf2+0x3a>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d1fa      	bne.n	80007a0 <__gesf2+0x40>
 80007aa:	2aff      	cmp	r2, #255	; 0xff
 80007ac:	d00e      	beq.n	80007cc <__gesf2+0x6c>
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	d10e      	bne.n	80007d0 <__gesf2+0x70>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d0ed      	beq.n	8000792 <__gesf2+0x32>
 80007b6:	e00b      	b.n	80007d0 <__gesf2+0x70>
 80007b8:	2301      	movs	r3, #1
 80007ba:	3901      	subs	r1, #1
 80007bc:	4399      	bics	r1, r3
 80007be:	0008      	movs	r0, r1
 80007c0:	3001      	adds	r0, #1
 80007c2:	e7ea      	b.n	800079a <__gesf2+0x3a>
 80007c4:	2000      	movs	r0, #0
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d0e7      	beq.n	800079a <__gesf2+0x3a>
 80007ca:	e7e2      	b.n	8000792 <__gesf2+0x32>
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d1e7      	bne.n	80007a0 <__gesf2+0x40>
 80007d0:	428b      	cmp	r3, r1
 80007d2:	d1de      	bne.n	8000792 <__gesf2+0x32>
 80007d4:	4294      	cmp	r4, r2
 80007d6:	dd05      	ble.n	80007e4 <__gesf2+0x84>
 80007d8:	2102      	movs	r1, #2
 80007da:	1e58      	subs	r0, r3, #1
 80007dc:	4008      	ands	r0, r1
 80007de:	3801      	subs	r0, #1
 80007e0:	e7db      	b.n	800079a <__gesf2+0x3a>
 80007e2:	2400      	movs	r4, #0
 80007e4:	42a2      	cmp	r2, r4
 80007e6:	dc04      	bgt.n	80007f2 <__gesf2+0x92>
 80007e8:	42b5      	cmp	r5, r6
 80007ea:	d8d2      	bhi.n	8000792 <__gesf2+0x32>
 80007ec:	2000      	movs	r0, #0
 80007ee:	42b5      	cmp	r5, r6
 80007f0:	d2d3      	bcs.n	800079a <__gesf2+0x3a>
 80007f2:	1e58      	subs	r0, r3, #1
 80007f4:	2301      	movs	r3, #1
 80007f6:	4398      	bics	r0, r3
 80007f8:	3001      	adds	r0, #1
 80007fa:	e7ce      	b.n	800079a <__gesf2+0x3a>

080007fc <__lesf2>:
 80007fc:	b530      	push	{r4, r5, lr}
 80007fe:	0042      	lsls	r2, r0, #1
 8000800:	0244      	lsls	r4, r0, #9
 8000802:	024d      	lsls	r5, r1, #9
 8000804:	0fc3      	lsrs	r3, r0, #31
 8000806:	0048      	lsls	r0, r1, #1
 8000808:	0a64      	lsrs	r4, r4, #9
 800080a:	0e12      	lsrs	r2, r2, #24
 800080c:	0a6d      	lsrs	r5, r5, #9
 800080e:	0e00      	lsrs	r0, r0, #24
 8000810:	0fc9      	lsrs	r1, r1, #31
 8000812:	2aff      	cmp	r2, #255	; 0xff
 8000814:	d012      	beq.n	800083c <__lesf2+0x40>
 8000816:	28ff      	cmp	r0, #255	; 0xff
 8000818:	d00c      	beq.n	8000834 <__lesf2+0x38>
 800081a:	2a00      	cmp	r2, #0
 800081c:	d112      	bne.n	8000844 <__lesf2+0x48>
 800081e:	2800      	cmp	r0, #0
 8000820:	d119      	bne.n	8000856 <__lesf2+0x5a>
 8000822:	2d00      	cmp	r5, #0
 8000824:	d117      	bne.n	8000856 <__lesf2+0x5a>
 8000826:	2c00      	cmp	r4, #0
 8000828:	d02b      	beq.n	8000882 <__lesf2+0x86>
 800082a:	2002      	movs	r0, #2
 800082c:	3b01      	subs	r3, #1
 800082e:	4018      	ands	r0, r3
 8000830:	3801      	subs	r0, #1
 8000832:	e026      	b.n	8000882 <__lesf2+0x86>
 8000834:	2d00      	cmp	r5, #0
 8000836:	d0f0      	beq.n	800081a <__lesf2+0x1e>
 8000838:	2002      	movs	r0, #2
 800083a:	e022      	b.n	8000882 <__lesf2+0x86>
 800083c:	2c00      	cmp	r4, #0
 800083e:	d1fb      	bne.n	8000838 <__lesf2+0x3c>
 8000840:	28ff      	cmp	r0, #255	; 0xff
 8000842:	d01f      	beq.n	8000884 <__lesf2+0x88>
 8000844:	2800      	cmp	r0, #0
 8000846:	d11f      	bne.n	8000888 <__lesf2+0x8c>
 8000848:	2d00      	cmp	r5, #0
 800084a:	d11d      	bne.n	8000888 <__lesf2+0x8c>
 800084c:	2002      	movs	r0, #2
 800084e:	3b01      	subs	r3, #1
 8000850:	4018      	ands	r0, r3
 8000852:	3801      	subs	r0, #1
 8000854:	e015      	b.n	8000882 <__lesf2+0x86>
 8000856:	2c00      	cmp	r4, #0
 8000858:	d00e      	beq.n	8000878 <__lesf2+0x7c>
 800085a:	428b      	cmp	r3, r1
 800085c:	d1e5      	bne.n	800082a <__lesf2+0x2e>
 800085e:	2200      	movs	r2, #0
 8000860:	4290      	cmp	r0, r2
 8000862:	dc04      	bgt.n	800086e <__lesf2+0x72>
 8000864:	42ac      	cmp	r4, r5
 8000866:	d8e0      	bhi.n	800082a <__lesf2+0x2e>
 8000868:	2000      	movs	r0, #0
 800086a:	42ac      	cmp	r4, r5
 800086c:	d209      	bcs.n	8000882 <__lesf2+0x86>
 800086e:	1e58      	subs	r0, r3, #1
 8000870:	2301      	movs	r3, #1
 8000872:	4398      	bics	r0, r3
 8000874:	3001      	adds	r0, #1
 8000876:	e004      	b.n	8000882 <__lesf2+0x86>
 8000878:	2301      	movs	r3, #1
 800087a:	3901      	subs	r1, #1
 800087c:	4399      	bics	r1, r3
 800087e:	0008      	movs	r0, r1
 8000880:	3001      	adds	r0, #1
 8000882:	bd30      	pop	{r4, r5, pc}
 8000884:	2d00      	cmp	r5, #0
 8000886:	d1d7      	bne.n	8000838 <__lesf2+0x3c>
 8000888:	428b      	cmp	r3, r1
 800088a:	d1ce      	bne.n	800082a <__lesf2+0x2e>
 800088c:	4282      	cmp	r2, r0
 800088e:	dde7      	ble.n	8000860 <__lesf2+0x64>
 8000890:	2102      	movs	r1, #2
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	4008      	ands	r0, r1
 8000896:	3801      	subs	r0, #1
 8000898:	e7f3      	b.n	8000882 <__lesf2+0x86>
 800089a:	46c0      	nop			; (mov r8, r8)

0800089c <__aeabi_fsub>:
 800089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089e:	4647      	mov	r7, r8
 80008a0:	46ce      	mov	lr, r9
 80008a2:	0044      	lsls	r4, r0, #1
 80008a4:	0fc2      	lsrs	r2, r0, #31
 80008a6:	b580      	push	{r7, lr}
 80008a8:	0247      	lsls	r7, r0, #9
 80008aa:	0248      	lsls	r0, r1, #9
 80008ac:	0a40      	lsrs	r0, r0, #9
 80008ae:	4684      	mov	ip, r0
 80008b0:	4666      	mov	r6, ip
 80008b2:	0048      	lsls	r0, r1, #1
 80008b4:	0a7f      	lsrs	r7, r7, #9
 80008b6:	0e24      	lsrs	r4, r4, #24
 80008b8:	00f6      	lsls	r6, r6, #3
 80008ba:	0025      	movs	r5, r4
 80008bc:	4690      	mov	r8, r2
 80008be:	00fb      	lsls	r3, r7, #3
 80008c0:	0e00      	lsrs	r0, r0, #24
 80008c2:	0fc9      	lsrs	r1, r1, #31
 80008c4:	46b1      	mov	r9, r6
 80008c6:	28ff      	cmp	r0, #255	; 0xff
 80008c8:	d100      	bne.n	80008cc <__aeabi_fsub+0x30>
 80008ca:	e085      	b.n	80009d8 <__aeabi_fsub+0x13c>
 80008cc:	2601      	movs	r6, #1
 80008ce:	4071      	eors	r1, r6
 80008d0:	1a26      	subs	r6, r4, r0
 80008d2:	4291      	cmp	r1, r2
 80008d4:	d057      	beq.n	8000986 <__aeabi_fsub+0xea>
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	dd43      	ble.n	8000962 <__aeabi_fsub+0xc6>
 80008da:	2800      	cmp	r0, #0
 80008dc:	d000      	beq.n	80008e0 <__aeabi_fsub+0x44>
 80008de:	e07f      	b.n	80009e0 <__aeabi_fsub+0x144>
 80008e0:	4649      	mov	r1, r9
 80008e2:	2900      	cmp	r1, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fsub+0x4c>
 80008e6:	e0aa      	b.n	8000a3e <__aeabi_fsub+0x1a2>
 80008e8:	3e01      	subs	r6, #1
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d000      	beq.n	80008f0 <__aeabi_fsub+0x54>
 80008ee:	e0f7      	b.n	8000ae0 <__aeabi_fsub+0x244>
 80008f0:	1a5b      	subs	r3, r3, r1
 80008f2:	015a      	lsls	r2, r3, #5
 80008f4:	d400      	bmi.n	80008f8 <__aeabi_fsub+0x5c>
 80008f6:	e08b      	b.n	8000a10 <__aeabi_fsub+0x174>
 80008f8:	019b      	lsls	r3, r3, #6
 80008fa:	099c      	lsrs	r4, r3, #6
 80008fc:	0020      	movs	r0, r4
 80008fe:	f002 f829 	bl	8002954 <__clzsi2>
 8000902:	3805      	subs	r0, #5
 8000904:	4084      	lsls	r4, r0
 8000906:	4285      	cmp	r5, r0
 8000908:	dd00      	ble.n	800090c <__aeabi_fsub+0x70>
 800090a:	e0d3      	b.n	8000ab4 <__aeabi_fsub+0x218>
 800090c:	1b45      	subs	r5, r0, r5
 800090e:	0023      	movs	r3, r4
 8000910:	2020      	movs	r0, #32
 8000912:	3501      	adds	r5, #1
 8000914:	40eb      	lsrs	r3, r5
 8000916:	1b45      	subs	r5, r0, r5
 8000918:	40ac      	lsls	r4, r5
 800091a:	1e62      	subs	r2, r4, #1
 800091c:	4194      	sbcs	r4, r2
 800091e:	4323      	orrs	r3, r4
 8000920:	2407      	movs	r4, #7
 8000922:	2500      	movs	r5, #0
 8000924:	401c      	ands	r4, r3
 8000926:	2201      	movs	r2, #1
 8000928:	4641      	mov	r1, r8
 800092a:	400a      	ands	r2, r1
 800092c:	2c00      	cmp	r4, #0
 800092e:	d004      	beq.n	800093a <__aeabi_fsub+0x9e>
 8000930:	210f      	movs	r1, #15
 8000932:	4019      	ands	r1, r3
 8000934:	2904      	cmp	r1, #4
 8000936:	d000      	beq.n	800093a <__aeabi_fsub+0x9e>
 8000938:	3304      	adds	r3, #4
 800093a:	0159      	lsls	r1, r3, #5
 800093c:	d400      	bmi.n	8000940 <__aeabi_fsub+0xa4>
 800093e:	e080      	b.n	8000a42 <__aeabi_fsub+0x1a6>
 8000940:	3501      	adds	r5, #1
 8000942:	b2ec      	uxtb	r4, r5
 8000944:	2dff      	cmp	r5, #255	; 0xff
 8000946:	d000      	beq.n	800094a <__aeabi_fsub+0xae>
 8000948:	e0a3      	b.n	8000a92 <__aeabi_fsub+0x1f6>
 800094a:	24ff      	movs	r4, #255	; 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	025b      	lsls	r3, r3, #9
 8000950:	05e4      	lsls	r4, r4, #23
 8000952:	0a58      	lsrs	r0, r3, #9
 8000954:	07d2      	lsls	r2, r2, #31
 8000956:	4320      	orrs	r0, r4
 8000958:	4310      	orrs	r0, r2
 800095a:	bc0c      	pop	{r2, r3}
 800095c:	4690      	mov	r8, r2
 800095e:	4699      	mov	r9, r3
 8000960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000962:	2e00      	cmp	r6, #0
 8000964:	d174      	bne.n	8000a50 <__aeabi_fsub+0x1b4>
 8000966:	1c60      	adds	r0, r4, #1
 8000968:	b2c0      	uxtb	r0, r0
 800096a:	2801      	cmp	r0, #1
 800096c:	dc00      	bgt.n	8000970 <__aeabi_fsub+0xd4>
 800096e:	e0a7      	b.n	8000ac0 <__aeabi_fsub+0x224>
 8000970:	464a      	mov	r2, r9
 8000972:	1a9c      	subs	r4, r3, r2
 8000974:	0162      	lsls	r2, r4, #5
 8000976:	d500      	bpl.n	800097a <__aeabi_fsub+0xde>
 8000978:	e0b6      	b.n	8000ae8 <__aeabi_fsub+0x24c>
 800097a:	2c00      	cmp	r4, #0
 800097c:	d1be      	bne.n	80008fc <__aeabi_fsub+0x60>
 800097e:	2200      	movs	r2, #0
 8000980:	2400      	movs	r4, #0
 8000982:	2300      	movs	r3, #0
 8000984:	e7e3      	b.n	800094e <__aeabi_fsub+0xb2>
 8000986:	2e00      	cmp	r6, #0
 8000988:	dc00      	bgt.n	800098c <__aeabi_fsub+0xf0>
 800098a:	e085      	b.n	8000a98 <__aeabi_fsub+0x1fc>
 800098c:	2800      	cmp	r0, #0
 800098e:	d046      	beq.n	8000a1e <__aeabi_fsub+0x182>
 8000990:	2cff      	cmp	r4, #255	; 0xff
 8000992:	d049      	beq.n	8000a28 <__aeabi_fsub+0x18c>
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	4648      	mov	r0, r9
 8000998:	04d2      	lsls	r2, r2, #19
 800099a:	4310      	orrs	r0, r2
 800099c:	4681      	mov	r9, r0
 800099e:	2201      	movs	r2, #1
 80009a0:	2e1b      	cmp	r6, #27
 80009a2:	dc09      	bgt.n	80009b8 <__aeabi_fsub+0x11c>
 80009a4:	2020      	movs	r0, #32
 80009a6:	464c      	mov	r4, r9
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	4084      	lsls	r4, r0
 80009ac:	464a      	mov	r2, r9
 80009ae:	0020      	movs	r0, r4
 80009b0:	40f2      	lsrs	r2, r6
 80009b2:	1e44      	subs	r4, r0, #1
 80009b4:	41a0      	sbcs	r0, r4
 80009b6:	4302      	orrs	r2, r0
 80009b8:	189b      	adds	r3, r3, r2
 80009ba:	015a      	lsls	r2, r3, #5
 80009bc:	d528      	bpl.n	8000a10 <__aeabi_fsub+0x174>
 80009be:	3501      	adds	r5, #1
 80009c0:	2dff      	cmp	r5, #255	; 0xff
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fsub+0x12a>
 80009c4:	e0a8      	b.n	8000b18 <__aeabi_fsub+0x27c>
 80009c6:	2201      	movs	r2, #1
 80009c8:	2407      	movs	r4, #7
 80009ca:	4994      	ldr	r1, [pc, #592]	; (8000c1c <__aeabi_fsub+0x380>)
 80009cc:	401a      	ands	r2, r3
 80009ce:	085b      	lsrs	r3, r3, #1
 80009d0:	400b      	ands	r3, r1
 80009d2:	4313      	orrs	r3, r2
 80009d4:	401c      	ands	r4, r3
 80009d6:	e7a6      	b.n	8000926 <__aeabi_fsub+0x8a>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d000      	beq.n	80009de <__aeabi_fsub+0x142>
 80009dc:	e778      	b.n	80008d0 <__aeabi_fsub+0x34>
 80009de:	e775      	b.n	80008cc <__aeabi_fsub+0x30>
 80009e0:	2cff      	cmp	r4, #255	; 0xff
 80009e2:	d054      	beq.n	8000a8e <__aeabi_fsub+0x1f2>
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	4649      	mov	r1, r9
 80009e8:	04d2      	lsls	r2, r2, #19
 80009ea:	4311      	orrs	r1, r2
 80009ec:	4689      	mov	r9, r1
 80009ee:	2201      	movs	r2, #1
 80009f0:	2e1b      	cmp	r6, #27
 80009f2:	dc09      	bgt.n	8000a08 <__aeabi_fsub+0x16c>
 80009f4:	2120      	movs	r1, #32
 80009f6:	4648      	mov	r0, r9
 80009f8:	1b89      	subs	r1, r1, r6
 80009fa:	4088      	lsls	r0, r1
 80009fc:	464a      	mov	r2, r9
 80009fe:	0001      	movs	r1, r0
 8000a00:	40f2      	lsrs	r2, r6
 8000a02:	1e48      	subs	r0, r1, #1
 8000a04:	4181      	sbcs	r1, r0
 8000a06:	430a      	orrs	r2, r1
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	015a      	lsls	r2, r3, #5
 8000a0c:	d500      	bpl.n	8000a10 <__aeabi_fsub+0x174>
 8000a0e:	e773      	b.n	80008f8 <__aeabi_fsub+0x5c>
 8000a10:	2201      	movs	r2, #1
 8000a12:	4641      	mov	r1, r8
 8000a14:	400a      	ands	r2, r1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fsub+0x180>
 8000a1a:	e789      	b.n	8000930 <__aeabi_fsub+0x94>
 8000a1c:	e011      	b.n	8000a42 <__aeabi_fsub+0x1a6>
 8000a1e:	4648      	mov	r0, r9
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d158      	bne.n	8000ad6 <__aeabi_fsub+0x23a>
 8000a24:	2cff      	cmp	r4, #255	; 0xff
 8000a26:	d10c      	bne.n	8000a42 <__aeabi_fsub+0x1a6>
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x194>
 8000a2e:	e78c      	b.n	800094a <__aeabi_fsub+0xae>
 8000a30:	2080      	movs	r0, #128	; 0x80
 8000a32:	03c0      	lsls	r0, r0, #15
 8000a34:	4303      	orrs	r3, r0
 8000a36:	025b      	lsls	r3, r3, #9
 8000a38:	0a5b      	lsrs	r3, r3, #9
 8000a3a:	24ff      	movs	r4, #255	; 0xff
 8000a3c:	e787      	b.n	800094e <__aeabi_fsub+0xb2>
 8000a3e:	2cff      	cmp	r4, #255	; 0xff
 8000a40:	d025      	beq.n	8000a8e <__aeabi_fsub+0x1f2>
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	2dff      	cmp	r5, #255	; 0xff
 8000a46:	d0f0      	beq.n	8000a2a <__aeabi_fsub+0x18e>
 8000a48:	025b      	lsls	r3, r3, #9
 8000a4a:	0a5b      	lsrs	r3, r3, #9
 8000a4c:	b2ec      	uxtb	r4, r5
 8000a4e:	e77e      	b.n	800094e <__aeabi_fsub+0xb2>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d04d      	beq.n	8000af0 <__aeabi_fsub+0x254>
 8000a54:	28ff      	cmp	r0, #255	; 0xff
 8000a56:	d018      	beq.n	8000a8a <__aeabi_fsub+0x1ee>
 8000a58:	2480      	movs	r4, #128	; 0x80
 8000a5a:	04e4      	lsls	r4, r4, #19
 8000a5c:	4272      	negs	r2, r6
 8000a5e:	4323      	orrs	r3, r4
 8000a60:	2a1b      	cmp	r2, #27
 8000a62:	dd00      	ble.n	8000a66 <__aeabi_fsub+0x1ca>
 8000a64:	e0c4      	b.n	8000bf0 <__aeabi_fsub+0x354>
 8000a66:	001c      	movs	r4, r3
 8000a68:	2520      	movs	r5, #32
 8000a6a:	40d4      	lsrs	r4, r2
 8000a6c:	1aaa      	subs	r2, r5, r2
 8000a6e:	4093      	lsls	r3, r2
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	4193      	sbcs	r3, r2
 8000a74:	4323      	orrs	r3, r4
 8000a76:	464a      	mov	r2, r9
 8000a78:	0005      	movs	r5, r0
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	4688      	mov	r8, r1
 8000a7e:	e738      	b.n	80008f2 <__aeabi_fsub+0x56>
 8000a80:	1c72      	adds	r2, r6, #1
 8000a82:	d0f8      	beq.n	8000a76 <__aeabi_fsub+0x1da>
 8000a84:	43f2      	mvns	r2, r6
 8000a86:	28ff      	cmp	r0, #255	; 0xff
 8000a88:	d1ea      	bne.n	8000a60 <__aeabi_fsub+0x1c4>
 8000a8a:	000a      	movs	r2, r1
 8000a8c:	464b      	mov	r3, r9
 8000a8e:	25ff      	movs	r5, #255	; 0xff
 8000a90:	e7d7      	b.n	8000a42 <__aeabi_fsub+0x1a6>
 8000a92:	019b      	lsls	r3, r3, #6
 8000a94:	0a5b      	lsrs	r3, r3, #9
 8000a96:	e75a      	b.n	800094e <__aeabi_fsub+0xb2>
 8000a98:	2e00      	cmp	r6, #0
 8000a9a:	d141      	bne.n	8000b20 <__aeabi_fsub+0x284>
 8000a9c:	1c65      	adds	r5, r4, #1
 8000a9e:	b2e9      	uxtb	r1, r5
 8000aa0:	2901      	cmp	r1, #1
 8000aa2:	dd45      	ble.n	8000b30 <__aeabi_fsub+0x294>
 8000aa4:	2dff      	cmp	r5, #255	; 0xff
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x20e>
 8000aa8:	e74f      	b.n	800094a <__aeabi_fsub+0xae>
 8000aaa:	2407      	movs	r4, #7
 8000aac:	444b      	add	r3, r9
 8000aae:	085b      	lsrs	r3, r3, #1
 8000ab0:	401c      	ands	r4, r3
 8000ab2:	e738      	b.n	8000926 <__aeabi_fsub+0x8a>
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <__aeabi_fsub+0x384>)
 8000ab8:	1a2d      	subs	r5, r5, r0
 8000aba:	4023      	ands	r3, r4
 8000abc:	4014      	ands	r4, r2
 8000abe:	e732      	b.n	8000926 <__aeabi_fsub+0x8a>
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	d11d      	bne.n	8000b00 <__aeabi_fsub+0x264>
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d17a      	bne.n	8000bbe <__aeabi_fsub+0x322>
 8000ac8:	464b      	mov	r3, r9
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fsub+0x234>
 8000ace:	e091      	b.n	8000bf4 <__aeabi_fsub+0x358>
 8000ad0:	000a      	movs	r2, r1
 8000ad2:	2500      	movs	r5, #0
 8000ad4:	e7b5      	b.n	8000a42 <__aeabi_fsub+0x1a6>
 8000ad6:	3e01      	subs	r6, #1
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d119      	bne.n	8000b10 <__aeabi_fsub+0x274>
 8000adc:	444b      	add	r3, r9
 8000ade:	e76c      	b.n	80009ba <__aeabi_fsub+0x11e>
 8000ae0:	2cff      	cmp	r4, #255	; 0xff
 8000ae2:	d184      	bne.n	80009ee <__aeabi_fsub+0x152>
 8000ae4:	25ff      	movs	r5, #255	; 0xff
 8000ae6:	e7ac      	b.n	8000a42 <__aeabi_fsub+0x1a6>
 8000ae8:	464a      	mov	r2, r9
 8000aea:	4688      	mov	r8, r1
 8000aec:	1ad4      	subs	r4, r2, r3
 8000aee:	e705      	b.n	80008fc <__aeabi_fsub+0x60>
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1c5      	bne.n	8000a80 <__aeabi_fsub+0x1e4>
 8000af4:	000a      	movs	r2, r1
 8000af6:	28ff      	cmp	r0, #255	; 0xff
 8000af8:	d0c8      	beq.n	8000a8c <__aeabi_fsub+0x1f0>
 8000afa:	0005      	movs	r5, r0
 8000afc:	464b      	mov	r3, r9
 8000afe:	e7a0      	b.n	8000a42 <__aeabi_fsub+0x1a6>
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d149      	bne.n	8000b98 <__aeabi_fsub+0x2fc>
 8000b04:	464b      	mov	r3, r9
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d077      	beq.n	8000bfa <__aeabi_fsub+0x35e>
 8000b0a:	000a      	movs	r2, r1
 8000b0c:	25ff      	movs	r5, #255	; 0xff
 8000b0e:	e798      	b.n	8000a42 <__aeabi_fsub+0x1a6>
 8000b10:	2cff      	cmp	r4, #255	; 0xff
 8000b12:	d000      	beq.n	8000b16 <__aeabi_fsub+0x27a>
 8000b14:	e743      	b.n	800099e <__aeabi_fsub+0x102>
 8000b16:	e787      	b.n	8000a28 <__aeabi_fsub+0x18c>
 8000b18:	000a      	movs	r2, r1
 8000b1a:	24ff      	movs	r4, #255	; 0xff
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e716      	b.n	800094e <__aeabi_fsub+0xb2>
 8000b20:	2c00      	cmp	r4, #0
 8000b22:	d115      	bne.n	8000b50 <__aeabi_fsub+0x2b4>
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d157      	bne.n	8000bd8 <__aeabi_fsub+0x33c>
 8000b28:	28ff      	cmp	r0, #255	; 0xff
 8000b2a:	d1e6      	bne.n	8000afa <__aeabi_fsub+0x25e>
 8000b2c:	464b      	mov	r3, r9
 8000b2e:	e77b      	b.n	8000a28 <__aeabi_fsub+0x18c>
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	d120      	bne.n	8000b76 <__aeabi_fsub+0x2da>
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d057      	beq.n	8000be8 <__aeabi_fsub+0x34c>
 8000b38:	4649      	mov	r1, r9
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d053      	beq.n	8000be6 <__aeabi_fsub+0x34a>
 8000b3e:	444b      	add	r3, r9
 8000b40:	015a      	lsls	r2, r3, #5
 8000b42:	d568      	bpl.n	8000c16 <__aeabi_fsub+0x37a>
 8000b44:	2407      	movs	r4, #7
 8000b46:	4a36      	ldr	r2, [pc, #216]	; (8000c20 <__aeabi_fsub+0x384>)
 8000b48:	401c      	ands	r4, r3
 8000b4a:	2501      	movs	r5, #1
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	e6ea      	b.n	8000926 <__aeabi_fsub+0x8a>
 8000b50:	28ff      	cmp	r0, #255	; 0xff
 8000b52:	d0eb      	beq.n	8000b2c <__aeabi_fsub+0x290>
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	04d2      	lsls	r2, r2, #19
 8000b58:	4276      	negs	r6, r6
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	2e1b      	cmp	r6, #27
 8000b5e:	dc53      	bgt.n	8000c08 <__aeabi_fsub+0x36c>
 8000b60:	2520      	movs	r5, #32
 8000b62:	1bad      	subs	r5, r5, r6
 8000b64:	001a      	movs	r2, r3
 8000b66:	40ab      	lsls	r3, r5
 8000b68:	40f2      	lsrs	r2, r6
 8000b6a:	1e5c      	subs	r4, r3, #1
 8000b6c:	41a3      	sbcs	r3, r4
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	444b      	add	r3, r9
 8000b72:	0005      	movs	r5, r0
 8000b74:	e721      	b.n	80009ba <__aeabi_fsub+0x11e>
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0d8      	beq.n	8000b2c <__aeabi_fsub+0x290>
 8000b7a:	4649      	mov	r1, r9
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fsub+0x2e6>
 8000b80:	e752      	b.n	8000a28 <__aeabi_fsub+0x18c>
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	03c9      	lsls	r1, r1, #15
 8000b86:	420f      	tst	r7, r1
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fsub+0x2f0>
 8000b8a:	e74d      	b.n	8000a28 <__aeabi_fsub+0x18c>
 8000b8c:	4660      	mov	r0, ip
 8000b8e:	4208      	tst	r0, r1
 8000b90:	d000      	beq.n	8000b94 <__aeabi_fsub+0x2f8>
 8000b92:	e749      	b.n	8000a28 <__aeabi_fsub+0x18c>
 8000b94:	464b      	mov	r3, r9
 8000b96:	e747      	b.n	8000a28 <__aeabi_fsub+0x18c>
 8000b98:	4648      	mov	r0, r9
 8000b9a:	25ff      	movs	r5, #255	; 0xff
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_fsub+0x306>
 8000ba0:	e74f      	b.n	8000a42 <__aeabi_fsub+0x1a6>
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	03d2      	lsls	r2, r2, #15
 8000ba6:	4217      	tst	r7, r2
 8000ba8:	d004      	beq.n	8000bb4 <__aeabi_fsub+0x318>
 8000baa:	4660      	mov	r0, ip
 8000bac:	4210      	tst	r0, r2
 8000bae:	d101      	bne.n	8000bb4 <__aeabi_fsub+0x318>
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	4688      	mov	r8, r1
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4641      	mov	r1, r8
 8000bb8:	25ff      	movs	r5, #255	; 0xff
 8000bba:	400a      	ands	r2, r1
 8000bbc:	e741      	b.n	8000a42 <__aeabi_fsub+0x1a6>
 8000bbe:	4648      	mov	r0, r9
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d01f      	beq.n	8000c04 <__aeabi_fsub+0x368>
 8000bc4:	1a1a      	subs	r2, r3, r0
 8000bc6:	0150      	lsls	r0, r2, #5
 8000bc8:	d520      	bpl.n	8000c0c <__aeabi_fsub+0x370>
 8000bca:	464a      	mov	r2, r9
 8000bcc:	2407      	movs	r4, #7
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	401c      	ands	r4, r3
 8000bd2:	4688      	mov	r8, r1
 8000bd4:	2500      	movs	r5, #0
 8000bd6:	e6a6      	b.n	8000926 <__aeabi_fsub+0x8a>
 8000bd8:	1c74      	adds	r4, r6, #1
 8000bda:	d0c9      	beq.n	8000b70 <__aeabi_fsub+0x2d4>
 8000bdc:	43f6      	mvns	r6, r6
 8000bde:	28ff      	cmp	r0, #255	; 0xff
 8000be0:	d1bc      	bne.n	8000b5c <__aeabi_fsub+0x2c0>
 8000be2:	464b      	mov	r3, r9
 8000be4:	e720      	b.n	8000a28 <__aeabi_fsub+0x18c>
 8000be6:	4699      	mov	r9, r3
 8000be8:	464b      	mov	r3, r9
 8000bea:	2500      	movs	r5, #0
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	e72b      	b.n	8000a48 <__aeabi_fsub+0x1ac>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e740      	b.n	8000a76 <__aeabi_fsub+0x1da>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e6a9      	b.n	800094e <__aeabi_fsub+0xb2>
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	03db      	lsls	r3, r3, #15
 8000c00:	24ff      	movs	r4, #255	; 0xff
 8000c02:	e6a4      	b.n	800094e <__aeabi_fsub+0xb2>
 8000c04:	2500      	movs	r5, #0
 8000c06:	e71c      	b.n	8000a42 <__aeabi_fsub+0x1a6>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e7b1      	b.n	8000b70 <__aeabi_fsub+0x2d4>
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d0f1      	beq.n	8000bf4 <__aeabi_fsub+0x358>
 8000c10:	0013      	movs	r3, r2
 8000c12:	2500      	movs	r5, #0
 8000c14:	e6fc      	b.n	8000a10 <__aeabi_fsub+0x174>
 8000c16:	2500      	movs	r5, #0
 8000c18:	e6fa      	b.n	8000a10 <__aeabi_fsub+0x174>
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	7dffffff 	.word	0x7dffffff
 8000c20:	fbffffff 	.word	0xfbffffff

08000c24 <__aeabi_ui2f>:
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	1e04      	subs	r4, r0, #0
 8000c28:	d034      	beq.n	8000c94 <__aeabi_ui2f+0x70>
 8000c2a:	f001 fe93 	bl	8002954 <__clzsi2>
 8000c2e:	229e      	movs	r2, #158	; 0x9e
 8000c30:	1a12      	subs	r2, r2, r0
 8000c32:	2a96      	cmp	r2, #150	; 0x96
 8000c34:	dc07      	bgt.n	8000c46 <__aeabi_ui2f+0x22>
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	2808      	cmp	r0, #8
 8000c3a:	dd2e      	ble.n	8000c9a <__aeabi_ui2f+0x76>
 8000c3c:	3808      	subs	r0, #8
 8000c3e:	4084      	lsls	r4, r0
 8000c40:	0260      	lsls	r0, r4, #9
 8000c42:	0a40      	lsrs	r0, r0, #9
 8000c44:	e021      	b.n	8000c8a <__aeabi_ui2f+0x66>
 8000c46:	2a99      	cmp	r2, #153	; 0x99
 8000c48:	dd09      	ble.n	8000c5e <__aeabi_ui2f+0x3a>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	0021      	movs	r1, r4
 8000c4e:	331b      	adds	r3, #27
 8000c50:	4099      	lsls	r1, r3
 8000c52:	1e4b      	subs	r3, r1, #1
 8000c54:	4199      	sbcs	r1, r3
 8000c56:	2305      	movs	r3, #5
 8000c58:	1a1b      	subs	r3, r3, r0
 8000c5a:	40dc      	lsrs	r4, r3
 8000c5c:	430c      	orrs	r4, r1
 8000c5e:	2805      	cmp	r0, #5
 8000c60:	dd01      	ble.n	8000c66 <__aeabi_ui2f+0x42>
 8000c62:	1f43      	subs	r3, r0, #5
 8000c64:	409c      	lsls	r4, r3
 8000c66:	0023      	movs	r3, r4
 8000c68:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <__aeabi_ui2f+0x7c>)
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	0765      	lsls	r5, r4, #29
 8000c6e:	d009      	beq.n	8000c84 <__aeabi_ui2f+0x60>
 8000c70:	250f      	movs	r5, #15
 8000c72:	402c      	ands	r4, r5
 8000c74:	2c04      	cmp	r4, #4
 8000c76:	d005      	beq.n	8000c84 <__aeabi_ui2f+0x60>
 8000c78:	3304      	adds	r3, #4
 8000c7a:	015c      	lsls	r4, r3, #5
 8000c7c:	d502      	bpl.n	8000c84 <__aeabi_ui2f+0x60>
 8000c7e:	229f      	movs	r2, #159	; 0x9f
 8000c80:	400b      	ands	r3, r1
 8000c82:	1a12      	subs	r2, r2, r0
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	0a58      	lsrs	r0, r3, #9
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	0240      	lsls	r0, r0, #9
 8000c8c:	05d2      	lsls	r2, r2, #23
 8000c8e:	0a40      	lsrs	r0, r0, #9
 8000c90:	4310      	orrs	r0, r2
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	2200      	movs	r2, #0
 8000c96:	2000      	movs	r0, #0
 8000c98:	e7f7      	b.n	8000c8a <__aeabi_ui2f+0x66>
 8000c9a:	0260      	lsls	r0, r4, #9
 8000c9c:	0a40      	lsrs	r0, r0, #9
 8000c9e:	e7f4      	b.n	8000c8a <__aeabi_ui2f+0x66>
 8000ca0:	fbffffff 	.word	0xfbffffff

08000ca4 <__aeabi_dadd>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	464f      	mov	r7, r9
 8000ca8:	4646      	mov	r6, r8
 8000caa:	46d6      	mov	lr, sl
 8000cac:	000c      	movs	r4, r1
 8000cae:	0309      	lsls	r1, r1, #12
 8000cb0:	b5c0      	push	{r6, r7, lr}
 8000cb2:	0a49      	lsrs	r1, r1, #9
 8000cb4:	0f47      	lsrs	r7, r0, #29
 8000cb6:	005e      	lsls	r6, r3, #1
 8000cb8:	4339      	orrs	r1, r7
 8000cba:	031f      	lsls	r7, r3, #12
 8000cbc:	0fdb      	lsrs	r3, r3, #31
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	0065      	lsls	r5, r4, #1
 8000cc2:	0a7b      	lsrs	r3, r7, #9
 8000cc4:	0f57      	lsrs	r7, r2, #29
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0d6d      	lsrs	r5, r5, #21
 8000cca:	0fe4      	lsrs	r4, r4, #31
 8000ccc:	0d76      	lsrs	r6, r6, #21
 8000cce:	46a1      	mov	r9, r4
 8000cd0:	00c0      	lsls	r0, r0, #3
 8000cd2:	46b8      	mov	r8, r7
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	1bab      	subs	r3, r5, r6
 8000cd8:	4564      	cmp	r4, ip
 8000cda:	d07b      	beq.n	8000dd4 <__aeabi_dadd+0x130>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	dd5f      	ble.n	8000da0 <__aeabi_dadd+0xfc>
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_dadd+0x42>
 8000ce4:	e0a4      	b.n	8000e30 <__aeabi_dadd+0x18c>
 8000ce6:	003e      	movs	r6, r7
 8000ce8:	4316      	orrs	r6, r2
 8000cea:	d100      	bne.n	8000cee <__aeabi_dadd+0x4a>
 8000cec:	e112      	b.n	8000f14 <__aeabi_dadd+0x270>
 8000cee:	1e5e      	subs	r6, r3, #1
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_dadd+0x52>
 8000cf4:	e19e      	b.n	8001034 <__aeabi_dadd+0x390>
 8000cf6:	1a87      	subs	r7, r0, r2
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	42b8      	cmp	r0, r7
 8000cfc:	4180      	sbcs	r0, r0
 8000cfe:	2501      	movs	r5, #1
 8000d00:	1ac9      	subs	r1, r1, r3
 8000d02:	4240      	negs	r0, r0
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	020b      	lsls	r3, r1, #8
 8000d08:	d400      	bmi.n	8000d0c <__aeabi_dadd+0x68>
 8000d0a:	e131      	b.n	8000f70 <__aeabi_dadd+0x2cc>
 8000d0c:	0249      	lsls	r1, r1, #9
 8000d0e:	0a4e      	lsrs	r6, r1, #9
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x72>
 8000d14:	e16e      	b.n	8000ff4 <__aeabi_dadd+0x350>
 8000d16:	0030      	movs	r0, r6
 8000d18:	f001 fe1c 	bl	8002954 <__clzsi2>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	3b08      	subs	r3, #8
 8000d20:	2b1f      	cmp	r3, #31
 8000d22:	dd00      	ble.n	8000d26 <__aeabi_dadd+0x82>
 8000d24:	e161      	b.n	8000fea <__aeabi_dadd+0x346>
 8000d26:	2220      	movs	r2, #32
 8000d28:	0039      	movs	r1, r7
 8000d2a:	1ad2      	subs	r2, r2, r3
 8000d2c:	409e      	lsls	r6, r3
 8000d2e:	40d1      	lsrs	r1, r2
 8000d30:	409f      	lsls	r7, r3
 8000d32:	430e      	orrs	r6, r1
 8000d34:	429d      	cmp	r5, r3
 8000d36:	dd00      	ble.n	8000d3a <__aeabi_dadd+0x96>
 8000d38:	e151      	b.n	8000fde <__aeabi_dadd+0x33a>
 8000d3a:	1b5d      	subs	r5, r3, r5
 8000d3c:	1c6b      	adds	r3, r5, #1
 8000d3e:	2b1f      	cmp	r3, #31
 8000d40:	dd00      	ble.n	8000d44 <__aeabi_dadd+0xa0>
 8000d42:	e17c      	b.n	800103e <__aeabi_dadd+0x39a>
 8000d44:	2120      	movs	r1, #32
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	003d      	movs	r5, r7
 8000d4a:	0030      	movs	r0, r6
 8000d4c:	408f      	lsls	r7, r1
 8000d4e:	4088      	lsls	r0, r1
 8000d50:	40dd      	lsrs	r5, r3
 8000d52:	1e79      	subs	r1, r7, #1
 8000d54:	418f      	sbcs	r7, r1
 8000d56:	0031      	movs	r1, r6
 8000d58:	2207      	movs	r2, #7
 8000d5a:	4328      	orrs	r0, r5
 8000d5c:	40d9      	lsrs	r1, r3
 8000d5e:	2500      	movs	r5, #0
 8000d60:	4307      	orrs	r7, r0
 8000d62:	403a      	ands	r2, r7
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	d009      	beq.n	8000d7c <__aeabi_dadd+0xd8>
 8000d68:	230f      	movs	r3, #15
 8000d6a:	403b      	ands	r3, r7
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d005      	beq.n	8000d7c <__aeabi_dadd+0xd8>
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	42bb      	cmp	r3, r7
 8000d74:	41bf      	sbcs	r7, r7
 8000d76:	427f      	negs	r7, r7
 8000d78:	19c9      	adds	r1, r1, r7
 8000d7a:	001f      	movs	r7, r3
 8000d7c:	020b      	lsls	r3, r1, #8
 8000d7e:	d400      	bmi.n	8000d82 <__aeabi_dadd+0xde>
 8000d80:	e226      	b.n	80011d0 <__aeabi_dadd+0x52c>
 8000d82:	1c6a      	adds	r2, r5, #1
 8000d84:	4bc6      	ldr	r3, [pc, #792]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8000d86:	0555      	lsls	r5, r2, #21
 8000d88:	0d6d      	lsrs	r5, r5, #21
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_dadd+0xec>
 8000d8e:	e106      	b.n	8000f9e <__aeabi_dadd+0x2fa>
 8000d90:	4ac4      	ldr	r2, [pc, #784]	; (80010a4 <__aeabi_dadd+0x400>)
 8000d92:	08ff      	lsrs	r7, r7, #3
 8000d94:	400a      	ands	r2, r1
 8000d96:	0753      	lsls	r3, r2, #29
 8000d98:	0252      	lsls	r2, r2, #9
 8000d9a:	433b      	orrs	r3, r7
 8000d9c:	0b12      	lsrs	r2, r2, #12
 8000d9e:	e08e      	b.n	8000ebe <__aeabi_dadd+0x21a>
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d000      	beq.n	8000da6 <__aeabi_dadd+0x102>
 8000da4:	e0b8      	b.n	8000f18 <__aeabi_dadd+0x274>
 8000da6:	1c6b      	adds	r3, r5, #1
 8000da8:	055b      	lsls	r3, r3, #21
 8000daa:	0d5b      	lsrs	r3, r3, #21
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	dc00      	bgt.n	8000db2 <__aeabi_dadd+0x10e>
 8000db0:	e130      	b.n	8001014 <__aeabi_dadd+0x370>
 8000db2:	1a87      	subs	r7, r0, r2
 8000db4:	4643      	mov	r3, r8
 8000db6:	42b8      	cmp	r0, r7
 8000db8:	41b6      	sbcs	r6, r6
 8000dba:	1acb      	subs	r3, r1, r3
 8000dbc:	4276      	negs	r6, r6
 8000dbe:	1b9e      	subs	r6, r3, r6
 8000dc0:	0233      	lsls	r3, r6, #8
 8000dc2:	d500      	bpl.n	8000dc6 <__aeabi_dadd+0x122>
 8000dc4:	e14c      	b.n	8001060 <__aeabi_dadd+0x3bc>
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	4333      	orrs	r3, r6
 8000dca:	d1a1      	bne.n	8000d10 <__aeabi_dadd+0x6c>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2400      	movs	r4, #0
 8000dd0:	2500      	movs	r5, #0
 8000dd2:	e070      	b.n	8000eb6 <__aeabi_dadd+0x212>
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dc00      	bgt.n	8000dda <__aeabi_dadd+0x136>
 8000dd8:	e0e5      	b.n	8000fa6 <__aeabi_dadd+0x302>
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_dadd+0x13c>
 8000dde:	e083      	b.n	8000ee8 <__aeabi_dadd+0x244>
 8000de0:	4eaf      	ldr	r6, [pc, #700]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8000de2:	42b5      	cmp	r5, r6
 8000de4:	d060      	beq.n	8000ea8 <__aeabi_dadd+0x204>
 8000de6:	2680      	movs	r6, #128	; 0x80
 8000de8:	0436      	lsls	r6, r6, #16
 8000dea:	4337      	orrs	r7, r6
 8000dec:	46b8      	mov	r8, r7
 8000dee:	2b38      	cmp	r3, #56	; 0x38
 8000df0:	dc00      	bgt.n	8000df4 <__aeabi_dadd+0x150>
 8000df2:	e13e      	b.n	8001072 <__aeabi_dadd+0x3ce>
 8000df4:	4643      	mov	r3, r8
 8000df6:	4313      	orrs	r3, r2
 8000df8:	001f      	movs	r7, r3
 8000dfa:	1e7a      	subs	r2, r7, #1
 8000dfc:	4197      	sbcs	r7, r2
 8000dfe:	183f      	adds	r7, r7, r0
 8000e00:	4287      	cmp	r7, r0
 8000e02:	4180      	sbcs	r0, r0
 8000e04:	4240      	negs	r0, r0
 8000e06:	1809      	adds	r1, r1, r0
 8000e08:	020b      	lsls	r3, r1, #8
 8000e0a:	d400      	bmi.n	8000e0e <__aeabi_dadd+0x16a>
 8000e0c:	e0b0      	b.n	8000f70 <__aeabi_dadd+0x2cc>
 8000e0e:	4ba4      	ldr	r3, [pc, #656]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8000e10:	3501      	adds	r5, #1
 8000e12:	429d      	cmp	r5, r3
 8000e14:	d100      	bne.n	8000e18 <__aeabi_dadd+0x174>
 8000e16:	e0c3      	b.n	8000fa0 <__aeabi_dadd+0x2fc>
 8000e18:	4aa2      	ldr	r2, [pc, #648]	; (80010a4 <__aeabi_dadd+0x400>)
 8000e1a:	087b      	lsrs	r3, r7, #1
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	2101      	movs	r1, #1
 8000e20:	400f      	ands	r7, r1
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0851      	lsrs	r1, r2, #1
 8000e26:	07d3      	lsls	r3, r2, #31
 8000e28:	2207      	movs	r2, #7
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	403a      	ands	r2, r7
 8000e2e:	e799      	b.n	8000d64 <__aeabi_dadd+0xc0>
 8000e30:	4e9b      	ldr	r6, [pc, #620]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8000e32:	42b5      	cmp	r5, r6
 8000e34:	d038      	beq.n	8000ea8 <__aeabi_dadd+0x204>
 8000e36:	2680      	movs	r6, #128	; 0x80
 8000e38:	0436      	lsls	r6, r6, #16
 8000e3a:	4337      	orrs	r7, r6
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	2b38      	cmp	r3, #56	; 0x38
 8000e40:	dd00      	ble.n	8000e44 <__aeabi_dadd+0x1a0>
 8000e42:	e0dc      	b.n	8000ffe <__aeabi_dadd+0x35a>
 8000e44:	2b1f      	cmp	r3, #31
 8000e46:	dc00      	bgt.n	8000e4a <__aeabi_dadd+0x1a6>
 8000e48:	e130      	b.n	80010ac <__aeabi_dadd+0x408>
 8000e4a:	001e      	movs	r6, r3
 8000e4c:	4647      	mov	r7, r8
 8000e4e:	3e20      	subs	r6, #32
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	46bc      	mov	ip, r7
 8000e54:	2b20      	cmp	r3, #32
 8000e56:	d004      	beq.n	8000e62 <__aeabi_dadd+0x1be>
 8000e58:	2640      	movs	r6, #64	; 0x40
 8000e5a:	1af3      	subs	r3, r6, r3
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	409e      	lsls	r6, r3
 8000e60:	4332      	orrs	r2, r6
 8000e62:	0017      	movs	r7, r2
 8000e64:	4663      	mov	r3, ip
 8000e66:	1e7a      	subs	r2, r7, #1
 8000e68:	4197      	sbcs	r7, r2
 8000e6a:	431f      	orrs	r7, r3
 8000e6c:	e0cc      	b.n	8001008 <__aeabi_dadd+0x364>
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dadd+0x1d0>
 8000e72:	e204      	b.n	800127e <__aeabi_dadd+0x5da>
 8000e74:	4643      	mov	r3, r8
 8000e76:	4313      	orrs	r3, r2
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dadd+0x1d8>
 8000e7a:	e159      	b.n	8001130 <__aeabi_dadd+0x48c>
 8000e7c:	074b      	lsls	r3, r1, #29
 8000e7e:	08c0      	lsrs	r0, r0, #3
 8000e80:	4318      	orrs	r0, r3
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	08c9      	lsrs	r1, r1, #3
 8000e86:	031b      	lsls	r3, r3, #12
 8000e88:	4219      	tst	r1, r3
 8000e8a:	d008      	beq.n	8000e9e <__aeabi_dadd+0x1fa>
 8000e8c:	4645      	mov	r5, r8
 8000e8e:	08ed      	lsrs	r5, r5, #3
 8000e90:	421d      	tst	r5, r3
 8000e92:	d104      	bne.n	8000e9e <__aeabi_dadd+0x1fa>
 8000e94:	4643      	mov	r3, r8
 8000e96:	08d0      	lsrs	r0, r2, #3
 8000e98:	0759      	lsls	r1, r3, #29
 8000e9a:	4308      	orrs	r0, r1
 8000e9c:	0029      	movs	r1, r5
 8000e9e:	0f42      	lsrs	r2, r0, #29
 8000ea0:	00c9      	lsls	r1, r1, #3
 8000ea2:	4d7f      	ldr	r5, [pc, #508]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8000ea4:	4311      	orrs	r1, r2
 8000ea6:	00c0      	lsls	r0, r0, #3
 8000ea8:	074b      	lsls	r3, r1, #29
 8000eaa:	08ca      	lsrs	r2, r1, #3
 8000eac:	497c      	ldr	r1, [pc, #496]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8000eae:	08c0      	lsrs	r0, r0, #3
 8000eb0:	4303      	orrs	r3, r0
 8000eb2:	428d      	cmp	r5, r1
 8000eb4:	d068      	beq.n	8000f88 <__aeabi_dadd+0x2e4>
 8000eb6:	0312      	lsls	r2, r2, #12
 8000eb8:	056d      	lsls	r5, r5, #21
 8000eba:	0b12      	lsrs	r2, r2, #12
 8000ebc:	0d6d      	lsrs	r5, r5, #21
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	0312      	lsls	r2, r2, #12
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	0b13      	lsrs	r3, r2, #12
 8000ec6:	0d0a      	lsrs	r2, r1, #20
 8000ec8:	0512      	lsls	r2, r2, #20
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	4b76      	ldr	r3, [pc, #472]	; (80010a8 <__aeabi_dadd+0x404>)
 8000ece:	052d      	lsls	r5, r5, #20
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	432b      	orrs	r3, r5
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	07e4      	lsls	r4, r4, #31
 8000ed8:	085b      	lsrs	r3, r3, #1
 8000eda:	4323      	orrs	r3, r4
 8000edc:	0019      	movs	r1, r3
 8000ede:	bc1c      	pop	{r2, r3, r4}
 8000ee0:	4690      	mov	r8, r2
 8000ee2:	4699      	mov	r9, r3
 8000ee4:	46a2      	mov	sl, r4
 8000ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee8:	003e      	movs	r6, r7
 8000eea:	4316      	orrs	r6, r2
 8000eec:	d012      	beq.n	8000f14 <__aeabi_dadd+0x270>
 8000eee:	1e5e      	subs	r6, r3, #1
 8000ef0:	2e00      	cmp	r6, #0
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_dadd+0x252>
 8000ef4:	e100      	b.n	80010f8 <__aeabi_dadd+0x454>
 8000ef6:	1887      	adds	r7, r0, r2
 8000ef8:	4287      	cmp	r7, r0
 8000efa:	4180      	sbcs	r0, r0
 8000efc:	4441      	add	r1, r8
 8000efe:	4240      	negs	r0, r0
 8000f00:	1809      	adds	r1, r1, r0
 8000f02:	2501      	movs	r5, #1
 8000f04:	020b      	lsls	r3, r1, #8
 8000f06:	d533      	bpl.n	8000f70 <__aeabi_dadd+0x2cc>
 8000f08:	2502      	movs	r5, #2
 8000f0a:	e785      	b.n	8000e18 <__aeabi_dadd+0x174>
 8000f0c:	4664      	mov	r4, ip
 8000f0e:	0033      	movs	r3, r6
 8000f10:	4641      	mov	r1, r8
 8000f12:	0010      	movs	r0, r2
 8000f14:	001d      	movs	r5, r3
 8000f16:	e7c7      	b.n	8000ea8 <__aeabi_dadd+0x204>
 8000f18:	2d00      	cmp	r5, #0
 8000f1a:	d000      	beq.n	8000f1e <__aeabi_dadd+0x27a>
 8000f1c:	e0da      	b.n	80010d4 <__aeabi_dadd+0x430>
 8000f1e:	000c      	movs	r4, r1
 8000f20:	4304      	orrs	r4, r0
 8000f22:	d0f3      	beq.n	8000f0c <__aeabi_dadd+0x268>
 8000f24:	1c5c      	adds	r4, r3, #1
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x286>
 8000f28:	e19f      	b.n	800126a <__aeabi_dadd+0x5c6>
 8000f2a:	4c5d      	ldr	r4, [pc, #372]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8000f2c:	42a6      	cmp	r6, r4
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dadd+0x28e>
 8000f30:	e12f      	b.n	8001192 <__aeabi_dadd+0x4ee>
 8000f32:	43db      	mvns	r3, r3
 8000f34:	2b38      	cmp	r3, #56	; 0x38
 8000f36:	dd00      	ble.n	8000f3a <__aeabi_dadd+0x296>
 8000f38:	e166      	b.n	8001208 <__aeabi_dadd+0x564>
 8000f3a:	2b1f      	cmp	r3, #31
 8000f3c:	dd00      	ble.n	8000f40 <__aeabi_dadd+0x29c>
 8000f3e:	e183      	b.n	8001248 <__aeabi_dadd+0x5a4>
 8000f40:	2420      	movs	r4, #32
 8000f42:	0005      	movs	r5, r0
 8000f44:	1ae4      	subs	r4, r4, r3
 8000f46:	000f      	movs	r7, r1
 8000f48:	40dd      	lsrs	r5, r3
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	40a0      	lsls	r0, r4
 8000f4e:	4643      	mov	r3, r8
 8000f50:	40a7      	lsls	r7, r4
 8000f52:	1a5b      	subs	r3, r3, r1
 8000f54:	1e44      	subs	r4, r0, #1
 8000f56:	41a0      	sbcs	r0, r4
 8000f58:	4698      	mov	r8, r3
 8000f5a:	432f      	orrs	r7, r5
 8000f5c:	4338      	orrs	r0, r7
 8000f5e:	1a17      	subs	r7, r2, r0
 8000f60:	42ba      	cmp	r2, r7
 8000f62:	4192      	sbcs	r2, r2
 8000f64:	4643      	mov	r3, r8
 8000f66:	4252      	negs	r2, r2
 8000f68:	1a99      	subs	r1, r3, r2
 8000f6a:	4664      	mov	r4, ip
 8000f6c:	0035      	movs	r5, r6
 8000f6e:	e6ca      	b.n	8000d06 <__aeabi_dadd+0x62>
 8000f70:	2207      	movs	r2, #7
 8000f72:	403a      	ands	r2, r7
 8000f74:	2a00      	cmp	r2, #0
 8000f76:	d000      	beq.n	8000f7a <__aeabi_dadd+0x2d6>
 8000f78:	e6f6      	b.n	8000d68 <__aeabi_dadd+0xc4>
 8000f7a:	074b      	lsls	r3, r1, #29
 8000f7c:	08ca      	lsrs	r2, r1, #3
 8000f7e:	4948      	ldr	r1, [pc, #288]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8000f80:	08ff      	lsrs	r7, r7, #3
 8000f82:	433b      	orrs	r3, r7
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d196      	bne.n	8000eb6 <__aeabi_dadd+0x212>
 8000f88:	0019      	movs	r1, r3
 8000f8a:	4311      	orrs	r1, r2
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dadd+0x2ec>
 8000f8e:	e19e      	b.n	80012ce <__aeabi_dadd+0x62a>
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	0309      	lsls	r1, r1, #12
 8000f94:	430a      	orrs	r2, r1
 8000f96:	0312      	lsls	r2, r2, #12
 8000f98:	0b12      	lsrs	r2, r2, #12
 8000f9a:	4d41      	ldr	r5, [pc, #260]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8000f9c:	e78f      	b.n	8000ebe <__aeabi_dadd+0x21a>
 8000f9e:	0015      	movs	r5, r2
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e78b      	b.n	8000ebe <__aeabi_dadd+0x21a>
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d000      	beq.n	8000fac <__aeabi_dadd+0x308>
 8000faa:	e0c7      	b.n	800113c <__aeabi_dadd+0x498>
 8000fac:	1c6b      	adds	r3, r5, #1
 8000fae:	055f      	lsls	r7, r3, #21
 8000fb0:	0d7f      	lsrs	r7, r7, #21
 8000fb2:	2f01      	cmp	r7, #1
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_dadd+0x314>
 8000fb6:	e0f1      	b.n	800119c <__aeabi_dadd+0x4f8>
 8000fb8:	4d39      	ldr	r5, [pc, #228]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8000fba:	42ab      	cmp	r3, r5
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_dadd+0x31c>
 8000fbe:	e0b9      	b.n	8001134 <__aeabi_dadd+0x490>
 8000fc0:	1885      	adds	r5, r0, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	4285      	cmp	r5, r0
 8000fc6:	4189      	sbcs	r1, r1
 8000fc8:	4442      	add	r2, r8
 8000fca:	4249      	negs	r1, r1
 8000fcc:	1851      	adds	r1, r2, r1
 8000fce:	2207      	movs	r2, #7
 8000fd0:	07cf      	lsls	r7, r1, #31
 8000fd2:	086d      	lsrs	r5, r5, #1
 8000fd4:	432f      	orrs	r7, r5
 8000fd6:	0849      	lsrs	r1, r1, #1
 8000fd8:	403a      	ands	r2, r7
 8000fda:	001d      	movs	r5, r3
 8000fdc:	e6c2      	b.n	8000d64 <__aeabi_dadd+0xc0>
 8000fde:	2207      	movs	r2, #7
 8000fe0:	4930      	ldr	r1, [pc, #192]	; (80010a4 <__aeabi_dadd+0x400>)
 8000fe2:	1aed      	subs	r5, r5, r3
 8000fe4:	4031      	ands	r1, r6
 8000fe6:	403a      	ands	r2, r7
 8000fe8:	e6bc      	b.n	8000d64 <__aeabi_dadd+0xc0>
 8000fea:	003e      	movs	r6, r7
 8000fec:	3828      	subs	r0, #40	; 0x28
 8000fee:	4086      	lsls	r6, r0
 8000ff0:	2700      	movs	r7, #0
 8000ff2:	e69f      	b.n	8000d34 <__aeabi_dadd+0x90>
 8000ff4:	0038      	movs	r0, r7
 8000ff6:	f001 fcad 	bl	8002954 <__clzsi2>
 8000ffa:	3020      	adds	r0, #32
 8000ffc:	e68e      	b.n	8000d1c <__aeabi_dadd+0x78>
 8000ffe:	4643      	mov	r3, r8
 8001000:	4313      	orrs	r3, r2
 8001002:	001f      	movs	r7, r3
 8001004:	1e7a      	subs	r2, r7, #1
 8001006:	4197      	sbcs	r7, r2
 8001008:	1bc7      	subs	r7, r0, r7
 800100a:	42b8      	cmp	r0, r7
 800100c:	4180      	sbcs	r0, r0
 800100e:	4240      	negs	r0, r0
 8001010:	1a09      	subs	r1, r1, r0
 8001012:	e678      	b.n	8000d06 <__aeabi_dadd+0x62>
 8001014:	000e      	movs	r6, r1
 8001016:	003b      	movs	r3, r7
 8001018:	4306      	orrs	r6, r0
 800101a:	4313      	orrs	r3, r2
 800101c:	2d00      	cmp	r5, #0
 800101e:	d161      	bne.n	80010e4 <__aeabi_dadd+0x440>
 8001020:	2e00      	cmp	r6, #0
 8001022:	d000      	beq.n	8001026 <__aeabi_dadd+0x382>
 8001024:	e0f4      	b.n	8001210 <__aeabi_dadd+0x56c>
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <__aeabi_dadd+0x388>
 800102a:	e11b      	b.n	8001264 <__aeabi_dadd+0x5c0>
 800102c:	4664      	mov	r4, ip
 800102e:	0039      	movs	r1, r7
 8001030:	0010      	movs	r0, r2
 8001032:	e739      	b.n	8000ea8 <__aeabi_dadd+0x204>
 8001034:	4f1a      	ldr	r7, [pc, #104]	; (80010a0 <__aeabi_dadd+0x3fc>)
 8001036:	42bb      	cmp	r3, r7
 8001038:	d07a      	beq.n	8001130 <__aeabi_dadd+0x48c>
 800103a:	0033      	movs	r3, r6
 800103c:	e6ff      	b.n	8000e3e <__aeabi_dadd+0x19a>
 800103e:	0030      	movs	r0, r6
 8001040:	3d1f      	subs	r5, #31
 8001042:	40e8      	lsrs	r0, r5
 8001044:	2b20      	cmp	r3, #32
 8001046:	d003      	beq.n	8001050 <__aeabi_dadd+0x3ac>
 8001048:	2140      	movs	r1, #64	; 0x40
 800104a:	1acb      	subs	r3, r1, r3
 800104c:	409e      	lsls	r6, r3
 800104e:	4337      	orrs	r7, r6
 8001050:	1e7b      	subs	r3, r7, #1
 8001052:	419f      	sbcs	r7, r3
 8001054:	2207      	movs	r2, #7
 8001056:	4307      	orrs	r7, r0
 8001058:	403a      	ands	r2, r7
 800105a:	2100      	movs	r1, #0
 800105c:	2500      	movs	r5, #0
 800105e:	e789      	b.n	8000f74 <__aeabi_dadd+0x2d0>
 8001060:	1a17      	subs	r7, r2, r0
 8001062:	4643      	mov	r3, r8
 8001064:	42ba      	cmp	r2, r7
 8001066:	41b6      	sbcs	r6, r6
 8001068:	1a59      	subs	r1, r3, r1
 800106a:	4276      	negs	r6, r6
 800106c:	1b8e      	subs	r6, r1, r6
 800106e:	4664      	mov	r4, ip
 8001070:	e64e      	b.n	8000d10 <__aeabi_dadd+0x6c>
 8001072:	2b1f      	cmp	r3, #31
 8001074:	dd00      	ble.n	8001078 <__aeabi_dadd+0x3d4>
 8001076:	e0ad      	b.n	80011d4 <__aeabi_dadd+0x530>
 8001078:	2620      	movs	r6, #32
 800107a:	4647      	mov	r7, r8
 800107c:	1af6      	subs	r6, r6, r3
 800107e:	40b7      	lsls	r7, r6
 8001080:	46b9      	mov	r9, r7
 8001082:	0017      	movs	r7, r2
 8001084:	46b2      	mov	sl, r6
 8001086:	40df      	lsrs	r7, r3
 8001088:	464e      	mov	r6, r9
 800108a:	433e      	orrs	r6, r7
 800108c:	0037      	movs	r7, r6
 800108e:	4656      	mov	r6, sl
 8001090:	40b2      	lsls	r2, r6
 8001092:	1e56      	subs	r6, r2, #1
 8001094:	41b2      	sbcs	r2, r6
 8001096:	4317      	orrs	r7, r2
 8001098:	4642      	mov	r2, r8
 800109a:	40da      	lsrs	r2, r3
 800109c:	1889      	adds	r1, r1, r2
 800109e:	e6ae      	b.n	8000dfe <__aeabi_dadd+0x15a>
 80010a0:	000007ff 	.word	0x000007ff
 80010a4:	ff7fffff 	.word	0xff7fffff
 80010a8:	800fffff 	.word	0x800fffff
 80010ac:	2620      	movs	r6, #32
 80010ae:	4647      	mov	r7, r8
 80010b0:	1af6      	subs	r6, r6, r3
 80010b2:	40b7      	lsls	r7, r6
 80010b4:	46b9      	mov	r9, r7
 80010b6:	0017      	movs	r7, r2
 80010b8:	46b2      	mov	sl, r6
 80010ba:	40df      	lsrs	r7, r3
 80010bc:	464e      	mov	r6, r9
 80010be:	433e      	orrs	r6, r7
 80010c0:	0037      	movs	r7, r6
 80010c2:	4656      	mov	r6, sl
 80010c4:	40b2      	lsls	r2, r6
 80010c6:	1e56      	subs	r6, r2, #1
 80010c8:	41b2      	sbcs	r2, r6
 80010ca:	4317      	orrs	r7, r2
 80010cc:	4642      	mov	r2, r8
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	1a89      	subs	r1, r1, r2
 80010d2:	e799      	b.n	8001008 <__aeabi_dadd+0x364>
 80010d4:	4c7f      	ldr	r4, [pc, #508]	; (80012d4 <__aeabi_dadd+0x630>)
 80010d6:	42a6      	cmp	r6, r4
 80010d8:	d05b      	beq.n	8001192 <__aeabi_dadd+0x4ee>
 80010da:	2480      	movs	r4, #128	; 0x80
 80010dc:	0424      	lsls	r4, r4, #16
 80010de:	425b      	negs	r3, r3
 80010e0:	4321      	orrs	r1, r4
 80010e2:	e727      	b.n	8000f34 <__aeabi_dadd+0x290>
 80010e4:	2e00      	cmp	r6, #0
 80010e6:	d10c      	bne.n	8001102 <__aeabi_dadd+0x45e>
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_dadd+0x44a>
 80010ec:	e0cb      	b.n	8001286 <__aeabi_dadd+0x5e2>
 80010ee:	4664      	mov	r4, ip
 80010f0:	0039      	movs	r1, r7
 80010f2:	0010      	movs	r0, r2
 80010f4:	4d77      	ldr	r5, [pc, #476]	; (80012d4 <__aeabi_dadd+0x630>)
 80010f6:	e6d7      	b.n	8000ea8 <__aeabi_dadd+0x204>
 80010f8:	4f76      	ldr	r7, [pc, #472]	; (80012d4 <__aeabi_dadd+0x630>)
 80010fa:	42bb      	cmp	r3, r7
 80010fc:	d018      	beq.n	8001130 <__aeabi_dadd+0x48c>
 80010fe:	0033      	movs	r3, r6
 8001100:	e675      	b.n	8000dee <__aeabi_dadd+0x14a>
 8001102:	2b00      	cmp	r3, #0
 8001104:	d014      	beq.n	8001130 <__aeabi_dadd+0x48c>
 8001106:	074b      	lsls	r3, r1, #29
 8001108:	08c0      	lsrs	r0, r0, #3
 800110a:	4318      	orrs	r0, r3
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	08c9      	lsrs	r1, r1, #3
 8001110:	031b      	lsls	r3, r3, #12
 8001112:	4219      	tst	r1, r3
 8001114:	d007      	beq.n	8001126 <__aeabi_dadd+0x482>
 8001116:	08fc      	lsrs	r4, r7, #3
 8001118:	421c      	tst	r4, r3
 800111a:	d104      	bne.n	8001126 <__aeabi_dadd+0x482>
 800111c:	0779      	lsls	r1, r7, #29
 800111e:	08d0      	lsrs	r0, r2, #3
 8001120:	4308      	orrs	r0, r1
 8001122:	46e1      	mov	r9, ip
 8001124:	0021      	movs	r1, r4
 8001126:	464c      	mov	r4, r9
 8001128:	0f42      	lsrs	r2, r0, #29
 800112a:	00c9      	lsls	r1, r1, #3
 800112c:	4311      	orrs	r1, r2
 800112e:	00c0      	lsls	r0, r0, #3
 8001130:	4d68      	ldr	r5, [pc, #416]	; (80012d4 <__aeabi_dadd+0x630>)
 8001132:	e6b9      	b.n	8000ea8 <__aeabi_dadd+0x204>
 8001134:	001d      	movs	r5, r3
 8001136:	2200      	movs	r2, #0
 8001138:	2300      	movs	r3, #0
 800113a:	e6c0      	b.n	8000ebe <__aeabi_dadd+0x21a>
 800113c:	2d00      	cmp	r5, #0
 800113e:	d15b      	bne.n	80011f8 <__aeabi_dadd+0x554>
 8001140:	000d      	movs	r5, r1
 8001142:	4305      	orrs	r5, r0
 8001144:	d100      	bne.n	8001148 <__aeabi_dadd+0x4a4>
 8001146:	e6e2      	b.n	8000f0e <__aeabi_dadd+0x26a>
 8001148:	1c5d      	adds	r5, r3, #1
 800114a:	d100      	bne.n	800114e <__aeabi_dadd+0x4aa>
 800114c:	e0b0      	b.n	80012b0 <__aeabi_dadd+0x60c>
 800114e:	4d61      	ldr	r5, [pc, #388]	; (80012d4 <__aeabi_dadd+0x630>)
 8001150:	42ae      	cmp	r6, r5
 8001152:	d01f      	beq.n	8001194 <__aeabi_dadd+0x4f0>
 8001154:	43db      	mvns	r3, r3
 8001156:	2b38      	cmp	r3, #56	; 0x38
 8001158:	dc71      	bgt.n	800123e <__aeabi_dadd+0x59a>
 800115a:	2b1f      	cmp	r3, #31
 800115c:	dd00      	ble.n	8001160 <__aeabi_dadd+0x4bc>
 800115e:	e096      	b.n	800128e <__aeabi_dadd+0x5ea>
 8001160:	2520      	movs	r5, #32
 8001162:	000f      	movs	r7, r1
 8001164:	1aed      	subs	r5, r5, r3
 8001166:	40af      	lsls	r7, r5
 8001168:	46b9      	mov	r9, r7
 800116a:	0007      	movs	r7, r0
 800116c:	46aa      	mov	sl, r5
 800116e:	40df      	lsrs	r7, r3
 8001170:	464d      	mov	r5, r9
 8001172:	433d      	orrs	r5, r7
 8001174:	002f      	movs	r7, r5
 8001176:	4655      	mov	r5, sl
 8001178:	40a8      	lsls	r0, r5
 800117a:	40d9      	lsrs	r1, r3
 800117c:	1e45      	subs	r5, r0, #1
 800117e:	41a8      	sbcs	r0, r5
 8001180:	4488      	add	r8, r1
 8001182:	4307      	orrs	r7, r0
 8001184:	18bf      	adds	r7, r7, r2
 8001186:	4297      	cmp	r7, r2
 8001188:	4192      	sbcs	r2, r2
 800118a:	4251      	negs	r1, r2
 800118c:	4441      	add	r1, r8
 800118e:	0035      	movs	r5, r6
 8001190:	e63a      	b.n	8000e08 <__aeabi_dadd+0x164>
 8001192:	4664      	mov	r4, ip
 8001194:	0035      	movs	r5, r6
 8001196:	4641      	mov	r1, r8
 8001198:	0010      	movs	r0, r2
 800119a:	e685      	b.n	8000ea8 <__aeabi_dadd+0x204>
 800119c:	000b      	movs	r3, r1
 800119e:	4303      	orrs	r3, r0
 80011a0:	2d00      	cmp	r5, #0
 80011a2:	d000      	beq.n	80011a6 <__aeabi_dadd+0x502>
 80011a4:	e663      	b.n	8000e6e <__aeabi_dadd+0x1ca>
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f5      	beq.n	8001196 <__aeabi_dadd+0x4f2>
 80011aa:	4643      	mov	r3, r8
 80011ac:	4313      	orrs	r3, r2
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x50e>
 80011b0:	e67a      	b.n	8000ea8 <__aeabi_dadd+0x204>
 80011b2:	1887      	adds	r7, r0, r2
 80011b4:	4287      	cmp	r7, r0
 80011b6:	4180      	sbcs	r0, r0
 80011b8:	2207      	movs	r2, #7
 80011ba:	4441      	add	r1, r8
 80011bc:	4240      	negs	r0, r0
 80011be:	1809      	adds	r1, r1, r0
 80011c0:	403a      	ands	r2, r7
 80011c2:	020b      	lsls	r3, r1, #8
 80011c4:	d400      	bmi.n	80011c8 <__aeabi_dadd+0x524>
 80011c6:	e6d5      	b.n	8000f74 <__aeabi_dadd+0x2d0>
 80011c8:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <__aeabi_dadd+0x634>)
 80011ca:	3501      	adds	r5, #1
 80011cc:	4019      	ands	r1, r3
 80011ce:	e5c9      	b.n	8000d64 <__aeabi_dadd+0xc0>
 80011d0:	0038      	movs	r0, r7
 80011d2:	e669      	b.n	8000ea8 <__aeabi_dadd+0x204>
 80011d4:	001e      	movs	r6, r3
 80011d6:	4647      	mov	r7, r8
 80011d8:	3e20      	subs	r6, #32
 80011da:	40f7      	lsrs	r7, r6
 80011dc:	46bc      	mov	ip, r7
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d004      	beq.n	80011ec <__aeabi_dadd+0x548>
 80011e2:	2640      	movs	r6, #64	; 0x40
 80011e4:	1af3      	subs	r3, r6, r3
 80011e6:	4646      	mov	r6, r8
 80011e8:	409e      	lsls	r6, r3
 80011ea:	4332      	orrs	r2, r6
 80011ec:	0017      	movs	r7, r2
 80011ee:	4663      	mov	r3, ip
 80011f0:	1e7a      	subs	r2, r7, #1
 80011f2:	4197      	sbcs	r7, r2
 80011f4:	431f      	orrs	r7, r3
 80011f6:	e602      	b.n	8000dfe <__aeabi_dadd+0x15a>
 80011f8:	4d36      	ldr	r5, [pc, #216]	; (80012d4 <__aeabi_dadd+0x630>)
 80011fa:	42ae      	cmp	r6, r5
 80011fc:	d0ca      	beq.n	8001194 <__aeabi_dadd+0x4f0>
 80011fe:	2580      	movs	r5, #128	; 0x80
 8001200:	042d      	lsls	r5, r5, #16
 8001202:	425b      	negs	r3, r3
 8001204:	4329      	orrs	r1, r5
 8001206:	e7a6      	b.n	8001156 <__aeabi_dadd+0x4b2>
 8001208:	4308      	orrs	r0, r1
 800120a:	1e41      	subs	r1, r0, #1
 800120c:	4188      	sbcs	r0, r1
 800120e:	e6a6      	b.n	8000f5e <__aeabi_dadd+0x2ba>
 8001210:	2b00      	cmp	r3, #0
 8001212:	d100      	bne.n	8001216 <__aeabi_dadd+0x572>
 8001214:	e648      	b.n	8000ea8 <__aeabi_dadd+0x204>
 8001216:	1a87      	subs	r7, r0, r2
 8001218:	4643      	mov	r3, r8
 800121a:	42b8      	cmp	r0, r7
 800121c:	41b6      	sbcs	r6, r6
 800121e:	1acb      	subs	r3, r1, r3
 8001220:	4276      	negs	r6, r6
 8001222:	1b9e      	subs	r6, r3, r6
 8001224:	0233      	lsls	r3, r6, #8
 8001226:	d54b      	bpl.n	80012c0 <__aeabi_dadd+0x61c>
 8001228:	1a17      	subs	r7, r2, r0
 800122a:	4643      	mov	r3, r8
 800122c:	42ba      	cmp	r2, r7
 800122e:	4192      	sbcs	r2, r2
 8001230:	1a59      	subs	r1, r3, r1
 8001232:	4252      	negs	r2, r2
 8001234:	1a89      	subs	r1, r1, r2
 8001236:	2207      	movs	r2, #7
 8001238:	4664      	mov	r4, ip
 800123a:	403a      	ands	r2, r7
 800123c:	e592      	b.n	8000d64 <__aeabi_dadd+0xc0>
 800123e:	4301      	orrs	r1, r0
 8001240:	000f      	movs	r7, r1
 8001242:	1e79      	subs	r1, r7, #1
 8001244:	418f      	sbcs	r7, r1
 8001246:	e79d      	b.n	8001184 <__aeabi_dadd+0x4e0>
 8001248:	001c      	movs	r4, r3
 800124a:	000f      	movs	r7, r1
 800124c:	3c20      	subs	r4, #32
 800124e:	40e7      	lsrs	r7, r4
 8001250:	2b20      	cmp	r3, #32
 8001252:	d003      	beq.n	800125c <__aeabi_dadd+0x5b8>
 8001254:	2440      	movs	r4, #64	; 0x40
 8001256:	1ae3      	subs	r3, r4, r3
 8001258:	4099      	lsls	r1, r3
 800125a:	4308      	orrs	r0, r1
 800125c:	1e41      	subs	r1, r0, #1
 800125e:	4188      	sbcs	r0, r1
 8001260:	4338      	orrs	r0, r7
 8001262:	e67c      	b.n	8000f5e <__aeabi_dadd+0x2ba>
 8001264:	2200      	movs	r2, #0
 8001266:	2400      	movs	r4, #0
 8001268:	e625      	b.n	8000eb6 <__aeabi_dadd+0x212>
 800126a:	1a17      	subs	r7, r2, r0
 800126c:	4643      	mov	r3, r8
 800126e:	42ba      	cmp	r2, r7
 8001270:	4192      	sbcs	r2, r2
 8001272:	1a59      	subs	r1, r3, r1
 8001274:	4252      	negs	r2, r2
 8001276:	1a89      	subs	r1, r1, r2
 8001278:	4664      	mov	r4, ip
 800127a:	0035      	movs	r5, r6
 800127c:	e543      	b.n	8000d06 <__aeabi_dadd+0x62>
 800127e:	4641      	mov	r1, r8
 8001280:	0010      	movs	r0, r2
 8001282:	4d14      	ldr	r5, [pc, #80]	; (80012d4 <__aeabi_dadd+0x630>)
 8001284:	e610      	b.n	8000ea8 <__aeabi_dadd+0x204>
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	2400      	movs	r4, #0
 800128a:	0312      	lsls	r2, r2, #12
 800128c:	e680      	b.n	8000f90 <__aeabi_dadd+0x2ec>
 800128e:	001d      	movs	r5, r3
 8001290:	000f      	movs	r7, r1
 8001292:	3d20      	subs	r5, #32
 8001294:	40ef      	lsrs	r7, r5
 8001296:	46bc      	mov	ip, r7
 8001298:	2b20      	cmp	r3, #32
 800129a:	d003      	beq.n	80012a4 <__aeabi_dadd+0x600>
 800129c:	2540      	movs	r5, #64	; 0x40
 800129e:	1aeb      	subs	r3, r5, r3
 80012a0:	4099      	lsls	r1, r3
 80012a2:	4308      	orrs	r0, r1
 80012a4:	0007      	movs	r7, r0
 80012a6:	4663      	mov	r3, ip
 80012a8:	1e78      	subs	r0, r7, #1
 80012aa:	4187      	sbcs	r7, r0
 80012ac:	431f      	orrs	r7, r3
 80012ae:	e769      	b.n	8001184 <__aeabi_dadd+0x4e0>
 80012b0:	1887      	adds	r7, r0, r2
 80012b2:	4297      	cmp	r7, r2
 80012b4:	419b      	sbcs	r3, r3
 80012b6:	4441      	add	r1, r8
 80012b8:	425b      	negs	r3, r3
 80012ba:	18c9      	adds	r1, r1, r3
 80012bc:	0035      	movs	r5, r6
 80012be:	e5a3      	b.n	8000e08 <__aeabi_dadd+0x164>
 80012c0:	003b      	movs	r3, r7
 80012c2:	4333      	orrs	r3, r6
 80012c4:	d0ce      	beq.n	8001264 <__aeabi_dadd+0x5c0>
 80012c6:	2207      	movs	r2, #7
 80012c8:	0031      	movs	r1, r6
 80012ca:	403a      	ands	r2, r7
 80012cc:	e652      	b.n	8000f74 <__aeabi_dadd+0x2d0>
 80012ce:	2300      	movs	r3, #0
 80012d0:	001a      	movs	r2, r3
 80012d2:	e5f4      	b.n	8000ebe <__aeabi_dadd+0x21a>
 80012d4:	000007ff 	.word	0x000007ff
 80012d8:	ff7fffff 	.word	0xff7fffff

080012dc <__aeabi_ddiv>:
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	4657      	mov	r7, sl
 80012e0:	46de      	mov	lr, fp
 80012e2:	464e      	mov	r6, r9
 80012e4:	4645      	mov	r5, r8
 80012e6:	b5e0      	push	{r5, r6, r7, lr}
 80012e8:	4683      	mov	fp, r0
 80012ea:	0007      	movs	r7, r0
 80012ec:	030e      	lsls	r6, r1, #12
 80012ee:	0048      	lsls	r0, r1, #1
 80012f0:	b085      	sub	sp, #20
 80012f2:	4692      	mov	sl, r2
 80012f4:	001c      	movs	r4, r3
 80012f6:	0b36      	lsrs	r6, r6, #12
 80012f8:	0d40      	lsrs	r0, r0, #21
 80012fa:	0fcd      	lsrs	r5, r1, #31
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_ddiv+0x26>
 8001300:	e09d      	b.n	800143e <__aeabi_ddiv+0x162>
 8001302:	4b95      	ldr	r3, [pc, #596]	; (8001558 <__aeabi_ddiv+0x27c>)
 8001304:	4298      	cmp	r0, r3
 8001306:	d039      	beq.n	800137c <__aeabi_ddiv+0xa0>
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	00f6      	lsls	r6, r6, #3
 800130c:	041b      	lsls	r3, r3, #16
 800130e:	431e      	orrs	r6, r3
 8001310:	4a92      	ldr	r2, [pc, #584]	; (800155c <__aeabi_ddiv+0x280>)
 8001312:	0f7b      	lsrs	r3, r7, #29
 8001314:	4333      	orrs	r3, r6
 8001316:	4699      	mov	r9, r3
 8001318:	4694      	mov	ip, r2
 800131a:	0003      	movs	r3, r0
 800131c:	4463      	add	r3, ip
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	2600      	movs	r6, #0
 8001324:	00ff      	lsls	r7, r7, #3
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	0323      	lsls	r3, r4, #12
 800132a:	0b1b      	lsrs	r3, r3, #12
 800132c:	4698      	mov	r8, r3
 800132e:	0063      	lsls	r3, r4, #1
 8001330:	0fe4      	lsrs	r4, r4, #31
 8001332:	4652      	mov	r2, sl
 8001334:	0d5b      	lsrs	r3, r3, #21
 8001336:	9401      	str	r4, [sp, #4]
 8001338:	d100      	bne.n	800133c <__aeabi_ddiv+0x60>
 800133a:	e0b3      	b.n	80014a4 <__aeabi_ddiv+0x1c8>
 800133c:	4986      	ldr	r1, [pc, #536]	; (8001558 <__aeabi_ddiv+0x27c>)
 800133e:	428b      	cmp	r3, r1
 8001340:	d100      	bne.n	8001344 <__aeabi_ddiv+0x68>
 8001342:	e09e      	b.n	8001482 <__aeabi_ddiv+0x1a6>
 8001344:	4642      	mov	r2, r8
 8001346:	00d1      	lsls	r1, r2, #3
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	0412      	lsls	r2, r2, #16
 800134c:	430a      	orrs	r2, r1
 800134e:	4651      	mov	r1, sl
 8001350:	0f49      	lsrs	r1, r1, #29
 8001352:	4311      	orrs	r1, r2
 8001354:	468b      	mov	fp, r1
 8001356:	4981      	ldr	r1, [pc, #516]	; (800155c <__aeabi_ddiv+0x280>)
 8001358:	4652      	mov	r2, sl
 800135a:	468c      	mov	ip, r1
 800135c:	9900      	ldr	r1, [sp, #0]
 800135e:	4463      	add	r3, ip
 8001360:	1acb      	subs	r3, r1, r3
 8001362:	2100      	movs	r1, #0
 8001364:	00d2      	lsls	r2, r2, #3
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	002b      	movs	r3, r5
 800136a:	4063      	eors	r3, r4
 800136c:	469a      	mov	sl, r3
 800136e:	2e0f      	cmp	r6, #15
 8001370:	d900      	bls.n	8001374 <__aeabi_ddiv+0x98>
 8001372:	e105      	b.n	8001580 <__aeabi_ddiv+0x2a4>
 8001374:	4b7a      	ldr	r3, [pc, #488]	; (8001560 <__aeabi_ddiv+0x284>)
 8001376:	00b6      	lsls	r6, r6, #2
 8001378:	599b      	ldr	r3, [r3, r6]
 800137a:	469f      	mov	pc, r3
 800137c:	465b      	mov	r3, fp
 800137e:	4333      	orrs	r3, r6
 8001380:	4699      	mov	r9, r3
 8001382:	d000      	beq.n	8001386 <__aeabi_ddiv+0xaa>
 8001384:	e0b8      	b.n	80014f8 <__aeabi_ddiv+0x21c>
 8001386:	2302      	movs	r3, #2
 8001388:	2608      	movs	r6, #8
 800138a:	2700      	movs	r7, #0
 800138c:	9000      	str	r0, [sp, #0]
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	e7ca      	b.n	8001328 <__aeabi_ddiv+0x4c>
 8001392:	46cb      	mov	fp, r9
 8001394:	003a      	movs	r2, r7
 8001396:	9902      	ldr	r1, [sp, #8]
 8001398:	9501      	str	r5, [sp, #4]
 800139a:	9b01      	ldr	r3, [sp, #4]
 800139c:	469a      	mov	sl, r3
 800139e:	2902      	cmp	r1, #2
 80013a0:	d027      	beq.n	80013f2 <__aeabi_ddiv+0x116>
 80013a2:	2903      	cmp	r1, #3
 80013a4:	d100      	bne.n	80013a8 <__aeabi_ddiv+0xcc>
 80013a6:	e280      	b.n	80018aa <__aeabi_ddiv+0x5ce>
 80013a8:	2901      	cmp	r1, #1
 80013aa:	d044      	beq.n	8001436 <__aeabi_ddiv+0x15a>
 80013ac:	496d      	ldr	r1, [pc, #436]	; (8001564 <__aeabi_ddiv+0x288>)
 80013ae:	9b00      	ldr	r3, [sp, #0]
 80013b0:	468c      	mov	ip, r1
 80013b2:	4463      	add	r3, ip
 80013b4:	001c      	movs	r4, r3
 80013b6:	2c00      	cmp	r4, #0
 80013b8:	dd38      	ble.n	800142c <__aeabi_ddiv+0x150>
 80013ba:	0753      	lsls	r3, r2, #29
 80013bc:	d000      	beq.n	80013c0 <__aeabi_ddiv+0xe4>
 80013be:	e213      	b.n	80017e8 <__aeabi_ddiv+0x50c>
 80013c0:	08d2      	lsrs	r2, r2, #3
 80013c2:	465b      	mov	r3, fp
 80013c4:	01db      	lsls	r3, r3, #7
 80013c6:	d509      	bpl.n	80013dc <__aeabi_ddiv+0x100>
 80013c8:	4659      	mov	r1, fp
 80013ca:	4b67      	ldr	r3, [pc, #412]	; (8001568 <__aeabi_ddiv+0x28c>)
 80013cc:	4019      	ands	r1, r3
 80013ce:	468b      	mov	fp, r1
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	00c9      	lsls	r1, r1, #3
 80013d4:	468c      	mov	ip, r1
 80013d6:	9b00      	ldr	r3, [sp, #0]
 80013d8:	4463      	add	r3, ip
 80013da:	001c      	movs	r4, r3
 80013dc:	4b63      	ldr	r3, [pc, #396]	; (800156c <__aeabi_ddiv+0x290>)
 80013de:	429c      	cmp	r4, r3
 80013e0:	dc07      	bgt.n	80013f2 <__aeabi_ddiv+0x116>
 80013e2:	465b      	mov	r3, fp
 80013e4:	0564      	lsls	r4, r4, #21
 80013e6:	075f      	lsls	r7, r3, #29
 80013e8:	025b      	lsls	r3, r3, #9
 80013ea:	4317      	orrs	r7, r2
 80013ec:	0b1b      	lsrs	r3, r3, #12
 80013ee:	0d62      	lsrs	r2, r4, #21
 80013f0:	e002      	b.n	80013f8 <__aeabi_ddiv+0x11c>
 80013f2:	2300      	movs	r3, #0
 80013f4:	2700      	movs	r7, #0
 80013f6:	4a58      	ldr	r2, [pc, #352]	; (8001558 <__aeabi_ddiv+0x27c>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	031b      	lsls	r3, r3, #12
 80013fc:	0b1c      	lsrs	r4, r3, #12
 80013fe:	0d0b      	lsrs	r3, r1, #20
 8001400:	051b      	lsls	r3, r3, #20
 8001402:	4323      	orrs	r3, r4
 8001404:	0514      	lsls	r4, r2, #20
 8001406:	4a5a      	ldr	r2, [pc, #360]	; (8001570 <__aeabi_ddiv+0x294>)
 8001408:	0038      	movs	r0, r7
 800140a:	4013      	ands	r3, r2
 800140c:	431c      	orrs	r4, r3
 800140e:	4653      	mov	r3, sl
 8001410:	0064      	lsls	r4, r4, #1
 8001412:	07db      	lsls	r3, r3, #31
 8001414:	0864      	lsrs	r4, r4, #1
 8001416:	431c      	orrs	r4, r3
 8001418:	0021      	movs	r1, r4
 800141a:	b005      	add	sp, #20
 800141c:	bc3c      	pop	{r2, r3, r4, r5}
 800141e:	4690      	mov	r8, r2
 8001420:	4699      	mov	r9, r3
 8001422:	46a2      	mov	sl, r4
 8001424:	46ab      	mov	fp, r5
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	2201      	movs	r2, #1
 800142a:	4252      	negs	r2, r2
 800142c:	2301      	movs	r3, #1
 800142e:	1b1b      	subs	r3, r3, r4
 8001430:	2b38      	cmp	r3, #56	; 0x38
 8001432:	dc00      	bgt.n	8001436 <__aeabi_ddiv+0x15a>
 8001434:	e1ad      	b.n	8001792 <__aeabi_ddiv+0x4b6>
 8001436:	2200      	movs	r2, #0
 8001438:	2300      	movs	r3, #0
 800143a:	2700      	movs	r7, #0
 800143c:	e7dc      	b.n	80013f8 <__aeabi_ddiv+0x11c>
 800143e:	465b      	mov	r3, fp
 8001440:	4333      	orrs	r3, r6
 8001442:	4699      	mov	r9, r3
 8001444:	d05e      	beq.n	8001504 <__aeabi_ddiv+0x228>
 8001446:	2e00      	cmp	r6, #0
 8001448:	d100      	bne.n	800144c <__aeabi_ddiv+0x170>
 800144a:	e18a      	b.n	8001762 <__aeabi_ddiv+0x486>
 800144c:	0030      	movs	r0, r6
 800144e:	f001 fa81 	bl	8002954 <__clzsi2>
 8001452:	0003      	movs	r3, r0
 8001454:	3b0b      	subs	r3, #11
 8001456:	2b1c      	cmp	r3, #28
 8001458:	dd00      	ble.n	800145c <__aeabi_ddiv+0x180>
 800145a:	e17b      	b.n	8001754 <__aeabi_ddiv+0x478>
 800145c:	221d      	movs	r2, #29
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	465a      	mov	r2, fp
 8001462:	0001      	movs	r1, r0
 8001464:	40da      	lsrs	r2, r3
 8001466:	3908      	subs	r1, #8
 8001468:	408e      	lsls	r6, r1
 800146a:	0013      	movs	r3, r2
 800146c:	465f      	mov	r7, fp
 800146e:	4333      	orrs	r3, r6
 8001470:	4699      	mov	r9, r3
 8001472:	408f      	lsls	r7, r1
 8001474:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <__aeabi_ddiv+0x298>)
 8001476:	2600      	movs	r6, #0
 8001478:	1a1b      	subs	r3, r3, r0
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2300      	movs	r3, #0
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	e752      	b.n	8001328 <__aeabi_ddiv+0x4c>
 8001482:	4641      	mov	r1, r8
 8001484:	4653      	mov	r3, sl
 8001486:	430b      	orrs	r3, r1
 8001488:	493b      	ldr	r1, [pc, #236]	; (8001578 <__aeabi_ddiv+0x29c>)
 800148a:	469b      	mov	fp, r3
 800148c:	468c      	mov	ip, r1
 800148e:	9b00      	ldr	r3, [sp, #0]
 8001490:	4463      	add	r3, ip
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	465b      	mov	r3, fp
 8001496:	2b00      	cmp	r3, #0
 8001498:	d13b      	bne.n	8001512 <__aeabi_ddiv+0x236>
 800149a:	2302      	movs	r3, #2
 800149c:	2200      	movs	r2, #0
 800149e:	431e      	orrs	r6, r3
 80014a0:	2102      	movs	r1, #2
 80014a2:	e761      	b.n	8001368 <__aeabi_ddiv+0x8c>
 80014a4:	4643      	mov	r3, r8
 80014a6:	4313      	orrs	r3, r2
 80014a8:	469b      	mov	fp, r3
 80014aa:	d037      	beq.n	800151c <__aeabi_ddiv+0x240>
 80014ac:	4643      	mov	r3, r8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d100      	bne.n	80014b4 <__aeabi_ddiv+0x1d8>
 80014b2:	e162      	b.n	800177a <__aeabi_ddiv+0x49e>
 80014b4:	4640      	mov	r0, r8
 80014b6:	f001 fa4d 	bl	8002954 <__clzsi2>
 80014ba:	0003      	movs	r3, r0
 80014bc:	3b0b      	subs	r3, #11
 80014be:	2b1c      	cmp	r3, #28
 80014c0:	dd00      	ble.n	80014c4 <__aeabi_ddiv+0x1e8>
 80014c2:	e153      	b.n	800176c <__aeabi_ddiv+0x490>
 80014c4:	0002      	movs	r2, r0
 80014c6:	4641      	mov	r1, r8
 80014c8:	3a08      	subs	r2, #8
 80014ca:	4091      	lsls	r1, r2
 80014cc:	4688      	mov	r8, r1
 80014ce:	211d      	movs	r1, #29
 80014d0:	1acb      	subs	r3, r1, r3
 80014d2:	4651      	mov	r1, sl
 80014d4:	40d9      	lsrs	r1, r3
 80014d6:	000b      	movs	r3, r1
 80014d8:	4641      	mov	r1, r8
 80014da:	430b      	orrs	r3, r1
 80014dc:	469b      	mov	fp, r3
 80014de:	4653      	mov	r3, sl
 80014e0:	4093      	lsls	r3, r2
 80014e2:	001a      	movs	r2, r3
 80014e4:	9b00      	ldr	r3, [sp, #0]
 80014e6:	4925      	ldr	r1, [pc, #148]	; (800157c <__aeabi_ddiv+0x2a0>)
 80014e8:	469c      	mov	ip, r3
 80014ea:	4460      	add	r0, ip
 80014ec:	0003      	movs	r3, r0
 80014ee:	468c      	mov	ip, r1
 80014f0:	4463      	add	r3, ip
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2100      	movs	r1, #0
 80014f6:	e737      	b.n	8001368 <__aeabi_ddiv+0x8c>
 80014f8:	2303      	movs	r3, #3
 80014fa:	46b1      	mov	r9, r6
 80014fc:	9000      	str	r0, [sp, #0]
 80014fe:	260c      	movs	r6, #12
 8001500:	9302      	str	r3, [sp, #8]
 8001502:	e711      	b.n	8001328 <__aeabi_ddiv+0x4c>
 8001504:	2300      	movs	r3, #0
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	2604      	movs	r6, #4
 800150c:	2700      	movs	r7, #0
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	e70a      	b.n	8001328 <__aeabi_ddiv+0x4c>
 8001512:	2303      	movs	r3, #3
 8001514:	46c3      	mov	fp, r8
 8001516:	431e      	orrs	r6, r3
 8001518:	2103      	movs	r1, #3
 800151a:	e725      	b.n	8001368 <__aeabi_ddiv+0x8c>
 800151c:	3301      	adds	r3, #1
 800151e:	431e      	orrs	r6, r3
 8001520:	2200      	movs	r2, #0
 8001522:	2101      	movs	r1, #1
 8001524:	e720      	b.n	8001368 <__aeabi_ddiv+0x8c>
 8001526:	2300      	movs	r3, #0
 8001528:	469a      	mov	sl, r3
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	2700      	movs	r7, #0
 800152e:	031b      	lsls	r3, r3, #12
 8001530:	4a09      	ldr	r2, [pc, #36]	; (8001558 <__aeabi_ddiv+0x27c>)
 8001532:	e761      	b.n	80013f8 <__aeabi_ddiv+0x11c>
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	4649      	mov	r1, r9
 8001538:	031b      	lsls	r3, r3, #12
 800153a:	4219      	tst	r1, r3
 800153c:	d100      	bne.n	8001540 <__aeabi_ddiv+0x264>
 800153e:	e0e2      	b.n	8001706 <__aeabi_ddiv+0x42a>
 8001540:	4659      	mov	r1, fp
 8001542:	4219      	tst	r1, r3
 8001544:	d000      	beq.n	8001548 <__aeabi_ddiv+0x26c>
 8001546:	e0de      	b.n	8001706 <__aeabi_ddiv+0x42a>
 8001548:	430b      	orrs	r3, r1
 800154a:	031b      	lsls	r3, r3, #12
 800154c:	0017      	movs	r7, r2
 800154e:	0b1b      	lsrs	r3, r3, #12
 8001550:	46a2      	mov	sl, r4
 8001552:	4a01      	ldr	r2, [pc, #4]	; (8001558 <__aeabi_ddiv+0x27c>)
 8001554:	e750      	b.n	80013f8 <__aeabi_ddiv+0x11c>
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	000007ff 	.word	0x000007ff
 800155c:	fffffc01 	.word	0xfffffc01
 8001560:	08009970 	.word	0x08009970
 8001564:	000003ff 	.word	0x000003ff
 8001568:	feffffff 	.word	0xfeffffff
 800156c:	000007fe 	.word	0x000007fe
 8001570:	800fffff 	.word	0x800fffff
 8001574:	fffffc0d 	.word	0xfffffc0d
 8001578:	fffff801 	.word	0xfffff801
 800157c:	000003f3 	.word	0x000003f3
 8001580:	45d9      	cmp	r9, fp
 8001582:	d900      	bls.n	8001586 <__aeabi_ddiv+0x2aa>
 8001584:	e0cb      	b.n	800171e <__aeabi_ddiv+0x442>
 8001586:	d100      	bne.n	800158a <__aeabi_ddiv+0x2ae>
 8001588:	e0c6      	b.n	8001718 <__aeabi_ddiv+0x43c>
 800158a:	003c      	movs	r4, r7
 800158c:	4648      	mov	r0, r9
 800158e:	2700      	movs	r7, #0
 8001590:	9b00      	ldr	r3, [sp, #0]
 8001592:	3b01      	subs	r3, #1
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	465b      	mov	r3, fp
 8001598:	0e16      	lsrs	r6, r2, #24
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	431e      	orrs	r6, r3
 800159e:	0213      	lsls	r3, r2, #8
 80015a0:	4698      	mov	r8, r3
 80015a2:	0433      	lsls	r3, r6, #16
 80015a4:	0c1b      	lsrs	r3, r3, #16
 80015a6:	4699      	mov	r9, r3
 80015a8:	0c31      	lsrs	r1, r6, #16
 80015aa:	9101      	str	r1, [sp, #4]
 80015ac:	f7fe fe3c 	bl	8000228 <__aeabi_uidivmod>
 80015b0:	464a      	mov	r2, r9
 80015b2:	4342      	muls	r2, r0
 80015b4:	040b      	lsls	r3, r1, #16
 80015b6:	0c21      	lsrs	r1, r4, #16
 80015b8:	0005      	movs	r5, r0
 80015ba:	4319      	orrs	r1, r3
 80015bc:	428a      	cmp	r2, r1
 80015be:	d907      	bls.n	80015d0 <__aeabi_ddiv+0x2f4>
 80015c0:	1989      	adds	r1, r1, r6
 80015c2:	3d01      	subs	r5, #1
 80015c4:	428e      	cmp	r6, r1
 80015c6:	d803      	bhi.n	80015d0 <__aeabi_ddiv+0x2f4>
 80015c8:	428a      	cmp	r2, r1
 80015ca:	d901      	bls.n	80015d0 <__aeabi_ddiv+0x2f4>
 80015cc:	1e85      	subs	r5, r0, #2
 80015ce:	1989      	adds	r1, r1, r6
 80015d0:	1a88      	subs	r0, r1, r2
 80015d2:	9901      	ldr	r1, [sp, #4]
 80015d4:	f7fe fe28 	bl	8000228 <__aeabi_uidivmod>
 80015d8:	0409      	lsls	r1, r1, #16
 80015da:	468c      	mov	ip, r1
 80015dc:	464a      	mov	r2, r9
 80015de:	0421      	lsls	r1, r4, #16
 80015e0:	4664      	mov	r4, ip
 80015e2:	4342      	muls	r2, r0
 80015e4:	0c09      	lsrs	r1, r1, #16
 80015e6:	0003      	movs	r3, r0
 80015e8:	4321      	orrs	r1, r4
 80015ea:	428a      	cmp	r2, r1
 80015ec:	d904      	bls.n	80015f8 <__aeabi_ddiv+0x31c>
 80015ee:	1989      	adds	r1, r1, r6
 80015f0:	3b01      	subs	r3, #1
 80015f2:	428e      	cmp	r6, r1
 80015f4:	d800      	bhi.n	80015f8 <__aeabi_ddiv+0x31c>
 80015f6:	e0f1      	b.n	80017dc <__aeabi_ddiv+0x500>
 80015f8:	042d      	lsls	r5, r5, #16
 80015fa:	431d      	orrs	r5, r3
 80015fc:	46ab      	mov	fp, r5
 80015fe:	4643      	mov	r3, r8
 8001600:	1a89      	subs	r1, r1, r2
 8001602:	4642      	mov	r2, r8
 8001604:	0c28      	lsrs	r0, r5, #16
 8001606:	0412      	lsls	r2, r2, #16
 8001608:	0c1d      	lsrs	r5, r3, #16
 800160a:	465b      	mov	r3, fp
 800160c:	0c14      	lsrs	r4, r2, #16
 800160e:	0022      	movs	r2, r4
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	0c1b      	lsrs	r3, r3, #16
 8001614:	435a      	muls	r2, r3
 8001616:	9403      	str	r4, [sp, #12]
 8001618:	436b      	muls	r3, r5
 800161a:	4344      	muls	r4, r0
 800161c:	9502      	str	r5, [sp, #8]
 800161e:	4368      	muls	r0, r5
 8001620:	191b      	adds	r3, r3, r4
 8001622:	0c15      	lsrs	r5, r2, #16
 8001624:	18eb      	adds	r3, r5, r3
 8001626:	429c      	cmp	r4, r3
 8001628:	d903      	bls.n	8001632 <__aeabi_ddiv+0x356>
 800162a:	2480      	movs	r4, #128	; 0x80
 800162c:	0264      	lsls	r4, r4, #9
 800162e:	46a4      	mov	ip, r4
 8001630:	4460      	add	r0, ip
 8001632:	0c1c      	lsrs	r4, r3, #16
 8001634:	0415      	lsls	r5, r2, #16
 8001636:	041b      	lsls	r3, r3, #16
 8001638:	0c2d      	lsrs	r5, r5, #16
 800163a:	1820      	adds	r0, r4, r0
 800163c:	195d      	adds	r5, r3, r5
 800163e:	4281      	cmp	r1, r0
 8001640:	d377      	bcc.n	8001732 <__aeabi_ddiv+0x456>
 8001642:	d073      	beq.n	800172c <__aeabi_ddiv+0x450>
 8001644:	1a0c      	subs	r4, r1, r0
 8001646:	4aa2      	ldr	r2, [pc, #648]	; (80018d0 <__aeabi_ddiv+0x5f4>)
 8001648:	1b7d      	subs	r5, r7, r5
 800164a:	42af      	cmp	r7, r5
 800164c:	41bf      	sbcs	r7, r7
 800164e:	4694      	mov	ip, r2
 8001650:	9b00      	ldr	r3, [sp, #0]
 8001652:	427f      	negs	r7, r7
 8001654:	4463      	add	r3, ip
 8001656:	1be0      	subs	r0, r4, r7
 8001658:	001c      	movs	r4, r3
 800165a:	4286      	cmp	r6, r0
 800165c:	d100      	bne.n	8001660 <__aeabi_ddiv+0x384>
 800165e:	e0db      	b.n	8001818 <__aeabi_ddiv+0x53c>
 8001660:	9901      	ldr	r1, [sp, #4]
 8001662:	f7fe fde1 	bl	8000228 <__aeabi_uidivmod>
 8001666:	464a      	mov	r2, r9
 8001668:	4342      	muls	r2, r0
 800166a:	040b      	lsls	r3, r1, #16
 800166c:	0c29      	lsrs	r1, r5, #16
 800166e:	0007      	movs	r7, r0
 8001670:	4319      	orrs	r1, r3
 8001672:	428a      	cmp	r2, r1
 8001674:	d907      	bls.n	8001686 <__aeabi_ddiv+0x3aa>
 8001676:	1989      	adds	r1, r1, r6
 8001678:	3f01      	subs	r7, #1
 800167a:	428e      	cmp	r6, r1
 800167c:	d803      	bhi.n	8001686 <__aeabi_ddiv+0x3aa>
 800167e:	428a      	cmp	r2, r1
 8001680:	d901      	bls.n	8001686 <__aeabi_ddiv+0x3aa>
 8001682:	1e87      	subs	r7, r0, #2
 8001684:	1989      	adds	r1, r1, r6
 8001686:	1a88      	subs	r0, r1, r2
 8001688:	9901      	ldr	r1, [sp, #4]
 800168a:	f7fe fdcd 	bl	8000228 <__aeabi_uidivmod>
 800168e:	0409      	lsls	r1, r1, #16
 8001690:	464a      	mov	r2, r9
 8001692:	4689      	mov	r9, r1
 8001694:	0429      	lsls	r1, r5, #16
 8001696:	464d      	mov	r5, r9
 8001698:	4342      	muls	r2, r0
 800169a:	0c09      	lsrs	r1, r1, #16
 800169c:	0003      	movs	r3, r0
 800169e:	4329      	orrs	r1, r5
 80016a0:	428a      	cmp	r2, r1
 80016a2:	d907      	bls.n	80016b4 <__aeabi_ddiv+0x3d8>
 80016a4:	1989      	adds	r1, r1, r6
 80016a6:	3b01      	subs	r3, #1
 80016a8:	428e      	cmp	r6, r1
 80016aa:	d803      	bhi.n	80016b4 <__aeabi_ddiv+0x3d8>
 80016ac:	428a      	cmp	r2, r1
 80016ae:	d901      	bls.n	80016b4 <__aeabi_ddiv+0x3d8>
 80016b0:	1e83      	subs	r3, r0, #2
 80016b2:	1989      	adds	r1, r1, r6
 80016b4:	043f      	lsls	r7, r7, #16
 80016b6:	1a89      	subs	r1, r1, r2
 80016b8:	003a      	movs	r2, r7
 80016ba:	9f03      	ldr	r7, [sp, #12]
 80016bc:	431a      	orrs	r2, r3
 80016be:	0038      	movs	r0, r7
 80016c0:	0413      	lsls	r3, r2, #16
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	4358      	muls	r0, r3
 80016c6:	4681      	mov	r9, r0
 80016c8:	9802      	ldr	r0, [sp, #8]
 80016ca:	0c15      	lsrs	r5, r2, #16
 80016cc:	436f      	muls	r7, r5
 80016ce:	4343      	muls	r3, r0
 80016d0:	4345      	muls	r5, r0
 80016d2:	4648      	mov	r0, r9
 80016d4:	0c00      	lsrs	r0, r0, #16
 80016d6:	4684      	mov	ip, r0
 80016d8:	19db      	adds	r3, r3, r7
 80016da:	4463      	add	r3, ip
 80016dc:	429f      	cmp	r7, r3
 80016de:	d903      	bls.n	80016e8 <__aeabi_ddiv+0x40c>
 80016e0:	2080      	movs	r0, #128	; 0x80
 80016e2:	0240      	lsls	r0, r0, #9
 80016e4:	4684      	mov	ip, r0
 80016e6:	4465      	add	r5, ip
 80016e8:	4648      	mov	r0, r9
 80016ea:	0c1f      	lsrs	r7, r3, #16
 80016ec:	0400      	lsls	r0, r0, #16
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	0c00      	lsrs	r0, r0, #16
 80016f2:	197d      	adds	r5, r7, r5
 80016f4:	1818      	adds	r0, r3, r0
 80016f6:	42a9      	cmp	r1, r5
 80016f8:	d200      	bcs.n	80016fc <__aeabi_ddiv+0x420>
 80016fa:	e084      	b.n	8001806 <__aeabi_ddiv+0x52a>
 80016fc:	d100      	bne.n	8001700 <__aeabi_ddiv+0x424>
 80016fe:	e07f      	b.n	8001800 <__aeabi_ddiv+0x524>
 8001700:	2301      	movs	r3, #1
 8001702:	431a      	orrs	r2, r3
 8001704:	e657      	b.n	80013b6 <__aeabi_ddiv+0xda>
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	464a      	mov	r2, r9
 800170a:	031b      	lsls	r3, r3, #12
 800170c:	4313      	orrs	r3, r2
 800170e:	031b      	lsls	r3, r3, #12
 8001710:	0b1b      	lsrs	r3, r3, #12
 8001712:	46aa      	mov	sl, r5
 8001714:	4a6f      	ldr	r2, [pc, #444]	; (80018d4 <__aeabi_ddiv+0x5f8>)
 8001716:	e66f      	b.n	80013f8 <__aeabi_ddiv+0x11c>
 8001718:	42ba      	cmp	r2, r7
 800171a:	d900      	bls.n	800171e <__aeabi_ddiv+0x442>
 800171c:	e735      	b.n	800158a <__aeabi_ddiv+0x2ae>
 800171e:	464b      	mov	r3, r9
 8001720:	07dc      	lsls	r4, r3, #31
 8001722:	0858      	lsrs	r0, r3, #1
 8001724:	087b      	lsrs	r3, r7, #1
 8001726:	431c      	orrs	r4, r3
 8001728:	07ff      	lsls	r7, r7, #31
 800172a:	e734      	b.n	8001596 <__aeabi_ddiv+0x2ba>
 800172c:	2400      	movs	r4, #0
 800172e:	42af      	cmp	r7, r5
 8001730:	d289      	bcs.n	8001646 <__aeabi_ddiv+0x36a>
 8001732:	4447      	add	r7, r8
 8001734:	4547      	cmp	r7, r8
 8001736:	41a4      	sbcs	r4, r4
 8001738:	465b      	mov	r3, fp
 800173a:	4264      	negs	r4, r4
 800173c:	19a4      	adds	r4, r4, r6
 800173e:	1864      	adds	r4, r4, r1
 8001740:	3b01      	subs	r3, #1
 8001742:	42a6      	cmp	r6, r4
 8001744:	d21e      	bcs.n	8001784 <__aeabi_ddiv+0x4a8>
 8001746:	42a0      	cmp	r0, r4
 8001748:	d86d      	bhi.n	8001826 <__aeabi_ddiv+0x54a>
 800174a:	d100      	bne.n	800174e <__aeabi_ddiv+0x472>
 800174c:	e0b6      	b.n	80018bc <__aeabi_ddiv+0x5e0>
 800174e:	1a24      	subs	r4, r4, r0
 8001750:	469b      	mov	fp, r3
 8001752:	e778      	b.n	8001646 <__aeabi_ddiv+0x36a>
 8001754:	0003      	movs	r3, r0
 8001756:	465a      	mov	r2, fp
 8001758:	3b28      	subs	r3, #40	; 0x28
 800175a:	409a      	lsls	r2, r3
 800175c:	2700      	movs	r7, #0
 800175e:	4691      	mov	r9, r2
 8001760:	e688      	b.n	8001474 <__aeabi_ddiv+0x198>
 8001762:	4658      	mov	r0, fp
 8001764:	f001 f8f6 	bl	8002954 <__clzsi2>
 8001768:	3020      	adds	r0, #32
 800176a:	e672      	b.n	8001452 <__aeabi_ddiv+0x176>
 800176c:	0003      	movs	r3, r0
 800176e:	4652      	mov	r2, sl
 8001770:	3b28      	subs	r3, #40	; 0x28
 8001772:	409a      	lsls	r2, r3
 8001774:	4693      	mov	fp, r2
 8001776:	2200      	movs	r2, #0
 8001778:	e6b4      	b.n	80014e4 <__aeabi_ddiv+0x208>
 800177a:	4650      	mov	r0, sl
 800177c:	f001 f8ea 	bl	8002954 <__clzsi2>
 8001780:	3020      	adds	r0, #32
 8001782:	e69a      	b.n	80014ba <__aeabi_ddiv+0x1de>
 8001784:	42a6      	cmp	r6, r4
 8001786:	d1e2      	bne.n	800174e <__aeabi_ddiv+0x472>
 8001788:	45b8      	cmp	r8, r7
 800178a:	d9dc      	bls.n	8001746 <__aeabi_ddiv+0x46a>
 800178c:	1a34      	subs	r4, r6, r0
 800178e:	469b      	mov	fp, r3
 8001790:	e759      	b.n	8001646 <__aeabi_ddiv+0x36a>
 8001792:	2b1f      	cmp	r3, #31
 8001794:	dc65      	bgt.n	8001862 <__aeabi_ddiv+0x586>
 8001796:	4c50      	ldr	r4, [pc, #320]	; (80018d8 <__aeabi_ddiv+0x5fc>)
 8001798:	9900      	ldr	r1, [sp, #0]
 800179a:	46a4      	mov	ip, r4
 800179c:	465c      	mov	r4, fp
 800179e:	4461      	add	r1, ip
 80017a0:	0008      	movs	r0, r1
 80017a2:	408c      	lsls	r4, r1
 80017a4:	0011      	movs	r1, r2
 80017a6:	4082      	lsls	r2, r0
 80017a8:	40d9      	lsrs	r1, r3
 80017aa:	1e50      	subs	r0, r2, #1
 80017ac:	4182      	sbcs	r2, r0
 80017ae:	430c      	orrs	r4, r1
 80017b0:	4314      	orrs	r4, r2
 80017b2:	465a      	mov	r2, fp
 80017b4:	40da      	lsrs	r2, r3
 80017b6:	0013      	movs	r3, r2
 80017b8:	0762      	lsls	r2, r4, #29
 80017ba:	d009      	beq.n	80017d0 <__aeabi_ddiv+0x4f4>
 80017bc:	220f      	movs	r2, #15
 80017be:	4022      	ands	r2, r4
 80017c0:	2a04      	cmp	r2, #4
 80017c2:	d005      	beq.n	80017d0 <__aeabi_ddiv+0x4f4>
 80017c4:	0022      	movs	r2, r4
 80017c6:	1d14      	adds	r4, r2, #4
 80017c8:	4294      	cmp	r4, r2
 80017ca:	4189      	sbcs	r1, r1
 80017cc:	4249      	negs	r1, r1
 80017ce:	185b      	adds	r3, r3, r1
 80017d0:	021a      	lsls	r2, r3, #8
 80017d2:	d562      	bpl.n	800189a <__aeabi_ddiv+0x5be>
 80017d4:	2201      	movs	r2, #1
 80017d6:	2300      	movs	r3, #0
 80017d8:	2700      	movs	r7, #0
 80017da:	e60d      	b.n	80013f8 <__aeabi_ddiv+0x11c>
 80017dc:	428a      	cmp	r2, r1
 80017de:	d800      	bhi.n	80017e2 <__aeabi_ddiv+0x506>
 80017e0:	e70a      	b.n	80015f8 <__aeabi_ddiv+0x31c>
 80017e2:	1e83      	subs	r3, r0, #2
 80017e4:	1989      	adds	r1, r1, r6
 80017e6:	e707      	b.n	80015f8 <__aeabi_ddiv+0x31c>
 80017e8:	230f      	movs	r3, #15
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d100      	bne.n	80017f2 <__aeabi_ddiv+0x516>
 80017f0:	e5e6      	b.n	80013c0 <__aeabi_ddiv+0xe4>
 80017f2:	1d17      	adds	r7, r2, #4
 80017f4:	4297      	cmp	r7, r2
 80017f6:	4192      	sbcs	r2, r2
 80017f8:	4253      	negs	r3, r2
 80017fa:	449b      	add	fp, r3
 80017fc:	08fa      	lsrs	r2, r7, #3
 80017fe:	e5e0      	b.n	80013c2 <__aeabi_ddiv+0xe6>
 8001800:	2800      	cmp	r0, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_ddiv+0x52a>
 8001804:	e5d7      	b.n	80013b6 <__aeabi_ddiv+0xda>
 8001806:	1871      	adds	r1, r6, r1
 8001808:	1e53      	subs	r3, r2, #1
 800180a:	42b1      	cmp	r1, r6
 800180c:	d327      	bcc.n	800185e <__aeabi_ddiv+0x582>
 800180e:	42a9      	cmp	r1, r5
 8001810:	d315      	bcc.n	800183e <__aeabi_ddiv+0x562>
 8001812:	d058      	beq.n	80018c6 <__aeabi_ddiv+0x5ea>
 8001814:	001a      	movs	r2, r3
 8001816:	e773      	b.n	8001700 <__aeabi_ddiv+0x424>
 8001818:	2b00      	cmp	r3, #0
 800181a:	dc00      	bgt.n	800181e <__aeabi_ddiv+0x542>
 800181c:	e604      	b.n	8001428 <__aeabi_ddiv+0x14c>
 800181e:	2301      	movs	r3, #1
 8001820:	2200      	movs	r2, #0
 8001822:	449b      	add	fp, r3
 8001824:	e5cd      	b.n	80013c2 <__aeabi_ddiv+0xe6>
 8001826:	2302      	movs	r3, #2
 8001828:	4447      	add	r7, r8
 800182a:	4547      	cmp	r7, r8
 800182c:	4189      	sbcs	r1, r1
 800182e:	425b      	negs	r3, r3
 8001830:	469c      	mov	ip, r3
 8001832:	4249      	negs	r1, r1
 8001834:	1989      	adds	r1, r1, r6
 8001836:	190c      	adds	r4, r1, r4
 8001838:	44e3      	add	fp, ip
 800183a:	1a24      	subs	r4, r4, r0
 800183c:	e703      	b.n	8001646 <__aeabi_ddiv+0x36a>
 800183e:	4643      	mov	r3, r8
 8001840:	005f      	lsls	r7, r3, #1
 8001842:	4547      	cmp	r7, r8
 8001844:	419b      	sbcs	r3, r3
 8001846:	46b8      	mov	r8, r7
 8001848:	425b      	negs	r3, r3
 800184a:	199e      	adds	r6, r3, r6
 800184c:	3a02      	subs	r2, #2
 800184e:	1989      	adds	r1, r1, r6
 8001850:	42a9      	cmp	r1, r5
 8001852:	d000      	beq.n	8001856 <__aeabi_ddiv+0x57a>
 8001854:	e754      	b.n	8001700 <__aeabi_ddiv+0x424>
 8001856:	4540      	cmp	r0, r8
 8001858:	d000      	beq.n	800185c <__aeabi_ddiv+0x580>
 800185a:	e751      	b.n	8001700 <__aeabi_ddiv+0x424>
 800185c:	e5ab      	b.n	80013b6 <__aeabi_ddiv+0xda>
 800185e:	001a      	movs	r2, r3
 8001860:	e7f6      	b.n	8001850 <__aeabi_ddiv+0x574>
 8001862:	211f      	movs	r1, #31
 8001864:	465f      	mov	r7, fp
 8001866:	4249      	negs	r1, r1
 8001868:	1b0c      	subs	r4, r1, r4
 800186a:	40e7      	lsrs	r7, r4
 800186c:	2b20      	cmp	r3, #32
 800186e:	d007      	beq.n	8001880 <__aeabi_ddiv+0x5a4>
 8001870:	491a      	ldr	r1, [pc, #104]	; (80018dc <__aeabi_ddiv+0x600>)
 8001872:	9b00      	ldr	r3, [sp, #0]
 8001874:	468c      	mov	ip, r1
 8001876:	4463      	add	r3, ip
 8001878:	0018      	movs	r0, r3
 800187a:	465b      	mov	r3, fp
 800187c:	4083      	lsls	r3, r0
 800187e:	431a      	orrs	r2, r3
 8001880:	1e50      	subs	r0, r2, #1
 8001882:	4182      	sbcs	r2, r0
 8001884:	433a      	orrs	r2, r7
 8001886:	2707      	movs	r7, #7
 8001888:	2300      	movs	r3, #0
 800188a:	4017      	ands	r7, r2
 800188c:	d009      	beq.n	80018a2 <__aeabi_ddiv+0x5c6>
 800188e:	210f      	movs	r1, #15
 8001890:	2300      	movs	r3, #0
 8001892:	4011      	ands	r1, r2
 8001894:	0014      	movs	r4, r2
 8001896:	2904      	cmp	r1, #4
 8001898:	d195      	bne.n	80017c6 <__aeabi_ddiv+0x4ea>
 800189a:	0022      	movs	r2, r4
 800189c:	075f      	lsls	r7, r3, #29
 800189e:	025b      	lsls	r3, r3, #9
 80018a0:	0b1b      	lsrs	r3, r3, #12
 80018a2:	08d2      	lsrs	r2, r2, #3
 80018a4:	4317      	orrs	r7, r2
 80018a6:	2200      	movs	r2, #0
 80018a8:	e5a6      	b.n	80013f8 <__aeabi_ddiv+0x11c>
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	4659      	mov	r1, fp
 80018ae:	031b      	lsls	r3, r3, #12
 80018b0:	430b      	orrs	r3, r1
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	0017      	movs	r7, r2
 80018b6:	0b1b      	lsrs	r3, r3, #12
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <__aeabi_ddiv+0x5f8>)
 80018ba:	e59d      	b.n	80013f8 <__aeabi_ddiv+0x11c>
 80018bc:	42bd      	cmp	r5, r7
 80018be:	d8b2      	bhi.n	8001826 <__aeabi_ddiv+0x54a>
 80018c0:	469b      	mov	fp, r3
 80018c2:	2400      	movs	r4, #0
 80018c4:	e6bf      	b.n	8001646 <__aeabi_ddiv+0x36a>
 80018c6:	4580      	cmp	r8, r0
 80018c8:	d3b9      	bcc.n	800183e <__aeabi_ddiv+0x562>
 80018ca:	001a      	movs	r2, r3
 80018cc:	e7c3      	b.n	8001856 <__aeabi_ddiv+0x57a>
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	000003ff 	.word	0x000003ff
 80018d4:	000007ff 	.word	0x000007ff
 80018d8:	0000041e 	.word	0x0000041e
 80018dc:	0000043e 	.word	0x0000043e

080018e0 <__eqdf2>:
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	464f      	mov	r7, r9
 80018e4:	4646      	mov	r6, r8
 80018e6:	46d6      	mov	lr, sl
 80018e8:	4684      	mov	ip, r0
 80018ea:	b5c0      	push	{r6, r7, lr}
 80018ec:	4680      	mov	r8, r0
 80018ee:	4e19      	ldr	r6, [pc, #100]	; (8001954 <__eqdf2+0x74>)
 80018f0:	0318      	lsls	r0, r3, #12
 80018f2:	030f      	lsls	r7, r1, #12
 80018f4:	004d      	lsls	r5, r1, #1
 80018f6:	0b00      	lsrs	r0, r0, #12
 80018f8:	005c      	lsls	r4, r3, #1
 80018fa:	4682      	mov	sl, r0
 80018fc:	0b3f      	lsrs	r7, r7, #12
 80018fe:	0d6d      	lsrs	r5, r5, #21
 8001900:	0fc9      	lsrs	r1, r1, #31
 8001902:	4691      	mov	r9, r2
 8001904:	0d64      	lsrs	r4, r4, #21
 8001906:	0fdb      	lsrs	r3, r3, #31
 8001908:	2001      	movs	r0, #1
 800190a:	42b5      	cmp	r5, r6
 800190c:	d00a      	beq.n	8001924 <__eqdf2+0x44>
 800190e:	42b4      	cmp	r4, r6
 8001910:	d003      	beq.n	800191a <__eqdf2+0x3a>
 8001912:	42a5      	cmp	r5, r4
 8001914:	d101      	bne.n	800191a <__eqdf2+0x3a>
 8001916:	4557      	cmp	r7, sl
 8001918:	d00c      	beq.n	8001934 <__eqdf2+0x54>
 800191a:	bc1c      	pop	{r2, r3, r4}
 800191c:	4690      	mov	r8, r2
 800191e:	4699      	mov	r9, r3
 8001920:	46a2      	mov	sl, r4
 8001922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001924:	4666      	mov	r6, ip
 8001926:	433e      	orrs	r6, r7
 8001928:	d1f7      	bne.n	800191a <__eqdf2+0x3a>
 800192a:	42ac      	cmp	r4, r5
 800192c:	d1f5      	bne.n	800191a <__eqdf2+0x3a>
 800192e:	4654      	mov	r4, sl
 8001930:	4314      	orrs	r4, r2
 8001932:	d1f2      	bne.n	800191a <__eqdf2+0x3a>
 8001934:	2001      	movs	r0, #1
 8001936:	45c8      	cmp	r8, r9
 8001938:	d1ef      	bne.n	800191a <__eqdf2+0x3a>
 800193a:	4299      	cmp	r1, r3
 800193c:	d007      	beq.n	800194e <__eqdf2+0x6e>
 800193e:	2d00      	cmp	r5, #0
 8001940:	d1eb      	bne.n	800191a <__eqdf2+0x3a>
 8001942:	4663      	mov	r3, ip
 8001944:	431f      	orrs	r7, r3
 8001946:	0038      	movs	r0, r7
 8001948:	1e47      	subs	r7, r0, #1
 800194a:	41b8      	sbcs	r0, r7
 800194c:	e7e5      	b.n	800191a <__eqdf2+0x3a>
 800194e:	2000      	movs	r0, #0
 8001950:	e7e3      	b.n	800191a <__eqdf2+0x3a>
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	000007ff 	.word	0x000007ff

08001958 <__gedf2>:
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	464f      	mov	r7, r9
 800195c:	4646      	mov	r6, r8
 800195e:	46d6      	mov	lr, sl
 8001960:	004d      	lsls	r5, r1, #1
 8001962:	b5c0      	push	{r6, r7, lr}
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	0fc9      	lsrs	r1, r1, #31
 8001968:	468a      	mov	sl, r1
 800196a:	492c      	ldr	r1, [pc, #176]	; (8001a1c <__gedf2+0xc4>)
 800196c:	031f      	lsls	r7, r3, #12
 800196e:	005c      	lsls	r4, r3, #1
 8001970:	4680      	mov	r8, r0
 8001972:	0b36      	lsrs	r6, r6, #12
 8001974:	0d6d      	lsrs	r5, r5, #21
 8001976:	4691      	mov	r9, r2
 8001978:	0b3f      	lsrs	r7, r7, #12
 800197a:	0d64      	lsrs	r4, r4, #21
 800197c:	0fdb      	lsrs	r3, r3, #31
 800197e:	428d      	cmp	r5, r1
 8001980:	d01e      	beq.n	80019c0 <__gedf2+0x68>
 8001982:	428c      	cmp	r4, r1
 8001984:	d016      	beq.n	80019b4 <__gedf2+0x5c>
 8001986:	2d00      	cmp	r5, #0
 8001988:	d11e      	bne.n	80019c8 <__gedf2+0x70>
 800198a:	4330      	orrs	r0, r6
 800198c:	4684      	mov	ip, r0
 800198e:	2c00      	cmp	r4, #0
 8001990:	d101      	bne.n	8001996 <__gedf2+0x3e>
 8001992:	433a      	orrs	r2, r7
 8001994:	d023      	beq.n	80019de <__gedf2+0x86>
 8001996:	4662      	mov	r2, ip
 8001998:	2a00      	cmp	r2, #0
 800199a:	d01a      	beq.n	80019d2 <__gedf2+0x7a>
 800199c:	459a      	cmp	sl, r3
 800199e:	d029      	beq.n	80019f4 <__gedf2+0x9c>
 80019a0:	4651      	mov	r1, sl
 80019a2:	2002      	movs	r0, #2
 80019a4:	3901      	subs	r1, #1
 80019a6:	4008      	ands	r0, r1
 80019a8:	3801      	subs	r0, #1
 80019aa:	bc1c      	pop	{r2, r3, r4}
 80019ac:	4690      	mov	r8, r2
 80019ae:	4699      	mov	r9, r3
 80019b0:	46a2      	mov	sl, r4
 80019b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b4:	0039      	movs	r1, r7
 80019b6:	4311      	orrs	r1, r2
 80019b8:	d0e5      	beq.n	8001986 <__gedf2+0x2e>
 80019ba:	2002      	movs	r0, #2
 80019bc:	4240      	negs	r0, r0
 80019be:	e7f4      	b.n	80019aa <__gedf2+0x52>
 80019c0:	4330      	orrs	r0, r6
 80019c2:	d1fa      	bne.n	80019ba <__gedf2+0x62>
 80019c4:	42ac      	cmp	r4, r5
 80019c6:	d00f      	beq.n	80019e8 <__gedf2+0x90>
 80019c8:	2c00      	cmp	r4, #0
 80019ca:	d10f      	bne.n	80019ec <__gedf2+0x94>
 80019cc:	433a      	orrs	r2, r7
 80019ce:	d0e7      	beq.n	80019a0 <__gedf2+0x48>
 80019d0:	e00c      	b.n	80019ec <__gedf2+0x94>
 80019d2:	2201      	movs	r2, #1
 80019d4:	3b01      	subs	r3, #1
 80019d6:	4393      	bics	r3, r2
 80019d8:	0018      	movs	r0, r3
 80019da:	3001      	adds	r0, #1
 80019dc:	e7e5      	b.n	80019aa <__gedf2+0x52>
 80019de:	4663      	mov	r3, ip
 80019e0:	2000      	movs	r0, #0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0e1      	beq.n	80019aa <__gedf2+0x52>
 80019e6:	e7db      	b.n	80019a0 <__gedf2+0x48>
 80019e8:	433a      	orrs	r2, r7
 80019ea:	d1e6      	bne.n	80019ba <__gedf2+0x62>
 80019ec:	459a      	cmp	sl, r3
 80019ee:	d1d7      	bne.n	80019a0 <__gedf2+0x48>
 80019f0:	42a5      	cmp	r5, r4
 80019f2:	dcd5      	bgt.n	80019a0 <__gedf2+0x48>
 80019f4:	42a5      	cmp	r5, r4
 80019f6:	db05      	blt.n	8001a04 <__gedf2+0xac>
 80019f8:	42be      	cmp	r6, r7
 80019fa:	d8d1      	bhi.n	80019a0 <__gedf2+0x48>
 80019fc:	d008      	beq.n	8001a10 <__gedf2+0xb8>
 80019fe:	2000      	movs	r0, #0
 8001a00:	42be      	cmp	r6, r7
 8001a02:	d2d2      	bcs.n	80019aa <__gedf2+0x52>
 8001a04:	4650      	mov	r0, sl
 8001a06:	2301      	movs	r3, #1
 8001a08:	3801      	subs	r0, #1
 8001a0a:	4398      	bics	r0, r3
 8001a0c:	3001      	adds	r0, #1
 8001a0e:	e7cc      	b.n	80019aa <__gedf2+0x52>
 8001a10:	45c8      	cmp	r8, r9
 8001a12:	d8c5      	bhi.n	80019a0 <__gedf2+0x48>
 8001a14:	2000      	movs	r0, #0
 8001a16:	45c8      	cmp	r8, r9
 8001a18:	d3f4      	bcc.n	8001a04 <__gedf2+0xac>
 8001a1a:	e7c6      	b.n	80019aa <__gedf2+0x52>
 8001a1c:	000007ff 	.word	0x000007ff

08001a20 <__ledf2>:
 8001a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a22:	464f      	mov	r7, r9
 8001a24:	4646      	mov	r6, r8
 8001a26:	46d6      	mov	lr, sl
 8001a28:	004d      	lsls	r5, r1, #1
 8001a2a:	b5c0      	push	{r6, r7, lr}
 8001a2c:	030e      	lsls	r6, r1, #12
 8001a2e:	0fc9      	lsrs	r1, r1, #31
 8001a30:	468a      	mov	sl, r1
 8001a32:	492e      	ldr	r1, [pc, #184]	; (8001aec <__ledf2+0xcc>)
 8001a34:	031f      	lsls	r7, r3, #12
 8001a36:	005c      	lsls	r4, r3, #1
 8001a38:	4680      	mov	r8, r0
 8001a3a:	0b36      	lsrs	r6, r6, #12
 8001a3c:	0d6d      	lsrs	r5, r5, #21
 8001a3e:	4691      	mov	r9, r2
 8001a40:	0b3f      	lsrs	r7, r7, #12
 8001a42:	0d64      	lsrs	r4, r4, #21
 8001a44:	0fdb      	lsrs	r3, r3, #31
 8001a46:	428d      	cmp	r5, r1
 8001a48:	d018      	beq.n	8001a7c <__ledf2+0x5c>
 8001a4a:	428c      	cmp	r4, r1
 8001a4c:	d011      	beq.n	8001a72 <__ledf2+0x52>
 8001a4e:	2d00      	cmp	r5, #0
 8001a50:	d118      	bne.n	8001a84 <__ledf2+0x64>
 8001a52:	4330      	orrs	r0, r6
 8001a54:	4684      	mov	ip, r0
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d11e      	bne.n	8001a98 <__ledf2+0x78>
 8001a5a:	433a      	orrs	r2, r7
 8001a5c:	d11c      	bne.n	8001a98 <__ledf2+0x78>
 8001a5e:	4663      	mov	r3, ip
 8001a60:	2000      	movs	r0, #0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d030      	beq.n	8001ac8 <__ledf2+0xa8>
 8001a66:	4651      	mov	r1, sl
 8001a68:	2002      	movs	r0, #2
 8001a6a:	3901      	subs	r1, #1
 8001a6c:	4008      	ands	r0, r1
 8001a6e:	3801      	subs	r0, #1
 8001a70:	e02a      	b.n	8001ac8 <__ledf2+0xa8>
 8001a72:	0039      	movs	r1, r7
 8001a74:	4311      	orrs	r1, r2
 8001a76:	d0ea      	beq.n	8001a4e <__ledf2+0x2e>
 8001a78:	2002      	movs	r0, #2
 8001a7a:	e025      	b.n	8001ac8 <__ledf2+0xa8>
 8001a7c:	4330      	orrs	r0, r6
 8001a7e:	d1fb      	bne.n	8001a78 <__ledf2+0x58>
 8001a80:	42ac      	cmp	r4, r5
 8001a82:	d026      	beq.n	8001ad2 <__ledf2+0xb2>
 8001a84:	2c00      	cmp	r4, #0
 8001a86:	d126      	bne.n	8001ad6 <__ledf2+0xb6>
 8001a88:	433a      	orrs	r2, r7
 8001a8a:	d124      	bne.n	8001ad6 <__ledf2+0xb6>
 8001a8c:	4651      	mov	r1, sl
 8001a8e:	2002      	movs	r0, #2
 8001a90:	3901      	subs	r1, #1
 8001a92:	4008      	ands	r0, r1
 8001a94:	3801      	subs	r0, #1
 8001a96:	e017      	b.n	8001ac8 <__ledf2+0xa8>
 8001a98:	4662      	mov	r2, ip
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	d00f      	beq.n	8001abe <__ledf2+0x9e>
 8001a9e:	459a      	cmp	sl, r3
 8001aa0:	d1e1      	bne.n	8001a66 <__ledf2+0x46>
 8001aa2:	42a5      	cmp	r5, r4
 8001aa4:	db05      	blt.n	8001ab2 <__ledf2+0x92>
 8001aa6:	42be      	cmp	r6, r7
 8001aa8:	d8dd      	bhi.n	8001a66 <__ledf2+0x46>
 8001aaa:	d019      	beq.n	8001ae0 <__ledf2+0xc0>
 8001aac:	2000      	movs	r0, #0
 8001aae:	42be      	cmp	r6, r7
 8001ab0:	d20a      	bcs.n	8001ac8 <__ledf2+0xa8>
 8001ab2:	4650      	mov	r0, sl
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	3801      	subs	r0, #1
 8001ab8:	4398      	bics	r0, r3
 8001aba:	3001      	adds	r0, #1
 8001abc:	e004      	b.n	8001ac8 <__ledf2+0xa8>
 8001abe:	2201      	movs	r2, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	4393      	bics	r3, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	3001      	adds	r0, #1
 8001ac8:	bc1c      	pop	{r2, r3, r4}
 8001aca:	4690      	mov	r8, r2
 8001acc:	4699      	mov	r9, r3
 8001ace:	46a2      	mov	sl, r4
 8001ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad2:	433a      	orrs	r2, r7
 8001ad4:	d1d0      	bne.n	8001a78 <__ledf2+0x58>
 8001ad6:	459a      	cmp	sl, r3
 8001ad8:	d1c5      	bne.n	8001a66 <__ledf2+0x46>
 8001ada:	42a5      	cmp	r5, r4
 8001adc:	dcc3      	bgt.n	8001a66 <__ledf2+0x46>
 8001ade:	e7e0      	b.n	8001aa2 <__ledf2+0x82>
 8001ae0:	45c8      	cmp	r8, r9
 8001ae2:	d8c0      	bhi.n	8001a66 <__ledf2+0x46>
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	45c8      	cmp	r8, r9
 8001ae8:	d3e3      	bcc.n	8001ab2 <__ledf2+0x92>
 8001aea:	e7ed      	b.n	8001ac8 <__ledf2+0xa8>
 8001aec:	000007ff 	.word	0x000007ff

08001af0 <__aeabi_dmul>:
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	4657      	mov	r7, sl
 8001af4:	46de      	mov	lr, fp
 8001af6:	464e      	mov	r6, r9
 8001af8:	4645      	mov	r5, r8
 8001afa:	b5e0      	push	{r5, r6, r7, lr}
 8001afc:	4683      	mov	fp, r0
 8001afe:	0006      	movs	r6, r0
 8001b00:	030f      	lsls	r7, r1, #12
 8001b02:	0048      	lsls	r0, r1, #1
 8001b04:	b087      	sub	sp, #28
 8001b06:	4692      	mov	sl, r2
 8001b08:	001d      	movs	r5, r3
 8001b0a:	0b3f      	lsrs	r7, r7, #12
 8001b0c:	0d40      	lsrs	r0, r0, #21
 8001b0e:	0fcc      	lsrs	r4, r1, #31
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dmul+0x26>
 8001b14:	e06f      	b.n	8001bf6 <__aeabi_dmul+0x106>
 8001b16:	4bde      	ldr	r3, [pc, #888]	; (8001e90 <__aeabi_dmul+0x3a0>)
 8001b18:	4298      	cmp	r0, r3
 8001b1a:	d038      	beq.n	8001b8e <__aeabi_dmul+0x9e>
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	00ff      	lsls	r7, r7, #3
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	431f      	orrs	r7, r3
 8001b24:	0f73      	lsrs	r3, r6, #29
 8001b26:	433b      	orrs	r3, r7
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	4bda      	ldr	r3, [pc, #872]	; (8001e94 <__aeabi_dmul+0x3a4>)
 8001b2c:	2700      	movs	r7, #0
 8001b2e:	4699      	mov	r9, r3
 8001b30:	2300      	movs	r3, #0
 8001b32:	469b      	mov	fp, r3
 8001b34:	00f6      	lsls	r6, r6, #3
 8001b36:	4481      	add	r9, r0
 8001b38:	032b      	lsls	r3, r5, #12
 8001b3a:	0069      	lsls	r1, r5, #1
 8001b3c:	0b1b      	lsrs	r3, r3, #12
 8001b3e:	4652      	mov	r2, sl
 8001b40:	4698      	mov	r8, r3
 8001b42:	0d49      	lsrs	r1, r1, #21
 8001b44:	0fed      	lsrs	r5, r5, #31
 8001b46:	2900      	cmp	r1, #0
 8001b48:	d100      	bne.n	8001b4c <__aeabi_dmul+0x5c>
 8001b4a:	e085      	b.n	8001c58 <__aeabi_dmul+0x168>
 8001b4c:	4bd0      	ldr	r3, [pc, #832]	; (8001e90 <__aeabi_dmul+0x3a0>)
 8001b4e:	4299      	cmp	r1, r3
 8001b50:	d100      	bne.n	8001b54 <__aeabi_dmul+0x64>
 8001b52:	e073      	b.n	8001c3c <__aeabi_dmul+0x14c>
 8001b54:	4643      	mov	r3, r8
 8001b56:	00da      	lsls	r2, r3, #3
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	4652      	mov	r2, sl
 8001b60:	48cc      	ldr	r0, [pc, #816]	; (8001e94 <__aeabi_dmul+0x3a4>)
 8001b62:	0f52      	lsrs	r2, r2, #29
 8001b64:	4684      	mov	ip, r0
 8001b66:	4313      	orrs	r3, r2
 8001b68:	4652      	mov	r2, sl
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	4461      	add	r1, ip
 8001b6e:	00d2      	lsls	r2, r2, #3
 8001b70:	4489      	add	r9, r1
 8001b72:	0021      	movs	r1, r4
 8001b74:	4069      	eors	r1, r5
 8001b76:	9100      	str	r1, [sp, #0]
 8001b78:	468c      	mov	ip, r1
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4449      	add	r1, r9
 8001b7e:	468a      	mov	sl, r1
 8001b80:	2f0f      	cmp	r7, #15
 8001b82:	d900      	bls.n	8001b86 <__aeabi_dmul+0x96>
 8001b84:	e090      	b.n	8001ca8 <__aeabi_dmul+0x1b8>
 8001b86:	49c4      	ldr	r1, [pc, #784]	; (8001e98 <__aeabi_dmul+0x3a8>)
 8001b88:	00bf      	lsls	r7, r7, #2
 8001b8a:	59cf      	ldr	r7, [r1, r7]
 8001b8c:	46bf      	mov	pc, r7
 8001b8e:	465b      	mov	r3, fp
 8001b90:	433b      	orrs	r3, r7
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	d000      	beq.n	8001b98 <__aeabi_dmul+0xa8>
 8001b96:	e16a      	b.n	8001e6e <__aeabi_dmul+0x37e>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	2708      	movs	r7, #8
 8001b9c:	2600      	movs	r6, #0
 8001b9e:	4681      	mov	r9, r0
 8001ba0:	469b      	mov	fp, r3
 8001ba2:	e7c9      	b.n	8001b38 <__aeabi_dmul+0x48>
 8001ba4:	0032      	movs	r2, r6
 8001ba6:	4658      	mov	r0, fp
 8001ba8:	9b01      	ldr	r3, [sp, #4]
 8001baa:	4661      	mov	r1, ip
 8001bac:	9100      	str	r1, [sp, #0]
 8001bae:	2802      	cmp	r0, #2
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dmul+0xc4>
 8001bb2:	e075      	b.n	8001ca0 <__aeabi_dmul+0x1b0>
 8001bb4:	2803      	cmp	r0, #3
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dmul+0xca>
 8001bb8:	e1fe      	b.n	8001fb8 <__aeabi_dmul+0x4c8>
 8001bba:	2801      	cmp	r0, #1
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dmul+0xd0>
 8001bbe:	e12c      	b.n	8001e1a <__aeabi_dmul+0x32a>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2700      	movs	r7, #0
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	2500      	movs	r5, #0
 8001bc8:	033f      	lsls	r7, r7, #12
 8001bca:	0d2a      	lsrs	r2, r5, #20
 8001bcc:	0b3f      	lsrs	r7, r7, #12
 8001bce:	48b3      	ldr	r0, [pc, #716]	; (8001e9c <__aeabi_dmul+0x3ac>)
 8001bd0:	0512      	lsls	r2, r2, #20
 8001bd2:	433a      	orrs	r2, r7
 8001bd4:	4002      	ands	r2, r0
 8001bd6:	051b      	lsls	r3, r3, #20
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	9a00      	ldr	r2, [sp, #0]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	07d1      	lsls	r1, r2, #31
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	430b      	orrs	r3, r1
 8001be4:	0030      	movs	r0, r6
 8001be6:	0019      	movs	r1, r3
 8001be8:	b007      	add	sp, #28
 8001bea:	bc3c      	pop	{r2, r3, r4, r5}
 8001bec:	4690      	mov	r8, r2
 8001bee:	4699      	mov	r9, r3
 8001bf0:	46a2      	mov	sl, r4
 8001bf2:	46ab      	mov	fp, r5
 8001bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf6:	465b      	mov	r3, fp
 8001bf8:	433b      	orrs	r3, r7
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dmul+0x110>
 8001bfe:	e12f      	b.n	8001e60 <__aeabi_dmul+0x370>
 8001c00:	2f00      	cmp	r7, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dmul+0x116>
 8001c04:	e1a5      	b.n	8001f52 <__aeabi_dmul+0x462>
 8001c06:	0038      	movs	r0, r7
 8001c08:	f000 fea4 	bl	8002954 <__clzsi2>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	3b0b      	subs	r3, #11
 8001c10:	2b1c      	cmp	r3, #28
 8001c12:	dd00      	ble.n	8001c16 <__aeabi_dmul+0x126>
 8001c14:	e196      	b.n	8001f44 <__aeabi_dmul+0x454>
 8001c16:	221d      	movs	r2, #29
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	465a      	mov	r2, fp
 8001c1c:	0001      	movs	r1, r0
 8001c1e:	40da      	lsrs	r2, r3
 8001c20:	465e      	mov	r6, fp
 8001c22:	3908      	subs	r1, #8
 8001c24:	408f      	lsls	r7, r1
 8001c26:	0013      	movs	r3, r2
 8001c28:	408e      	lsls	r6, r1
 8001c2a:	433b      	orrs	r3, r7
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	4b9c      	ldr	r3, [pc, #624]	; (8001ea0 <__aeabi_dmul+0x3b0>)
 8001c30:	2700      	movs	r7, #0
 8001c32:	1a1b      	subs	r3, r3, r0
 8001c34:	4699      	mov	r9, r3
 8001c36:	2300      	movs	r3, #0
 8001c38:	469b      	mov	fp, r3
 8001c3a:	e77d      	b.n	8001b38 <__aeabi_dmul+0x48>
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	4653      	mov	r3, sl
 8001c40:	430b      	orrs	r3, r1
 8001c42:	4993      	ldr	r1, [pc, #588]	; (8001e90 <__aeabi_dmul+0x3a0>)
 8001c44:	468c      	mov	ip, r1
 8001c46:	44e1      	add	r9, ip
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_dmul+0x15e>
 8001c4c:	e11a      	b.n	8001e84 <__aeabi_dmul+0x394>
 8001c4e:	2202      	movs	r2, #2
 8001c50:	2002      	movs	r0, #2
 8001c52:	4317      	orrs	r7, r2
 8001c54:	2200      	movs	r2, #0
 8001c56:	e78c      	b.n	8001b72 <__aeabi_dmul+0x82>
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dmul+0x16e>
 8001c5c:	e10d      	b.n	8001e7a <__aeabi_dmul+0x38a>
 8001c5e:	4643      	mov	r3, r8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dmul+0x176>
 8001c64:	e181      	b.n	8001f6a <__aeabi_dmul+0x47a>
 8001c66:	4640      	mov	r0, r8
 8001c68:	f000 fe74 	bl	8002954 <__clzsi2>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	3a0b      	subs	r2, #11
 8001c70:	2a1c      	cmp	r2, #28
 8001c72:	dd00      	ble.n	8001c76 <__aeabi_dmul+0x186>
 8001c74:	e172      	b.n	8001f5c <__aeabi_dmul+0x46c>
 8001c76:	0001      	movs	r1, r0
 8001c78:	4643      	mov	r3, r8
 8001c7a:	3908      	subs	r1, #8
 8001c7c:	408b      	lsls	r3, r1
 8001c7e:	4698      	mov	r8, r3
 8001c80:	231d      	movs	r3, #29
 8001c82:	1a9a      	subs	r2, r3, r2
 8001c84:	4653      	mov	r3, sl
 8001c86:	40d3      	lsrs	r3, r2
 8001c88:	001a      	movs	r2, r3
 8001c8a:	4643      	mov	r3, r8
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	4652      	mov	r2, sl
 8001c90:	408a      	lsls	r2, r1
 8001c92:	4649      	mov	r1, r9
 8001c94:	1a08      	subs	r0, r1, r0
 8001c96:	4982      	ldr	r1, [pc, #520]	; (8001ea0 <__aeabi_dmul+0x3b0>)
 8001c98:	4689      	mov	r9, r1
 8001c9a:	4481      	add	r9, r0
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	e768      	b.n	8001b72 <__aeabi_dmul+0x82>
 8001ca0:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <__aeabi_dmul+0x3a0>)
 8001ca2:	2700      	movs	r7, #0
 8001ca4:	2600      	movs	r6, #0
 8001ca6:	e78e      	b.n	8001bc6 <__aeabi_dmul+0xd6>
 8001ca8:	0c14      	lsrs	r4, r2, #16
 8001caa:	0412      	lsls	r2, r2, #16
 8001cac:	0c12      	lsrs	r2, r2, #16
 8001cae:	0011      	movs	r1, r2
 8001cb0:	0c37      	lsrs	r7, r6, #16
 8001cb2:	0436      	lsls	r6, r6, #16
 8001cb4:	0c35      	lsrs	r5, r6, #16
 8001cb6:	4379      	muls	r1, r7
 8001cb8:	0028      	movs	r0, r5
 8001cba:	468c      	mov	ip, r1
 8001cbc:	002e      	movs	r6, r5
 8001cbe:	4360      	muls	r0, r4
 8001cc0:	4460      	add	r0, ip
 8001cc2:	4683      	mov	fp, r0
 8001cc4:	4356      	muls	r6, r2
 8001cc6:	0021      	movs	r1, r4
 8001cc8:	0c30      	lsrs	r0, r6, #16
 8001cca:	4680      	mov	r8, r0
 8001ccc:	4658      	mov	r0, fp
 8001cce:	4379      	muls	r1, r7
 8001cd0:	4440      	add	r0, r8
 8001cd2:	9102      	str	r1, [sp, #8]
 8001cd4:	4584      	cmp	ip, r0
 8001cd6:	d906      	bls.n	8001ce6 <__aeabi_dmul+0x1f6>
 8001cd8:	4688      	mov	r8, r1
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	0249      	lsls	r1, r1, #9
 8001cde:	468c      	mov	ip, r1
 8001ce0:	44e0      	add	r8, ip
 8001ce2:	4641      	mov	r1, r8
 8001ce4:	9102      	str	r1, [sp, #8]
 8001ce6:	0436      	lsls	r6, r6, #16
 8001ce8:	0c01      	lsrs	r1, r0, #16
 8001cea:	0c36      	lsrs	r6, r6, #16
 8001cec:	0400      	lsls	r0, r0, #16
 8001cee:	468b      	mov	fp, r1
 8001cf0:	1981      	adds	r1, r0, r6
 8001cf2:	0c1e      	lsrs	r6, r3, #16
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	9103      	str	r1, [sp, #12]
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	4379      	muls	r1, r7
 8001cfe:	468c      	mov	ip, r1
 8001d00:	0028      	movs	r0, r5
 8001d02:	4375      	muls	r5, r6
 8001d04:	4465      	add	r5, ip
 8001d06:	46a8      	mov	r8, r5
 8001d08:	4358      	muls	r0, r3
 8001d0a:	0c05      	lsrs	r5, r0, #16
 8001d0c:	4445      	add	r5, r8
 8001d0e:	4377      	muls	r7, r6
 8001d10:	42a9      	cmp	r1, r5
 8001d12:	d903      	bls.n	8001d1c <__aeabi_dmul+0x22c>
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	0249      	lsls	r1, r1, #9
 8001d18:	468c      	mov	ip, r1
 8001d1a:	4467      	add	r7, ip
 8001d1c:	0c29      	lsrs	r1, r5, #16
 8001d1e:	468c      	mov	ip, r1
 8001d20:	0039      	movs	r1, r7
 8001d22:	0400      	lsls	r0, r0, #16
 8001d24:	0c00      	lsrs	r0, r0, #16
 8001d26:	042d      	lsls	r5, r5, #16
 8001d28:	182d      	adds	r5, r5, r0
 8001d2a:	4461      	add	r1, ip
 8001d2c:	44ab      	add	fp, r5
 8001d2e:	9105      	str	r1, [sp, #20]
 8001d30:	4659      	mov	r1, fp
 8001d32:	9104      	str	r1, [sp, #16]
 8001d34:	9901      	ldr	r1, [sp, #4]
 8001d36:	040f      	lsls	r7, r1, #16
 8001d38:	0c3f      	lsrs	r7, r7, #16
 8001d3a:	0c08      	lsrs	r0, r1, #16
 8001d3c:	0039      	movs	r1, r7
 8001d3e:	4351      	muls	r1, r2
 8001d40:	4342      	muls	r2, r0
 8001d42:	4690      	mov	r8, r2
 8001d44:	0002      	movs	r2, r0
 8001d46:	468c      	mov	ip, r1
 8001d48:	0c09      	lsrs	r1, r1, #16
 8001d4a:	468b      	mov	fp, r1
 8001d4c:	4362      	muls	r2, r4
 8001d4e:	437c      	muls	r4, r7
 8001d50:	4444      	add	r4, r8
 8001d52:	445c      	add	r4, fp
 8001d54:	45a0      	cmp	r8, r4
 8001d56:	d903      	bls.n	8001d60 <__aeabi_dmul+0x270>
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	0249      	lsls	r1, r1, #9
 8001d5c:	4688      	mov	r8, r1
 8001d5e:	4442      	add	r2, r8
 8001d60:	0c21      	lsrs	r1, r4, #16
 8001d62:	4688      	mov	r8, r1
 8001d64:	4661      	mov	r1, ip
 8001d66:	0409      	lsls	r1, r1, #16
 8001d68:	0c09      	lsrs	r1, r1, #16
 8001d6a:	468c      	mov	ip, r1
 8001d6c:	0039      	movs	r1, r7
 8001d6e:	4359      	muls	r1, r3
 8001d70:	4343      	muls	r3, r0
 8001d72:	4370      	muls	r0, r6
 8001d74:	437e      	muls	r6, r7
 8001d76:	0c0f      	lsrs	r7, r1, #16
 8001d78:	18f6      	adds	r6, r6, r3
 8001d7a:	0424      	lsls	r4, r4, #16
 8001d7c:	19be      	adds	r6, r7, r6
 8001d7e:	4464      	add	r4, ip
 8001d80:	4442      	add	r2, r8
 8001d82:	468c      	mov	ip, r1
 8001d84:	42b3      	cmp	r3, r6
 8001d86:	d903      	bls.n	8001d90 <__aeabi_dmul+0x2a0>
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	025b      	lsls	r3, r3, #9
 8001d8c:	4698      	mov	r8, r3
 8001d8e:	4440      	add	r0, r8
 8001d90:	9b02      	ldr	r3, [sp, #8]
 8001d92:	4661      	mov	r1, ip
 8001d94:	4698      	mov	r8, r3
 8001d96:	9b04      	ldr	r3, [sp, #16]
 8001d98:	0437      	lsls	r7, r6, #16
 8001d9a:	4443      	add	r3, r8
 8001d9c:	469b      	mov	fp, r3
 8001d9e:	45ab      	cmp	fp, r5
 8001da0:	41ad      	sbcs	r5, r5
 8001da2:	426b      	negs	r3, r5
 8001da4:	040d      	lsls	r5, r1, #16
 8001da6:	9905      	ldr	r1, [sp, #20]
 8001da8:	0c2d      	lsrs	r5, r5, #16
 8001daa:	468c      	mov	ip, r1
 8001dac:	197f      	adds	r7, r7, r5
 8001dae:	4467      	add	r7, ip
 8001db0:	18fd      	adds	r5, r7, r3
 8001db2:	46a8      	mov	r8, r5
 8001db4:	465d      	mov	r5, fp
 8001db6:	192d      	adds	r5, r5, r4
 8001db8:	42a5      	cmp	r5, r4
 8001dba:	41a4      	sbcs	r4, r4
 8001dbc:	4693      	mov	fp, r2
 8001dbe:	4264      	negs	r4, r4
 8001dc0:	46a4      	mov	ip, r4
 8001dc2:	44c3      	add	fp, r8
 8001dc4:	44dc      	add	ip, fp
 8001dc6:	428f      	cmp	r7, r1
 8001dc8:	41bf      	sbcs	r7, r7
 8001dca:	4598      	cmp	r8, r3
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	4593      	cmp	fp, r2
 8001dd0:	4192      	sbcs	r2, r2
 8001dd2:	45a4      	cmp	ip, r4
 8001dd4:	41a4      	sbcs	r4, r4
 8001dd6:	425b      	negs	r3, r3
 8001dd8:	427f      	negs	r7, r7
 8001dda:	431f      	orrs	r7, r3
 8001ddc:	0c36      	lsrs	r6, r6, #16
 8001dde:	4252      	negs	r2, r2
 8001de0:	4264      	negs	r4, r4
 8001de2:	19bf      	adds	r7, r7, r6
 8001de4:	4322      	orrs	r2, r4
 8001de6:	18bf      	adds	r7, r7, r2
 8001de8:	4662      	mov	r2, ip
 8001dea:	1838      	adds	r0, r7, r0
 8001dec:	0243      	lsls	r3, r0, #9
 8001dee:	0dd2      	lsrs	r2, r2, #23
 8001df0:	9903      	ldr	r1, [sp, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	026a      	lsls	r2, r5, #9
 8001df6:	430a      	orrs	r2, r1
 8001df8:	1e50      	subs	r0, r2, #1
 8001dfa:	4182      	sbcs	r2, r0
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	0ded      	lsrs	r5, r5, #23
 8001e00:	432a      	orrs	r2, r5
 8001e02:	024e      	lsls	r6, r1, #9
 8001e04:	4332      	orrs	r2, r6
 8001e06:	01d9      	lsls	r1, r3, #7
 8001e08:	d400      	bmi.n	8001e0c <__aeabi_dmul+0x31c>
 8001e0a:	e0b3      	b.n	8001f74 <__aeabi_dmul+0x484>
 8001e0c:	2601      	movs	r6, #1
 8001e0e:	0850      	lsrs	r0, r2, #1
 8001e10:	4032      	ands	r2, r6
 8001e12:	4302      	orrs	r2, r0
 8001e14:	07de      	lsls	r6, r3, #31
 8001e16:	4332      	orrs	r2, r6
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	4c22      	ldr	r4, [pc, #136]	; (8001ea4 <__aeabi_dmul+0x3b4>)
 8001e1c:	4454      	add	r4, sl
 8001e1e:	2c00      	cmp	r4, #0
 8001e20:	dd62      	ble.n	8001ee8 <__aeabi_dmul+0x3f8>
 8001e22:	0751      	lsls	r1, r2, #29
 8001e24:	d009      	beq.n	8001e3a <__aeabi_dmul+0x34a>
 8001e26:	200f      	movs	r0, #15
 8001e28:	4010      	ands	r0, r2
 8001e2a:	2804      	cmp	r0, #4
 8001e2c:	d005      	beq.n	8001e3a <__aeabi_dmul+0x34a>
 8001e2e:	1d10      	adds	r0, r2, #4
 8001e30:	4290      	cmp	r0, r2
 8001e32:	4192      	sbcs	r2, r2
 8001e34:	4252      	negs	r2, r2
 8001e36:	189b      	adds	r3, r3, r2
 8001e38:	0002      	movs	r2, r0
 8001e3a:	01d9      	lsls	r1, r3, #7
 8001e3c:	d504      	bpl.n	8001e48 <__aeabi_dmul+0x358>
 8001e3e:	2480      	movs	r4, #128	; 0x80
 8001e40:	4819      	ldr	r0, [pc, #100]	; (8001ea8 <__aeabi_dmul+0x3b8>)
 8001e42:	00e4      	lsls	r4, r4, #3
 8001e44:	4003      	ands	r3, r0
 8001e46:	4454      	add	r4, sl
 8001e48:	4818      	ldr	r0, [pc, #96]	; (8001eac <__aeabi_dmul+0x3bc>)
 8001e4a:	4284      	cmp	r4, r0
 8001e4c:	dd00      	ble.n	8001e50 <__aeabi_dmul+0x360>
 8001e4e:	e727      	b.n	8001ca0 <__aeabi_dmul+0x1b0>
 8001e50:	075e      	lsls	r6, r3, #29
 8001e52:	025b      	lsls	r3, r3, #9
 8001e54:	08d2      	lsrs	r2, r2, #3
 8001e56:	0b1f      	lsrs	r7, r3, #12
 8001e58:	0563      	lsls	r3, r4, #21
 8001e5a:	4316      	orrs	r6, r2
 8001e5c:	0d5b      	lsrs	r3, r3, #21
 8001e5e:	e6b2      	b.n	8001bc6 <__aeabi_dmul+0xd6>
 8001e60:	2300      	movs	r3, #0
 8001e62:	4699      	mov	r9, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	2704      	movs	r7, #4
 8001e68:	2600      	movs	r6, #0
 8001e6a:	469b      	mov	fp, r3
 8001e6c:	e664      	b.n	8001b38 <__aeabi_dmul+0x48>
 8001e6e:	2303      	movs	r3, #3
 8001e70:	9701      	str	r7, [sp, #4]
 8001e72:	4681      	mov	r9, r0
 8001e74:	270c      	movs	r7, #12
 8001e76:	469b      	mov	fp, r3
 8001e78:	e65e      	b.n	8001b38 <__aeabi_dmul+0x48>
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	4317      	orrs	r7, r2
 8001e80:	2200      	movs	r2, #0
 8001e82:	e676      	b.n	8001b72 <__aeabi_dmul+0x82>
 8001e84:	2303      	movs	r3, #3
 8001e86:	2003      	movs	r0, #3
 8001e88:	431f      	orrs	r7, r3
 8001e8a:	4643      	mov	r3, r8
 8001e8c:	e671      	b.n	8001b72 <__aeabi_dmul+0x82>
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	000007ff 	.word	0x000007ff
 8001e94:	fffffc01 	.word	0xfffffc01
 8001e98:	080099b0 	.word	0x080099b0
 8001e9c:	800fffff 	.word	0x800fffff
 8001ea0:	fffffc0d 	.word	0xfffffc0d
 8001ea4:	000003ff 	.word	0x000003ff
 8001ea8:	feffffff 	.word	0xfeffffff
 8001eac:	000007fe 	.word	0x000007fe
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2780      	movs	r7, #128	; 0x80
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	033f      	lsls	r7, r7, #12
 8001eb8:	2600      	movs	r6, #0
 8001eba:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <__aeabi_dmul+0x4d8>)
 8001ebc:	e683      	b.n	8001bc6 <__aeabi_dmul+0xd6>
 8001ebe:	9b01      	ldr	r3, [sp, #4]
 8001ec0:	0032      	movs	r2, r6
 8001ec2:	46a4      	mov	ip, r4
 8001ec4:	4658      	mov	r0, fp
 8001ec6:	e670      	b.n	8001baa <__aeabi_dmul+0xba>
 8001ec8:	46ac      	mov	ip, r5
 8001eca:	e66e      	b.n	8001baa <__aeabi_dmul+0xba>
 8001ecc:	2780      	movs	r7, #128	; 0x80
 8001ece:	9901      	ldr	r1, [sp, #4]
 8001ed0:	033f      	lsls	r7, r7, #12
 8001ed2:	4239      	tst	r1, r7
 8001ed4:	d02d      	beq.n	8001f32 <__aeabi_dmul+0x442>
 8001ed6:	423b      	tst	r3, r7
 8001ed8:	d12b      	bne.n	8001f32 <__aeabi_dmul+0x442>
 8001eda:	431f      	orrs	r7, r3
 8001edc:	033f      	lsls	r7, r7, #12
 8001ede:	0b3f      	lsrs	r7, r7, #12
 8001ee0:	9500      	str	r5, [sp, #0]
 8001ee2:	0016      	movs	r6, r2
 8001ee4:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <__aeabi_dmul+0x4d8>)
 8001ee6:	e66e      	b.n	8001bc6 <__aeabi_dmul+0xd6>
 8001ee8:	2501      	movs	r5, #1
 8001eea:	1b2d      	subs	r5, r5, r4
 8001eec:	2d38      	cmp	r5, #56	; 0x38
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dmul+0x402>
 8001ef0:	e666      	b.n	8001bc0 <__aeabi_dmul+0xd0>
 8001ef2:	2d1f      	cmp	r5, #31
 8001ef4:	dc40      	bgt.n	8001f78 <__aeabi_dmul+0x488>
 8001ef6:	4835      	ldr	r0, [pc, #212]	; (8001fcc <__aeabi_dmul+0x4dc>)
 8001ef8:	001c      	movs	r4, r3
 8001efa:	4450      	add	r0, sl
 8001efc:	0016      	movs	r6, r2
 8001efe:	4082      	lsls	r2, r0
 8001f00:	4084      	lsls	r4, r0
 8001f02:	40ee      	lsrs	r6, r5
 8001f04:	1e50      	subs	r0, r2, #1
 8001f06:	4182      	sbcs	r2, r0
 8001f08:	4334      	orrs	r4, r6
 8001f0a:	4314      	orrs	r4, r2
 8001f0c:	40eb      	lsrs	r3, r5
 8001f0e:	0762      	lsls	r2, r4, #29
 8001f10:	d009      	beq.n	8001f26 <__aeabi_dmul+0x436>
 8001f12:	220f      	movs	r2, #15
 8001f14:	4022      	ands	r2, r4
 8001f16:	2a04      	cmp	r2, #4
 8001f18:	d005      	beq.n	8001f26 <__aeabi_dmul+0x436>
 8001f1a:	0022      	movs	r2, r4
 8001f1c:	1d14      	adds	r4, r2, #4
 8001f1e:	4294      	cmp	r4, r2
 8001f20:	4180      	sbcs	r0, r0
 8001f22:	4240      	negs	r0, r0
 8001f24:	181b      	adds	r3, r3, r0
 8001f26:	021a      	lsls	r2, r3, #8
 8001f28:	d53e      	bpl.n	8001fa8 <__aeabi_dmul+0x4b8>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	2700      	movs	r7, #0
 8001f2e:	2600      	movs	r6, #0
 8001f30:	e649      	b.n	8001bc6 <__aeabi_dmul+0xd6>
 8001f32:	2780      	movs	r7, #128	; 0x80
 8001f34:	9b01      	ldr	r3, [sp, #4]
 8001f36:	033f      	lsls	r7, r7, #12
 8001f38:	431f      	orrs	r7, r3
 8001f3a:	033f      	lsls	r7, r7, #12
 8001f3c:	0b3f      	lsrs	r7, r7, #12
 8001f3e:	9400      	str	r4, [sp, #0]
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <__aeabi_dmul+0x4d8>)
 8001f42:	e640      	b.n	8001bc6 <__aeabi_dmul+0xd6>
 8001f44:	0003      	movs	r3, r0
 8001f46:	465a      	mov	r2, fp
 8001f48:	3b28      	subs	r3, #40	; 0x28
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	2600      	movs	r6, #0
 8001f4e:	9201      	str	r2, [sp, #4]
 8001f50:	e66d      	b.n	8001c2e <__aeabi_dmul+0x13e>
 8001f52:	4658      	mov	r0, fp
 8001f54:	f000 fcfe 	bl	8002954 <__clzsi2>
 8001f58:	3020      	adds	r0, #32
 8001f5a:	e657      	b.n	8001c0c <__aeabi_dmul+0x11c>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	4652      	mov	r2, sl
 8001f60:	3b28      	subs	r3, #40	; 0x28
 8001f62:	409a      	lsls	r2, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	2200      	movs	r2, #0
 8001f68:	e693      	b.n	8001c92 <__aeabi_dmul+0x1a2>
 8001f6a:	4650      	mov	r0, sl
 8001f6c:	f000 fcf2 	bl	8002954 <__clzsi2>
 8001f70:	3020      	adds	r0, #32
 8001f72:	e67b      	b.n	8001c6c <__aeabi_dmul+0x17c>
 8001f74:	46ca      	mov	sl, r9
 8001f76:	e750      	b.n	8001e1a <__aeabi_dmul+0x32a>
 8001f78:	201f      	movs	r0, #31
 8001f7a:	001e      	movs	r6, r3
 8001f7c:	4240      	negs	r0, r0
 8001f7e:	1b04      	subs	r4, r0, r4
 8001f80:	40e6      	lsrs	r6, r4
 8001f82:	2d20      	cmp	r5, #32
 8001f84:	d003      	beq.n	8001f8e <__aeabi_dmul+0x49e>
 8001f86:	4c12      	ldr	r4, [pc, #72]	; (8001fd0 <__aeabi_dmul+0x4e0>)
 8001f88:	4454      	add	r4, sl
 8001f8a:	40a3      	lsls	r3, r4
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	1e50      	subs	r0, r2, #1
 8001f90:	4182      	sbcs	r2, r0
 8001f92:	4332      	orrs	r2, r6
 8001f94:	2607      	movs	r6, #7
 8001f96:	2700      	movs	r7, #0
 8001f98:	4016      	ands	r6, r2
 8001f9a:	d009      	beq.n	8001fb0 <__aeabi_dmul+0x4c0>
 8001f9c:	200f      	movs	r0, #15
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	4010      	ands	r0, r2
 8001fa2:	0014      	movs	r4, r2
 8001fa4:	2804      	cmp	r0, #4
 8001fa6:	d1b9      	bne.n	8001f1c <__aeabi_dmul+0x42c>
 8001fa8:	0022      	movs	r2, r4
 8001faa:	075e      	lsls	r6, r3, #29
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	0b1f      	lsrs	r7, r3, #12
 8001fb0:	08d2      	lsrs	r2, r2, #3
 8001fb2:	4316      	orrs	r6, r2
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e606      	b.n	8001bc6 <__aeabi_dmul+0xd6>
 8001fb8:	2780      	movs	r7, #128	; 0x80
 8001fba:	033f      	lsls	r7, r7, #12
 8001fbc:	431f      	orrs	r7, r3
 8001fbe:	033f      	lsls	r7, r7, #12
 8001fc0:	0b3f      	lsrs	r7, r7, #12
 8001fc2:	0016      	movs	r6, r2
 8001fc4:	4b00      	ldr	r3, [pc, #0]	; (8001fc8 <__aeabi_dmul+0x4d8>)
 8001fc6:	e5fe      	b.n	8001bc6 <__aeabi_dmul+0xd6>
 8001fc8:	000007ff 	.word	0x000007ff
 8001fcc:	0000041e 	.word	0x0000041e
 8001fd0:	0000043e 	.word	0x0000043e

08001fd4 <__aeabi_dsub>:
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd6:	4657      	mov	r7, sl
 8001fd8:	464e      	mov	r6, r9
 8001fda:	4645      	mov	r5, r8
 8001fdc:	46de      	mov	lr, fp
 8001fde:	000c      	movs	r4, r1
 8001fe0:	0309      	lsls	r1, r1, #12
 8001fe2:	b5e0      	push	{r5, r6, r7, lr}
 8001fe4:	0a49      	lsrs	r1, r1, #9
 8001fe6:	0f46      	lsrs	r6, r0, #29
 8001fe8:	005f      	lsls	r7, r3, #1
 8001fea:	4331      	orrs	r1, r6
 8001fec:	031e      	lsls	r6, r3, #12
 8001fee:	0fdb      	lsrs	r3, r3, #31
 8001ff0:	0a76      	lsrs	r6, r6, #9
 8001ff2:	469b      	mov	fp, r3
 8001ff4:	0f53      	lsrs	r3, r2, #29
 8001ff6:	4333      	orrs	r3, r6
 8001ff8:	4ec8      	ldr	r6, [pc, #800]	; (800231c <__aeabi_dsub+0x348>)
 8001ffa:	0065      	lsls	r5, r4, #1
 8001ffc:	00c0      	lsls	r0, r0, #3
 8001ffe:	0fe4      	lsrs	r4, r4, #31
 8002000:	00d2      	lsls	r2, r2, #3
 8002002:	0d6d      	lsrs	r5, r5, #21
 8002004:	46a2      	mov	sl, r4
 8002006:	4681      	mov	r9, r0
 8002008:	0d7f      	lsrs	r7, r7, #21
 800200a:	469c      	mov	ip, r3
 800200c:	4690      	mov	r8, r2
 800200e:	42b7      	cmp	r7, r6
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x40>
 8002012:	e0b9      	b.n	8002188 <__aeabi_dsub+0x1b4>
 8002014:	465b      	mov	r3, fp
 8002016:	2601      	movs	r6, #1
 8002018:	4073      	eors	r3, r6
 800201a:	469b      	mov	fp, r3
 800201c:	1bee      	subs	r6, r5, r7
 800201e:	45a3      	cmp	fp, r4
 8002020:	d100      	bne.n	8002024 <__aeabi_dsub+0x50>
 8002022:	e083      	b.n	800212c <__aeabi_dsub+0x158>
 8002024:	2e00      	cmp	r6, #0
 8002026:	dd63      	ble.n	80020f0 <__aeabi_dsub+0x11c>
 8002028:	2f00      	cmp	r7, #0
 800202a:	d000      	beq.n	800202e <__aeabi_dsub+0x5a>
 800202c:	e0b1      	b.n	8002192 <__aeabi_dsub+0x1be>
 800202e:	4663      	mov	r3, ip
 8002030:	4313      	orrs	r3, r2
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x62>
 8002034:	e123      	b.n	800227e <__aeabi_dsub+0x2aa>
 8002036:	1e73      	subs	r3, r6, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d000      	beq.n	800203e <__aeabi_dsub+0x6a>
 800203c:	e1ba      	b.n	80023b4 <__aeabi_dsub+0x3e0>
 800203e:	1a86      	subs	r6, r0, r2
 8002040:	4663      	mov	r3, ip
 8002042:	42b0      	cmp	r0, r6
 8002044:	4180      	sbcs	r0, r0
 8002046:	2501      	movs	r5, #1
 8002048:	1ac9      	subs	r1, r1, r3
 800204a:	4240      	negs	r0, r0
 800204c:	1a09      	subs	r1, r1, r0
 800204e:	020b      	lsls	r3, r1, #8
 8002050:	d400      	bmi.n	8002054 <__aeabi_dsub+0x80>
 8002052:	e147      	b.n	80022e4 <__aeabi_dsub+0x310>
 8002054:	0249      	lsls	r1, r1, #9
 8002056:	0a4b      	lsrs	r3, r1, #9
 8002058:	4698      	mov	r8, r3
 800205a:	4643      	mov	r3, r8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d100      	bne.n	8002062 <__aeabi_dsub+0x8e>
 8002060:	e189      	b.n	8002376 <__aeabi_dsub+0x3a2>
 8002062:	4640      	mov	r0, r8
 8002064:	f000 fc76 	bl	8002954 <__clzsi2>
 8002068:	0003      	movs	r3, r0
 800206a:	3b08      	subs	r3, #8
 800206c:	2b1f      	cmp	r3, #31
 800206e:	dd00      	ble.n	8002072 <__aeabi_dsub+0x9e>
 8002070:	e17c      	b.n	800236c <__aeabi_dsub+0x398>
 8002072:	2220      	movs	r2, #32
 8002074:	0030      	movs	r0, r6
 8002076:	1ad2      	subs	r2, r2, r3
 8002078:	4641      	mov	r1, r8
 800207a:	40d0      	lsrs	r0, r2
 800207c:	4099      	lsls	r1, r3
 800207e:	0002      	movs	r2, r0
 8002080:	409e      	lsls	r6, r3
 8002082:	430a      	orrs	r2, r1
 8002084:	429d      	cmp	r5, r3
 8002086:	dd00      	ble.n	800208a <__aeabi_dsub+0xb6>
 8002088:	e16a      	b.n	8002360 <__aeabi_dsub+0x38c>
 800208a:	1b5d      	subs	r5, r3, r5
 800208c:	1c6b      	adds	r3, r5, #1
 800208e:	2b1f      	cmp	r3, #31
 8002090:	dd00      	ble.n	8002094 <__aeabi_dsub+0xc0>
 8002092:	e194      	b.n	80023be <__aeabi_dsub+0x3ea>
 8002094:	2120      	movs	r1, #32
 8002096:	0010      	movs	r0, r2
 8002098:	0035      	movs	r5, r6
 800209a:	1ac9      	subs	r1, r1, r3
 800209c:	408e      	lsls	r6, r1
 800209e:	40da      	lsrs	r2, r3
 80020a0:	4088      	lsls	r0, r1
 80020a2:	40dd      	lsrs	r5, r3
 80020a4:	1e71      	subs	r1, r6, #1
 80020a6:	418e      	sbcs	r6, r1
 80020a8:	0011      	movs	r1, r2
 80020aa:	2207      	movs	r2, #7
 80020ac:	4328      	orrs	r0, r5
 80020ae:	2500      	movs	r5, #0
 80020b0:	4306      	orrs	r6, r0
 80020b2:	4032      	ands	r2, r6
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d009      	beq.n	80020cc <__aeabi_dsub+0xf8>
 80020b8:	230f      	movs	r3, #15
 80020ba:	4033      	ands	r3, r6
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d005      	beq.n	80020cc <__aeabi_dsub+0xf8>
 80020c0:	1d33      	adds	r3, r6, #4
 80020c2:	42b3      	cmp	r3, r6
 80020c4:	41b6      	sbcs	r6, r6
 80020c6:	4276      	negs	r6, r6
 80020c8:	1989      	adds	r1, r1, r6
 80020ca:	001e      	movs	r6, r3
 80020cc:	020b      	lsls	r3, r1, #8
 80020ce:	d400      	bmi.n	80020d2 <__aeabi_dsub+0xfe>
 80020d0:	e23d      	b.n	800254e <__aeabi_dsub+0x57a>
 80020d2:	1c6a      	adds	r2, r5, #1
 80020d4:	4b91      	ldr	r3, [pc, #580]	; (800231c <__aeabi_dsub+0x348>)
 80020d6:	0555      	lsls	r5, r2, #21
 80020d8:	0d6d      	lsrs	r5, r5, #21
 80020da:	429a      	cmp	r2, r3
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x10c>
 80020de:	e119      	b.n	8002314 <__aeabi_dsub+0x340>
 80020e0:	4a8f      	ldr	r2, [pc, #572]	; (8002320 <__aeabi_dsub+0x34c>)
 80020e2:	08f6      	lsrs	r6, r6, #3
 80020e4:	400a      	ands	r2, r1
 80020e6:	0757      	lsls	r7, r2, #29
 80020e8:	0252      	lsls	r2, r2, #9
 80020ea:	4337      	orrs	r7, r6
 80020ec:	0b12      	lsrs	r2, r2, #12
 80020ee:	e09b      	b.n	8002228 <__aeabi_dsub+0x254>
 80020f0:	2e00      	cmp	r6, #0
 80020f2:	d000      	beq.n	80020f6 <__aeabi_dsub+0x122>
 80020f4:	e0c5      	b.n	8002282 <__aeabi_dsub+0x2ae>
 80020f6:	1c6e      	adds	r6, r5, #1
 80020f8:	0576      	lsls	r6, r6, #21
 80020fa:	0d76      	lsrs	r6, r6, #21
 80020fc:	2e01      	cmp	r6, #1
 80020fe:	dc00      	bgt.n	8002102 <__aeabi_dsub+0x12e>
 8002100:	e148      	b.n	8002394 <__aeabi_dsub+0x3c0>
 8002102:	4667      	mov	r7, ip
 8002104:	1a86      	subs	r6, r0, r2
 8002106:	1bcb      	subs	r3, r1, r7
 8002108:	42b0      	cmp	r0, r6
 800210a:	41bf      	sbcs	r7, r7
 800210c:	427f      	negs	r7, r7
 800210e:	46b8      	mov	r8, r7
 8002110:	001f      	movs	r7, r3
 8002112:	4643      	mov	r3, r8
 8002114:	1aff      	subs	r7, r7, r3
 8002116:	003b      	movs	r3, r7
 8002118:	46b8      	mov	r8, r7
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	d500      	bpl.n	8002120 <__aeabi_dsub+0x14c>
 800211e:	e15f      	b.n	80023e0 <__aeabi_dsub+0x40c>
 8002120:	4337      	orrs	r7, r6
 8002122:	d19a      	bne.n	800205a <__aeabi_dsub+0x86>
 8002124:	2200      	movs	r2, #0
 8002126:	2400      	movs	r4, #0
 8002128:	2500      	movs	r5, #0
 800212a:	e079      	b.n	8002220 <__aeabi_dsub+0x24c>
 800212c:	2e00      	cmp	r6, #0
 800212e:	dc00      	bgt.n	8002132 <__aeabi_dsub+0x15e>
 8002130:	e0fa      	b.n	8002328 <__aeabi_dsub+0x354>
 8002132:	2f00      	cmp	r7, #0
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x164>
 8002136:	e08d      	b.n	8002254 <__aeabi_dsub+0x280>
 8002138:	4b78      	ldr	r3, [pc, #480]	; (800231c <__aeabi_dsub+0x348>)
 800213a:	429d      	cmp	r5, r3
 800213c:	d067      	beq.n	800220e <__aeabi_dsub+0x23a>
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	4667      	mov	r7, ip
 8002142:	041b      	lsls	r3, r3, #16
 8002144:	431f      	orrs	r7, r3
 8002146:	46bc      	mov	ip, r7
 8002148:	2e38      	cmp	r6, #56	; 0x38
 800214a:	dc00      	bgt.n	800214e <__aeabi_dsub+0x17a>
 800214c:	e152      	b.n	80023f4 <__aeabi_dsub+0x420>
 800214e:	4663      	mov	r3, ip
 8002150:	4313      	orrs	r3, r2
 8002152:	1e5a      	subs	r2, r3, #1
 8002154:	4193      	sbcs	r3, r2
 8002156:	181e      	adds	r6, r3, r0
 8002158:	4286      	cmp	r6, r0
 800215a:	4180      	sbcs	r0, r0
 800215c:	4240      	negs	r0, r0
 800215e:	1809      	adds	r1, r1, r0
 8002160:	020b      	lsls	r3, r1, #8
 8002162:	d400      	bmi.n	8002166 <__aeabi_dsub+0x192>
 8002164:	e0be      	b.n	80022e4 <__aeabi_dsub+0x310>
 8002166:	4b6d      	ldr	r3, [pc, #436]	; (800231c <__aeabi_dsub+0x348>)
 8002168:	3501      	adds	r5, #1
 800216a:	429d      	cmp	r5, r3
 800216c:	d100      	bne.n	8002170 <__aeabi_dsub+0x19c>
 800216e:	e0d2      	b.n	8002316 <__aeabi_dsub+0x342>
 8002170:	4a6b      	ldr	r2, [pc, #428]	; (8002320 <__aeabi_dsub+0x34c>)
 8002172:	0873      	lsrs	r3, r6, #1
 8002174:	400a      	ands	r2, r1
 8002176:	2101      	movs	r1, #1
 8002178:	400e      	ands	r6, r1
 800217a:	431e      	orrs	r6, r3
 800217c:	0851      	lsrs	r1, r2, #1
 800217e:	07d3      	lsls	r3, r2, #31
 8002180:	2207      	movs	r2, #7
 8002182:	431e      	orrs	r6, r3
 8002184:	4032      	ands	r2, r6
 8002186:	e795      	b.n	80020b4 <__aeabi_dsub+0xe0>
 8002188:	001e      	movs	r6, r3
 800218a:	4316      	orrs	r6, r2
 800218c:	d000      	beq.n	8002190 <__aeabi_dsub+0x1bc>
 800218e:	e745      	b.n	800201c <__aeabi_dsub+0x48>
 8002190:	e740      	b.n	8002014 <__aeabi_dsub+0x40>
 8002192:	4b62      	ldr	r3, [pc, #392]	; (800231c <__aeabi_dsub+0x348>)
 8002194:	429d      	cmp	r5, r3
 8002196:	d03a      	beq.n	800220e <__aeabi_dsub+0x23a>
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	4667      	mov	r7, ip
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	431f      	orrs	r7, r3
 80021a0:	46bc      	mov	ip, r7
 80021a2:	2e38      	cmp	r6, #56	; 0x38
 80021a4:	dd00      	ble.n	80021a8 <__aeabi_dsub+0x1d4>
 80021a6:	e0eb      	b.n	8002380 <__aeabi_dsub+0x3ac>
 80021a8:	2e1f      	cmp	r6, #31
 80021aa:	dc00      	bgt.n	80021ae <__aeabi_dsub+0x1da>
 80021ac:	e13a      	b.n	8002424 <__aeabi_dsub+0x450>
 80021ae:	0033      	movs	r3, r6
 80021b0:	4667      	mov	r7, ip
 80021b2:	3b20      	subs	r3, #32
 80021b4:	40df      	lsrs	r7, r3
 80021b6:	003b      	movs	r3, r7
 80021b8:	2e20      	cmp	r6, #32
 80021ba:	d005      	beq.n	80021c8 <__aeabi_dsub+0x1f4>
 80021bc:	2740      	movs	r7, #64	; 0x40
 80021be:	1bbf      	subs	r7, r7, r6
 80021c0:	4666      	mov	r6, ip
 80021c2:	40be      	lsls	r6, r7
 80021c4:	4332      	orrs	r2, r6
 80021c6:	4690      	mov	r8, r2
 80021c8:	4646      	mov	r6, r8
 80021ca:	1e72      	subs	r2, r6, #1
 80021cc:	4196      	sbcs	r6, r2
 80021ce:	4333      	orrs	r3, r6
 80021d0:	e0da      	b.n	8002388 <__aeabi_dsub+0x3b4>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d100      	bne.n	80021d8 <__aeabi_dsub+0x204>
 80021d6:	e214      	b.n	8002602 <__aeabi_dsub+0x62e>
 80021d8:	4663      	mov	r3, ip
 80021da:	4313      	orrs	r3, r2
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x20c>
 80021de:	e168      	b.n	80024b2 <__aeabi_dsub+0x4de>
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	074e      	lsls	r6, r1, #29
 80021e4:	08c0      	lsrs	r0, r0, #3
 80021e6:	08c9      	lsrs	r1, r1, #3
 80021e8:	031b      	lsls	r3, r3, #12
 80021ea:	4306      	orrs	r6, r0
 80021ec:	4219      	tst	r1, r3
 80021ee:	d008      	beq.n	8002202 <__aeabi_dsub+0x22e>
 80021f0:	4660      	mov	r0, ip
 80021f2:	08c0      	lsrs	r0, r0, #3
 80021f4:	4218      	tst	r0, r3
 80021f6:	d104      	bne.n	8002202 <__aeabi_dsub+0x22e>
 80021f8:	4663      	mov	r3, ip
 80021fa:	0001      	movs	r1, r0
 80021fc:	08d2      	lsrs	r2, r2, #3
 80021fe:	075e      	lsls	r6, r3, #29
 8002200:	4316      	orrs	r6, r2
 8002202:	00f3      	lsls	r3, r6, #3
 8002204:	4699      	mov	r9, r3
 8002206:	00c9      	lsls	r1, r1, #3
 8002208:	0f72      	lsrs	r2, r6, #29
 800220a:	4d44      	ldr	r5, [pc, #272]	; (800231c <__aeabi_dsub+0x348>)
 800220c:	4311      	orrs	r1, r2
 800220e:	464b      	mov	r3, r9
 8002210:	08de      	lsrs	r6, r3, #3
 8002212:	4b42      	ldr	r3, [pc, #264]	; (800231c <__aeabi_dsub+0x348>)
 8002214:	074f      	lsls	r7, r1, #29
 8002216:	4337      	orrs	r7, r6
 8002218:	08ca      	lsrs	r2, r1, #3
 800221a:	429d      	cmp	r5, r3
 800221c:	d100      	bne.n	8002220 <__aeabi_dsub+0x24c>
 800221e:	e06e      	b.n	80022fe <__aeabi_dsub+0x32a>
 8002220:	0312      	lsls	r2, r2, #12
 8002222:	056d      	lsls	r5, r5, #21
 8002224:	0b12      	lsrs	r2, r2, #12
 8002226:	0d6d      	lsrs	r5, r5, #21
 8002228:	2100      	movs	r1, #0
 800222a:	0312      	lsls	r2, r2, #12
 800222c:	0b13      	lsrs	r3, r2, #12
 800222e:	0d0a      	lsrs	r2, r1, #20
 8002230:	0512      	lsls	r2, r2, #20
 8002232:	431a      	orrs	r2, r3
 8002234:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <__aeabi_dsub+0x350>)
 8002236:	052d      	lsls	r5, r5, #20
 8002238:	4013      	ands	r3, r2
 800223a:	432b      	orrs	r3, r5
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	07e4      	lsls	r4, r4, #31
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	4323      	orrs	r3, r4
 8002244:	0038      	movs	r0, r7
 8002246:	0019      	movs	r1, r3
 8002248:	bc3c      	pop	{r2, r3, r4, r5}
 800224a:	4690      	mov	r8, r2
 800224c:	4699      	mov	r9, r3
 800224e:	46a2      	mov	sl, r4
 8002250:	46ab      	mov	fp, r5
 8002252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002254:	4663      	mov	r3, ip
 8002256:	4313      	orrs	r3, r2
 8002258:	d011      	beq.n	800227e <__aeabi_dsub+0x2aa>
 800225a:	1e73      	subs	r3, r6, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d000      	beq.n	8002262 <__aeabi_dsub+0x28e>
 8002260:	e107      	b.n	8002472 <__aeabi_dsub+0x49e>
 8002262:	1886      	adds	r6, r0, r2
 8002264:	4286      	cmp	r6, r0
 8002266:	4180      	sbcs	r0, r0
 8002268:	4461      	add	r1, ip
 800226a:	4240      	negs	r0, r0
 800226c:	1809      	adds	r1, r1, r0
 800226e:	2501      	movs	r5, #1
 8002270:	020b      	lsls	r3, r1, #8
 8002272:	d537      	bpl.n	80022e4 <__aeabi_dsub+0x310>
 8002274:	2502      	movs	r5, #2
 8002276:	e77b      	b.n	8002170 <__aeabi_dsub+0x19c>
 8002278:	003e      	movs	r6, r7
 800227a:	4661      	mov	r1, ip
 800227c:	4691      	mov	r9, r2
 800227e:	0035      	movs	r5, r6
 8002280:	e7c5      	b.n	800220e <__aeabi_dsub+0x23a>
 8002282:	465c      	mov	r4, fp
 8002284:	2d00      	cmp	r5, #0
 8002286:	d000      	beq.n	800228a <__aeabi_dsub+0x2b6>
 8002288:	e0e1      	b.n	800244e <__aeabi_dsub+0x47a>
 800228a:	000b      	movs	r3, r1
 800228c:	4303      	orrs	r3, r0
 800228e:	d0f3      	beq.n	8002278 <__aeabi_dsub+0x2a4>
 8002290:	1c73      	adds	r3, r6, #1
 8002292:	d100      	bne.n	8002296 <__aeabi_dsub+0x2c2>
 8002294:	e1ac      	b.n	80025f0 <__aeabi_dsub+0x61c>
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <__aeabi_dsub+0x348>)
 8002298:	429f      	cmp	r7, r3
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0x2ca>
 800229c:	e13a      	b.n	8002514 <__aeabi_dsub+0x540>
 800229e:	43f3      	mvns	r3, r6
 80022a0:	2b38      	cmp	r3, #56	; 0x38
 80022a2:	dd00      	ble.n	80022a6 <__aeabi_dsub+0x2d2>
 80022a4:	e16f      	b.n	8002586 <__aeabi_dsub+0x5b2>
 80022a6:	2b1f      	cmp	r3, #31
 80022a8:	dd00      	ble.n	80022ac <__aeabi_dsub+0x2d8>
 80022aa:	e18c      	b.n	80025c6 <__aeabi_dsub+0x5f2>
 80022ac:	2520      	movs	r5, #32
 80022ae:	000e      	movs	r6, r1
 80022b0:	1aed      	subs	r5, r5, r3
 80022b2:	40ae      	lsls	r6, r5
 80022b4:	46b0      	mov	r8, r6
 80022b6:	0006      	movs	r6, r0
 80022b8:	46aa      	mov	sl, r5
 80022ba:	40de      	lsrs	r6, r3
 80022bc:	4645      	mov	r5, r8
 80022be:	4335      	orrs	r5, r6
 80022c0:	002e      	movs	r6, r5
 80022c2:	4655      	mov	r5, sl
 80022c4:	40d9      	lsrs	r1, r3
 80022c6:	40a8      	lsls	r0, r5
 80022c8:	4663      	mov	r3, ip
 80022ca:	1e45      	subs	r5, r0, #1
 80022cc:	41a8      	sbcs	r0, r5
 80022ce:	1a5b      	subs	r3, r3, r1
 80022d0:	469c      	mov	ip, r3
 80022d2:	4330      	orrs	r0, r6
 80022d4:	1a16      	subs	r6, r2, r0
 80022d6:	42b2      	cmp	r2, r6
 80022d8:	4192      	sbcs	r2, r2
 80022da:	4663      	mov	r3, ip
 80022dc:	4252      	negs	r2, r2
 80022de:	1a99      	subs	r1, r3, r2
 80022e0:	003d      	movs	r5, r7
 80022e2:	e6b4      	b.n	800204e <__aeabi_dsub+0x7a>
 80022e4:	2207      	movs	r2, #7
 80022e6:	4032      	ands	r2, r6
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	d000      	beq.n	80022ee <__aeabi_dsub+0x31a>
 80022ec:	e6e4      	b.n	80020b8 <__aeabi_dsub+0xe4>
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <__aeabi_dsub+0x348>)
 80022f0:	08f6      	lsrs	r6, r6, #3
 80022f2:	074f      	lsls	r7, r1, #29
 80022f4:	4337      	orrs	r7, r6
 80022f6:	08ca      	lsrs	r2, r1, #3
 80022f8:	429d      	cmp	r5, r3
 80022fa:	d000      	beq.n	80022fe <__aeabi_dsub+0x32a>
 80022fc:	e790      	b.n	8002220 <__aeabi_dsub+0x24c>
 80022fe:	003b      	movs	r3, r7
 8002300:	4313      	orrs	r3, r2
 8002302:	d100      	bne.n	8002306 <__aeabi_dsub+0x332>
 8002304:	e1a6      	b.n	8002654 <__aeabi_dsub+0x680>
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	031b      	lsls	r3, r3, #12
 800230a:	431a      	orrs	r2, r3
 800230c:	0312      	lsls	r2, r2, #12
 800230e:	0b12      	lsrs	r2, r2, #12
 8002310:	4d02      	ldr	r5, [pc, #8]	; (800231c <__aeabi_dsub+0x348>)
 8002312:	e789      	b.n	8002228 <__aeabi_dsub+0x254>
 8002314:	0015      	movs	r5, r2
 8002316:	2200      	movs	r2, #0
 8002318:	2700      	movs	r7, #0
 800231a:	e785      	b.n	8002228 <__aeabi_dsub+0x254>
 800231c:	000007ff 	.word	0x000007ff
 8002320:	ff7fffff 	.word	0xff7fffff
 8002324:	800fffff 	.word	0x800fffff
 8002328:	2e00      	cmp	r6, #0
 800232a:	d000      	beq.n	800232e <__aeabi_dsub+0x35a>
 800232c:	e0c7      	b.n	80024be <__aeabi_dsub+0x4ea>
 800232e:	1c6b      	adds	r3, r5, #1
 8002330:	055e      	lsls	r6, r3, #21
 8002332:	0d76      	lsrs	r6, r6, #21
 8002334:	2e01      	cmp	r6, #1
 8002336:	dc00      	bgt.n	800233a <__aeabi_dsub+0x366>
 8002338:	e0f0      	b.n	800251c <__aeabi_dsub+0x548>
 800233a:	4dc8      	ldr	r5, [pc, #800]	; (800265c <__aeabi_dsub+0x688>)
 800233c:	42ab      	cmp	r3, r5
 800233e:	d100      	bne.n	8002342 <__aeabi_dsub+0x36e>
 8002340:	e0b9      	b.n	80024b6 <__aeabi_dsub+0x4e2>
 8002342:	1885      	adds	r5, r0, r2
 8002344:	000a      	movs	r2, r1
 8002346:	4285      	cmp	r5, r0
 8002348:	4189      	sbcs	r1, r1
 800234a:	4462      	add	r2, ip
 800234c:	4249      	negs	r1, r1
 800234e:	1851      	adds	r1, r2, r1
 8002350:	2207      	movs	r2, #7
 8002352:	07ce      	lsls	r6, r1, #31
 8002354:	086d      	lsrs	r5, r5, #1
 8002356:	432e      	orrs	r6, r5
 8002358:	0849      	lsrs	r1, r1, #1
 800235a:	4032      	ands	r2, r6
 800235c:	001d      	movs	r5, r3
 800235e:	e6a9      	b.n	80020b4 <__aeabi_dsub+0xe0>
 8002360:	49bf      	ldr	r1, [pc, #764]	; (8002660 <__aeabi_dsub+0x68c>)
 8002362:	1aed      	subs	r5, r5, r3
 8002364:	4011      	ands	r1, r2
 8002366:	2207      	movs	r2, #7
 8002368:	4032      	ands	r2, r6
 800236a:	e6a3      	b.n	80020b4 <__aeabi_dsub+0xe0>
 800236c:	0032      	movs	r2, r6
 800236e:	3828      	subs	r0, #40	; 0x28
 8002370:	4082      	lsls	r2, r0
 8002372:	2600      	movs	r6, #0
 8002374:	e686      	b.n	8002084 <__aeabi_dsub+0xb0>
 8002376:	0030      	movs	r0, r6
 8002378:	f000 faec 	bl	8002954 <__clzsi2>
 800237c:	3020      	adds	r0, #32
 800237e:	e673      	b.n	8002068 <__aeabi_dsub+0x94>
 8002380:	4663      	mov	r3, ip
 8002382:	4313      	orrs	r3, r2
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	4193      	sbcs	r3, r2
 8002388:	1ac6      	subs	r6, r0, r3
 800238a:	42b0      	cmp	r0, r6
 800238c:	4180      	sbcs	r0, r0
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	e65c      	b.n	800204e <__aeabi_dsub+0x7a>
 8002394:	000e      	movs	r6, r1
 8002396:	4667      	mov	r7, ip
 8002398:	4306      	orrs	r6, r0
 800239a:	4317      	orrs	r7, r2
 800239c:	2d00      	cmp	r5, #0
 800239e:	d15e      	bne.n	800245e <__aeabi_dsub+0x48a>
 80023a0:	2e00      	cmp	r6, #0
 80023a2:	d000      	beq.n	80023a6 <__aeabi_dsub+0x3d2>
 80023a4:	e0f3      	b.n	800258e <__aeabi_dsub+0x5ba>
 80023a6:	2f00      	cmp	r7, #0
 80023a8:	d100      	bne.n	80023ac <__aeabi_dsub+0x3d8>
 80023aa:	e11e      	b.n	80025ea <__aeabi_dsub+0x616>
 80023ac:	465c      	mov	r4, fp
 80023ae:	4661      	mov	r1, ip
 80023b0:	4691      	mov	r9, r2
 80023b2:	e72c      	b.n	800220e <__aeabi_dsub+0x23a>
 80023b4:	4fa9      	ldr	r7, [pc, #676]	; (800265c <__aeabi_dsub+0x688>)
 80023b6:	42be      	cmp	r6, r7
 80023b8:	d07b      	beq.n	80024b2 <__aeabi_dsub+0x4de>
 80023ba:	001e      	movs	r6, r3
 80023bc:	e6f1      	b.n	80021a2 <__aeabi_dsub+0x1ce>
 80023be:	0010      	movs	r0, r2
 80023c0:	3d1f      	subs	r5, #31
 80023c2:	40e8      	lsrs	r0, r5
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d003      	beq.n	80023d0 <__aeabi_dsub+0x3fc>
 80023c8:	2140      	movs	r1, #64	; 0x40
 80023ca:	1acb      	subs	r3, r1, r3
 80023cc:	409a      	lsls	r2, r3
 80023ce:	4316      	orrs	r6, r2
 80023d0:	1e73      	subs	r3, r6, #1
 80023d2:	419e      	sbcs	r6, r3
 80023d4:	2207      	movs	r2, #7
 80023d6:	4306      	orrs	r6, r0
 80023d8:	4032      	ands	r2, r6
 80023da:	2100      	movs	r1, #0
 80023dc:	2500      	movs	r5, #0
 80023de:	e783      	b.n	80022e8 <__aeabi_dsub+0x314>
 80023e0:	1a16      	subs	r6, r2, r0
 80023e2:	4663      	mov	r3, ip
 80023e4:	42b2      	cmp	r2, r6
 80023e6:	4180      	sbcs	r0, r0
 80023e8:	1a59      	subs	r1, r3, r1
 80023ea:	4240      	negs	r0, r0
 80023ec:	1a0b      	subs	r3, r1, r0
 80023ee:	4698      	mov	r8, r3
 80023f0:	465c      	mov	r4, fp
 80023f2:	e632      	b.n	800205a <__aeabi_dsub+0x86>
 80023f4:	2e1f      	cmp	r6, #31
 80023f6:	dd00      	ble.n	80023fa <__aeabi_dsub+0x426>
 80023f8:	e0ab      	b.n	8002552 <__aeabi_dsub+0x57e>
 80023fa:	2720      	movs	r7, #32
 80023fc:	1bbb      	subs	r3, r7, r6
 80023fe:	469a      	mov	sl, r3
 8002400:	4663      	mov	r3, ip
 8002402:	4657      	mov	r7, sl
 8002404:	40bb      	lsls	r3, r7
 8002406:	4699      	mov	r9, r3
 8002408:	0013      	movs	r3, r2
 800240a:	464f      	mov	r7, r9
 800240c:	40f3      	lsrs	r3, r6
 800240e:	431f      	orrs	r7, r3
 8002410:	003b      	movs	r3, r7
 8002412:	4657      	mov	r7, sl
 8002414:	40ba      	lsls	r2, r7
 8002416:	1e57      	subs	r7, r2, #1
 8002418:	41ba      	sbcs	r2, r7
 800241a:	4313      	orrs	r3, r2
 800241c:	4662      	mov	r2, ip
 800241e:	40f2      	lsrs	r2, r6
 8002420:	1889      	adds	r1, r1, r2
 8002422:	e698      	b.n	8002156 <__aeabi_dsub+0x182>
 8002424:	2720      	movs	r7, #32
 8002426:	1bbb      	subs	r3, r7, r6
 8002428:	469a      	mov	sl, r3
 800242a:	4663      	mov	r3, ip
 800242c:	4657      	mov	r7, sl
 800242e:	40bb      	lsls	r3, r7
 8002430:	4699      	mov	r9, r3
 8002432:	0013      	movs	r3, r2
 8002434:	464f      	mov	r7, r9
 8002436:	40f3      	lsrs	r3, r6
 8002438:	431f      	orrs	r7, r3
 800243a:	003b      	movs	r3, r7
 800243c:	4657      	mov	r7, sl
 800243e:	40ba      	lsls	r2, r7
 8002440:	1e57      	subs	r7, r2, #1
 8002442:	41ba      	sbcs	r2, r7
 8002444:	4313      	orrs	r3, r2
 8002446:	4662      	mov	r2, ip
 8002448:	40f2      	lsrs	r2, r6
 800244a:	1a89      	subs	r1, r1, r2
 800244c:	e79c      	b.n	8002388 <__aeabi_dsub+0x3b4>
 800244e:	4b83      	ldr	r3, [pc, #524]	; (800265c <__aeabi_dsub+0x688>)
 8002450:	429f      	cmp	r7, r3
 8002452:	d05f      	beq.n	8002514 <__aeabi_dsub+0x540>
 8002454:	2580      	movs	r5, #128	; 0x80
 8002456:	042d      	lsls	r5, r5, #16
 8002458:	4273      	negs	r3, r6
 800245a:	4329      	orrs	r1, r5
 800245c:	e720      	b.n	80022a0 <__aeabi_dsub+0x2cc>
 800245e:	2e00      	cmp	r6, #0
 8002460:	d10c      	bne.n	800247c <__aeabi_dsub+0x4a8>
 8002462:	2f00      	cmp	r7, #0
 8002464:	d100      	bne.n	8002468 <__aeabi_dsub+0x494>
 8002466:	e0d0      	b.n	800260a <__aeabi_dsub+0x636>
 8002468:	465c      	mov	r4, fp
 800246a:	4661      	mov	r1, ip
 800246c:	4691      	mov	r9, r2
 800246e:	4d7b      	ldr	r5, [pc, #492]	; (800265c <__aeabi_dsub+0x688>)
 8002470:	e6cd      	b.n	800220e <__aeabi_dsub+0x23a>
 8002472:	4f7a      	ldr	r7, [pc, #488]	; (800265c <__aeabi_dsub+0x688>)
 8002474:	42be      	cmp	r6, r7
 8002476:	d01c      	beq.n	80024b2 <__aeabi_dsub+0x4de>
 8002478:	001e      	movs	r6, r3
 800247a:	e665      	b.n	8002148 <__aeabi_dsub+0x174>
 800247c:	2f00      	cmp	r7, #0
 800247e:	d018      	beq.n	80024b2 <__aeabi_dsub+0x4de>
 8002480:	08c0      	lsrs	r0, r0, #3
 8002482:	074e      	lsls	r6, r1, #29
 8002484:	4306      	orrs	r6, r0
 8002486:	2080      	movs	r0, #128	; 0x80
 8002488:	08c9      	lsrs	r1, r1, #3
 800248a:	0300      	lsls	r0, r0, #12
 800248c:	4201      	tst	r1, r0
 800248e:	d008      	beq.n	80024a2 <__aeabi_dsub+0x4ce>
 8002490:	4663      	mov	r3, ip
 8002492:	08dc      	lsrs	r4, r3, #3
 8002494:	4204      	tst	r4, r0
 8002496:	d104      	bne.n	80024a2 <__aeabi_dsub+0x4ce>
 8002498:	0021      	movs	r1, r4
 800249a:	46da      	mov	sl, fp
 800249c:	08d2      	lsrs	r2, r2, #3
 800249e:	075e      	lsls	r6, r3, #29
 80024a0:	4316      	orrs	r6, r2
 80024a2:	00f3      	lsls	r3, r6, #3
 80024a4:	4699      	mov	r9, r3
 80024a6:	2401      	movs	r4, #1
 80024a8:	4653      	mov	r3, sl
 80024aa:	00c9      	lsls	r1, r1, #3
 80024ac:	0f72      	lsrs	r2, r6, #29
 80024ae:	4311      	orrs	r1, r2
 80024b0:	401c      	ands	r4, r3
 80024b2:	4d6a      	ldr	r5, [pc, #424]	; (800265c <__aeabi_dsub+0x688>)
 80024b4:	e6ab      	b.n	800220e <__aeabi_dsub+0x23a>
 80024b6:	001d      	movs	r5, r3
 80024b8:	2200      	movs	r2, #0
 80024ba:	2700      	movs	r7, #0
 80024bc:	e6b4      	b.n	8002228 <__aeabi_dsub+0x254>
 80024be:	2d00      	cmp	r5, #0
 80024c0:	d159      	bne.n	8002576 <__aeabi_dsub+0x5a2>
 80024c2:	000b      	movs	r3, r1
 80024c4:	4303      	orrs	r3, r0
 80024c6:	d100      	bne.n	80024ca <__aeabi_dsub+0x4f6>
 80024c8:	e6d6      	b.n	8002278 <__aeabi_dsub+0x2a4>
 80024ca:	1c73      	adds	r3, r6, #1
 80024cc:	d100      	bne.n	80024d0 <__aeabi_dsub+0x4fc>
 80024ce:	e0b2      	b.n	8002636 <__aeabi_dsub+0x662>
 80024d0:	4b62      	ldr	r3, [pc, #392]	; (800265c <__aeabi_dsub+0x688>)
 80024d2:	429f      	cmp	r7, r3
 80024d4:	d01e      	beq.n	8002514 <__aeabi_dsub+0x540>
 80024d6:	43f3      	mvns	r3, r6
 80024d8:	2b38      	cmp	r3, #56	; 0x38
 80024da:	dc6f      	bgt.n	80025bc <__aeabi_dsub+0x5e8>
 80024dc:	2b1f      	cmp	r3, #31
 80024de:	dd00      	ble.n	80024e2 <__aeabi_dsub+0x50e>
 80024e0:	e097      	b.n	8002612 <__aeabi_dsub+0x63e>
 80024e2:	2520      	movs	r5, #32
 80024e4:	000e      	movs	r6, r1
 80024e6:	1aed      	subs	r5, r5, r3
 80024e8:	40ae      	lsls	r6, r5
 80024ea:	46b0      	mov	r8, r6
 80024ec:	0006      	movs	r6, r0
 80024ee:	46aa      	mov	sl, r5
 80024f0:	40de      	lsrs	r6, r3
 80024f2:	4645      	mov	r5, r8
 80024f4:	4335      	orrs	r5, r6
 80024f6:	002e      	movs	r6, r5
 80024f8:	4655      	mov	r5, sl
 80024fa:	40a8      	lsls	r0, r5
 80024fc:	40d9      	lsrs	r1, r3
 80024fe:	1e45      	subs	r5, r0, #1
 8002500:	41a8      	sbcs	r0, r5
 8002502:	448c      	add	ip, r1
 8002504:	4306      	orrs	r6, r0
 8002506:	18b6      	adds	r6, r6, r2
 8002508:	4296      	cmp	r6, r2
 800250a:	4192      	sbcs	r2, r2
 800250c:	4251      	negs	r1, r2
 800250e:	4461      	add	r1, ip
 8002510:	003d      	movs	r5, r7
 8002512:	e625      	b.n	8002160 <__aeabi_dsub+0x18c>
 8002514:	003d      	movs	r5, r7
 8002516:	4661      	mov	r1, ip
 8002518:	4691      	mov	r9, r2
 800251a:	e678      	b.n	800220e <__aeabi_dsub+0x23a>
 800251c:	000b      	movs	r3, r1
 800251e:	4303      	orrs	r3, r0
 8002520:	2d00      	cmp	r5, #0
 8002522:	d000      	beq.n	8002526 <__aeabi_dsub+0x552>
 8002524:	e655      	b.n	80021d2 <__aeabi_dsub+0x1fe>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f5      	beq.n	8002516 <__aeabi_dsub+0x542>
 800252a:	4663      	mov	r3, ip
 800252c:	4313      	orrs	r3, r2
 800252e:	d100      	bne.n	8002532 <__aeabi_dsub+0x55e>
 8002530:	e66d      	b.n	800220e <__aeabi_dsub+0x23a>
 8002532:	1886      	adds	r6, r0, r2
 8002534:	4286      	cmp	r6, r0
 8002536:	4180      	sbcs	r0, r0
 8002538:	4461      	add	r1, ip
 800253a:	4240      	negs	r0, r0
 800253c:	1809      	adds	r1, r1, r0
 800253e:	2200      	movs	r2, #0
 8002540:	020b      	lsls	r3, r1, #8
 8002542:	d400      	bmi.n	8002546 <__aeabi_dsub+0x572>
 8002544:	e6d0      	b.n	80022e8 <__aeabi_dsub+0x314>
 8002546:	4b46      	ldr	r3, [pc, #280]	; (8002660 <__aeabi_dsub+0x68c>)
 8002548:	3501      	adds	r5, #1
 800254a:	4019      	ands	r1, r3
 800254c:	e5b2      	b.n	80020b4 <__aeabi_dsub+0xe0>
 800254e:	46b1      	mov	r9, r6
 8002550:	e65d      	b.n	800220e <__aeabi_dsub+0x23a>
 8002552:	0033      	movs	r3, r6
 8002554:	4667      	mov	r7, ip
 8002556:	3b20      	subs	r3, #32
 8002558:	40df      	lsrs	r7, r3
 800255a:	003b      	movs	r3, r7
 800255c:	2e20      	cmp	r6, #32
 800255e:	d005      	beq.n	800256c <__aeabi_dsub+0x598>
 8002560:	2740      	movs	r7, #64	; 0x40
 8002562:	1bbf      	subs	r7, r7, r6
 8002564:	4666      	mov	r6, ip
 8002566:	40be      	lsls	r6, r7
 8002568:	4332      	orrs	r2, r6
 800256a:	4690      	mov	r8, r2
 800256c:	4646      	mov	r6, r8
 800256e:	1e72      	subs	r2, r6, #1
 8002570:	4196      	sbcs	r6, r2
 8002572:	4333      	orrs	r3, r6
 8002574:	e5ef      	b.n	8002156 <__aeabi_dsub+0x182>
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <__aeabi_dsub+0x688>)
 8002578:	429f      	cmp	r7, r3
 800257a:	d0cb      	beq.n	8002514 <__aeabi_dsub+0x540>
 800257c:	2580      	movs	r5, #128	; 0x80
 800257e:	042d      	lsls	r5, r5, #16
 8002580:	4273      	negs	r3, r6
 8002582:	4329      	orrs	r1, r5
 8002584:	e7a8      	b.n	80024d8 <__aeabi_dsub+0x504>
 8002586:	4308      	orrs	r0, r1
 8002588:	1e41      	subs	r1, r0, #1
 800258a:	4188      	sbcs	r0, r1
 800258c:	e6a2      	b.n	80022d4 <__aeabi_dsub+0x300>
 800258e:	2f00      	cmp	r7, #0
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0x5c0>
 8002592:	e63c      	b.n	800220e <__aeabi_dsub+0x23a>
 8002594:	4663      	mov	r3, ip
 8002596:	1a86      	subs	r6, r0, r2
 8002598:	1acf      	subs	r7, r1, r3
 800259a:	42b0      	cmp	r0, r6
 800259c:	419b      	sbcs	r3, r3
 800259e:	425b      	negs	r3, r3
 80025a0:	1afb      	subs	r3, r7, r3
 80025a2:	4698      	mov	r8, r3
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	d54e      	bpl.n	8002646 <__aeabi_dsub+0x672>
 80025a8:	1a16      	subs	r6, r2, r0
 80025aa:	4663      	mov	r3, ip
 80025ac:	42b2      	cmp	r2, r6
 80025ae:	4192      	sbcs	r2, r2
 80025b0:	1a59      	subs	r1, r3, r1
 80025b2:	4252      	negs	r2, r2
 80025b4:	1a89      	subs	r1, r1, r2
 80025b6:	465c      	mov	r4, fp
 80025b8:	2200      	movs	r2, #0
 80025ba:	e57b      	b.n	80020b4 <__aeabi_dsub+0xe0>
 80025bc:	4301      	orrs	r1, r0
 80025be:	000e      	movs	r6, r1
 80025c0:	1e71      	subs	r1, r6, #1
 80025c2:	418e      	sbcs	r6, r1
 80025c4:	e79f      	b.n	8002506 <__aeabi_dsub+0x532>
 80025c6:	001d      	movs	r5, r3
 80025c8:	000e      	movs	r6, r1
 80025ca:	3d20      	subs	r5, #32
 80025cc:	40ee      	lsrs	r6, r5
 80025ce:	46b0      	mov	r8, r6
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d004      	beq.n	80025de <__aeabi_dsub+0x60a>
 80025d4:	2540      	movs	r5, #64	; 0x40
 80025d6:	1aeb      	subs	r3, r5, r3
 80025d8:	4099      	lsls	r1, r3
 80025da:	4308      	orrs	r0, r1
 80025dc:	4681      	mov	r9, r0
 80025de:	4648      	mov	r0, r9
 80025e0:	4643      	mov	r3, r8
 80025e2:	1e41      	subs	r1, r0, #1
 80025e4:	4188      	sbcs	r0, r1
 80025e6:	4318      	orrs	r0, r3
 80025e8:	e674      	b.n	80022d4 <__aeabi_dsub+0x300>
 80025ea:	2200      	movs	r2, #0
 80025ec:	2400      	movs	r4, #0
 80025ee:	e617      	b.n	8002220 <__aeabi_dsub+0x24c>
 80025f0:	1a16      	subs	r6, r2, r0
 80025f2:	4663      	mov	r3, ip
 80025f4:	42b2      	cmp	r2, r6
 80025f6:	4192      	sbcs	r2, r2
 80025f8:	1a59      	subs	r1, r3, r1
 80025fa:	4252      	negs	r2, r2
 80025fc:	1a89      	subs	r1, r1, r2
 80025fe:	003d      	movs	r5, r7
 8002600:	e525      	b.n	800204e <__aeabi_dsub+0x7a>
 8002602:	4661      	mov	r1, ip
 8002604:	4691      	mov	r9, r2
 8002606:	4d15      	ldr	r5, [pc, #84]	; (800265c <__aeabi_dsub+0x688>)
 8002608:	e601      	b.n	800220e <__aeabi_dsub+0x23a>
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	2400      	movs	r4, #0
 800260e:	0312      	lsls	r2, r2, #12
 8002610:	e679      	b.n	8002306 <__aeabi_dsub+0x332>
 8002612:	001d      	movs	r5, r3
 8002614:	000e      	movs	r6, r1
 8002616:	3d20      	subs	r5, #32
 8002618:	40ee      	lsrs	r6, r5
 800261a:	46b0      	mov	r8, r6
 800261c:	2b20      	cmp	r3, #32
 800261e:	d004      	beq.n	800262a <__aeabi_dsub+0x656>
 8002620:	2540      	movs	r5, #64	; 0x40
 8002622:	1aeb      	subs	r3, r5, r3
 8002624:	4099      	lsls	r1, r3
 8002626:	4308      	orrs	r0, r1
 8002628:	4681      	mov	r9, r0
 800262a:	464e      	mov	r6, r9
 800262c:	4643      	mov	r3, r8
 800262e:	1e71      	subs	r1, r6, #1
 8002630:	418e      	sbcs	r6, r1
 8002632:	431e      	orrs	r6, r3
 8002634:	e767      	b.n	8002506 <__aeabi_dsub+0x532>
 8002636:	1886      	adds	r6, r0, r2
 8002638:	4296      	cmp	r6, r2
 800263a:	419b      	sbcs	r3, r3
 800263c:	4461      	add	r1, ip
 800263e:	425b      	negs	r3, r3
 8002640:	18c9      	adds	r1, r1, r3
 8002642:	003d      	movs	r5, r7
 8002644:	e58c      	b.n	8002160 <__aeabi_dsub+0x18c>
 8002646:	4647      	mov	r7, r8
 8002648:	4337      	orrs	r7, r6
 800264a:	d0ce      	beq.n	80025ea <__aeabi_dsub+0x616>
 800264c:	2207      	movs	r2, #7
 800264e:	4641      	mov	r1, r8
 8002650:	4032      	ands	r2, r6
 8002652:	e649      	b.n	80022e8 <__aeabi_dsub+0x314>
 8002654:	2700      	movs	r7, #0
 8002656:	003a      	movs	r2, r7
 8002658:	e5e6      	b.n	8002228 <__aeabi_dsub+0x254>
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	000007ff 	.word	0x000007ff
 8002660:	ff7fffff 	.word	0xff7fffff

08002664 <__aeabi_d2iz>:
 8002664:	b530      	push	{r4, r5, lr}
 8002666:	4d14      	ldr	r5, [pc, #80]	; (80026b8 <__aeabi_d2iz+0x54>)
 8002668:	030a      	lsls	r2, r1, #12
 800266a:	004b      	lsls	r3, r1, #1
 800266c:	0b12      	lsrs	r2, r2, #12
 800266e:	0d5b      	lsrs	r3, r3, #21
 8002670:	0fc9      	lsrs	r1, r1, #31
 8002672:	2400      	movs	r4, #0
 8002674:	42ab      	cmp	r3, r5
 8002676:	dd11      	ble.n	800269c <__aeabi_d2iz+0x38>
 8002678:	4c10      	ldr	r4, [pc, #64]	; (80026bc <__aeabi_d2iz+0x58>)
 800267a:	42a3      	cmp	r3, r4
 800267c:	dc10      	bgt.n	80026a0 <__aeabi_d2iz+0x3c>
 800267e:	2480      	movs	r4, #128	; 0x80
 8002680:	0364      	lsls	r4, r4, #13
 8002682:	4322      	orrs	r2, r4
 8002684:	4c0e      	ldr	r4, [pc, #56]	; (80026c0 <__aeabi_d2iz+0x5c>)
 8002686:	1ae4      	subs	r4, r4, r3
 8002688:	2c1f      	cmp	r4, #31
 800268a:	dd0c      	ble.n	80026a6 <__aeabi_d2iz+0x42>
 800268c:	480d      	ldr	r0, [pc, #52]	; (80026c4 <__aeabi_d2iz+0x60>)
 800268e:	1ac3      	subs	r3, r0, r3
 8002690:	40da      	lsrs	r2, r3
 8002692:	0013      	movs	r3, r2
 8002694:	425c      	negs	r4, r3
 8002696:	2900      	cmp	r1, #0
 8002698:	d100      	bne.n	800269c <__aeabi_d2iz+0x38>
 800269a:	001c      	movs	r4, r3
 800269c:	0020      	movs	r0, r4
 800269e:	bd30      	pop	{r4, r5, pc}
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <__aeabi_d2iz+0x64>)
 80026a2:	18cc      	adds	r4, r1, r3
 80026a4:	e7fa      	b.n	800269c <__aeabi_d2iz+0x38>
 80026a6:	4d09      	ldr	r5, [pc, #36]	; (80026cc <__aeabi_d2iz+0x68>)
 80026a8:	40e0      	lsrs	r0, r4
 80026aa:	46ac      	mov	ip, r5
 80026ac:	4463      	add	r3, ip
 80026ae:	409a      	lsls	r2, r3
 80026b0:	0013      	movs	r3, r2
 80026b2:	4303      	orrs	r3, r0
 80026b4:	e7ee      	b.n	8002694 <__aeabi_d2iz+0x30>
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	000003fe 	.word	0x000003fe
 80026bc:	0000041d 	.word	0x0000041d
 80026c0:	00000433 	.word	0x00000433
 80026c4:	00000413 	.word	0x00000413
 80026c8:	7fffffff 	.word	0x7fffffff
 80026cc:	fffffbed 	.word	0xfffffbed

080026d0 <__aeabi_i2d>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	2800      	cmp	r0, #0
 80026d4:	d02d      	beq.n	8002732 <__aeabi_i2d+0x62>
 80026d6:	17c3      	asrs	r3, r0, #31
 80026d8:	18c5      	adds	r5, r0, r3
 80026da:	405d      	eors	r5, r3
 80026dc:	0fc4      	lsrs	r4, r0, #31
 80026de:	0028      	movs	r0, r5
 80026e0:	f000 f938 	bl	8002954 <__clzsi2>
 80026e4:	4b15      	ldr	r3, [pc, #84]	; (800273c <__aeabi_i2d+0x6c>)
 80026e6:	1a1b      	subs	r3, r3, r0
 80026e8:	055b      	lsls	r3, r3, #21
 80026ea:	0d5b      	lsrs	r3, r3, #21
 80026ec:	280a      	cmp	r0, #10
 80026ee:	dd15      	ble.n	800271c <__aeabi_i2d+0x4c>
 80026f0:	380b      	subs	r0, #11
 80026f2:	4085      	lsls	r5, r0
 80026f4:	2200      	movs	r2, #0
 80026f6:	032d      	lsls	r5, r5, #12
 80026f8:	0b2d      	lsrs	r5, r5, #12
 80026fa:	2100      	movs	r1, #0
 80026fc:	0010      	movs	r0, r2
 80026fe:	032d      	lsls	r5, r5, #12
 8002700:	0d0a      	lsrs	r2, r1, #20
 8002702:	0b2d      	lsrs	r5, r5, #12
 8002704:	0512      	lsls	r2, r2, #20
 8002706:	432a      	orrs	r2, r5
 8002708:	4d0d      	ldr	r5, [pc, #52]	; (8002740 <__aeabi_i2d+0x70>)
 800270a:	051b      	lsls	r3, r3, #20
 800270c:	402a      	ands	r2, r5
 800270e:	4313      	orrs	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	07e4      	lsls	r4, r4, #31
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	4323      	orrs	r3, r4
 8002718:	0019      	movs	r1, r3
 800271a:	bd70      	pop	{r4, r5, r6, pc}
 800271c:	0002      	movs	r2, r0
 800271e:	0029      	movs	r1, r5
 8002720:	3215      	adds	r2, #21
 8002722:	4091      	lsls	r1, r2
 8002724:	000a      	movs	r2, r1
 8002726:	210b      	movs	r1, #11
 8002728:	1a08      	subs	r0, r1, r0
 800272a:	40c5      	lsrs	r5, r0
 800272c:	032d      	lsls	r5, r5, #12
 800272e:	0b2d      	lsrs	r5, r5, #12
 8002730:	e7e3      	b.n	80026fa <__aeabi_i2d+0x2a>
 8002732:	2400      	movs	r4, #0
 8002734:	2300      	movs	r3, #0
 8002736:	2500      	movs	r5, #0
 8002738:	2200      	movs	r2, #0
 800273a:	e7de      	b.n	80026fa <__aeabi_i2d+0x2a>
 800273c:	0000041e 	.word	0x0000041e
 8002740:	800fffff 	.word	0x800fffff

08002744 <__aeabi_ui2d>:
 8002744:	b510      	push	{r4, lr}
 8002746:	1e04      	subs	r4, r0, #0
 8002748:	d025      	beq.n	8002796 <__aeabi_ui2d+0x52>
 800274a:	f000 f903 	bl	8002954 <__clzsi2>
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <__aeabi_ui2d+0x5c>)
 8002750:	1a1b      	subs	r3, r3, r0
 8002752:	055b      	lsls	r3, r3, #21
 8002754:	0d5b      	lsrs	r3, r3, #21
 8002756:	280a      	cmp	r0, #10
 8002758:	dd12      	ble.n	8002780 <__aeabi_ui2d+0x3c>
 800275a:	380b      	subs	r0, #11
 800275c:	4084      	lsls	r4, r0
 800275e:	2200      	movs	r2, #0
 8002760:	0324      	lsls	r4, r4, #12
 8002762:	0b24      	lsrs	r4, r4, #12
 8002764:	2100      	movs	r1, #0
 8002766:	0010      	movs	r0, r2
 8002768:	0324      	lsls	r4, r4, #12
 800276a:	0d0a      	lsrs	r2, r1, #20
 800276c:	0b24      	lsrs	r4, r4, #12
 800276e:	0512      	lsls	r2, r2, #20
 8002770:	4322      	orrs	r2, r4
 8002772:	4c0c      	ldr	r4, [pc, #48]	; (80027a4 <__aeabi_ui2d+0x60>)
 8002774:	051b      	lsls	r3, r3, #20
 8002776:	4022      	ands	r2, r4
 8002778:	4313      	orrs	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	0859      	lsrs	r1, r3, #1
 800277e:	bd10      	pop	{r4, pc}
 8002780:	0002      	movs	r2, r0
 8002782:	0021      	movs	r1, r4
 8002784:	3215      	adds	r2, #21
 8002786:	4091      	lsls	r1, r2
 8002788:	000a      	movs	r2, r1
 800278a:	210b      	movs	r1, #11
 800278c:	1a08      	subs	r0, r1, r0
 800278e:	40c4      	lsrs	r4, r0
 8002790:	0324      	lsls	r4, r4, #12
 8002792:	0b24      	lsrs	r4, r4, #12
 8002794:	e7e6      	b.n	8002764 <__aeabi_ui2d+0x20>
 8002796:	2300      	movs	r3, #0
 8002798:	2400      	movs	r4, #0
 800279a:	2200      	movs	r2, #0
 800279c:	e7e2      	b.n	8002764 <__aeabi_ui2d+0x20>
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	0000041e 	.word	0x0000041e
 80027a4:	800fffff 	.word	0x800fffff

080027a8 <__aeabi_f2d>:
 80027a8:	0041      	lsls	r1, r0, #1
 80027aa:	0e09      	lsrs	r1, r1, #24
 80027ac:	1c4b      	adds	r3, r1, #1
 80027ae:	b570      	push	{r4, r5, r6, lr}
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	0246      	lsls	r6, r0, #9
 80027b4:	0a75      	lsrs	r5, r6, #9
 80027b6:	0fc4      	lsrs	r4, r0, #31
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	dd14      	ble.n	80027e6 <__aeabi_f2d+0x3e>
 80027bc:	23e0      	movs	r3, #224	; 0xe0
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	076d      	lsls	r5, r5, #29
 80027c2:	0b36      	lsrs	r6, r6, #12
 80027c4:	18cb      	adds	r3, r1, r3
 80027c6:	2100      	movs	r1, #0
 80027c8:	0d0a      	lsrs	r2, r1, #20
 80027ca:	0028      	movs	r0, r5
 80027cc:	0512      	lsls	r2, r2, #20
 80027ce:	4d1c      	ldr	r5, [pc, #112]	; (8002840 <__aeabi_f2d+0x98>)
 80027d0:	4332      	orrs	r2, r6
 80027d2:	055b      	lsls	r3, r3, #21
 80027d4:	402a      	ands	r2, r5
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	4313      	orrs	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	07e4      	lsls	r4, r4, #31
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	4323      	orrs	r3, r4
 80027e2:	0019      	movs	r1, r3
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
 80027e6:	2900      	cmp	r1, #0
 80027e8:	d114      	bne.n	8002814 <__aeabi_f2d+0x6c>
 80027ea:	2d00      	cmp	r5, #0
 80027ec:	d01e      	beq.n	800282c <__aeabi_f2d+0x84>
 80027ee:	0028      	movs	r0, r5
 80027f0:	f000 f8b0 	bl	8002954 <__clzsi2>
 80027f4:	280a      	cmp	r0, #10
 80027f6:	dc1c      	bgt.n	8002832 <__aeabi_f2d+0x8a>
 80027f8:	230b      	movs	r3, #11
 80027fa:	002a      	movs	r2, r5
 80027fc:	1a1b      	subs	r3, r3, r0
 80027fe:	40da      	lsrs	r2, r3
 8002800:	0003      	movs	r3, r0
 8002802:	3315      	adds	r3, #21
 8002804:	409d      	lsls	r5, r3
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <__aeabi_f2d+0x9c>)
 8002808:	0312      	lsls	r2, r2, #12
 800280a:	1a1b      	subs	r3, r3, r0
 800280c:	055b      	lsls	r3, r3, #21
 800280e:	0b16      	lsrs	r6, r2, #12
 8002810:	0d5b      	lsrs	r3, r3, #21
 8002812:	e7d8      	b.n	80027c6 <__aeabi_f2d+0x1e>
 8002814:	2d00      	cmp	r5, #0
 8002816:	d006      	beq.n	8002826 <__aeabi_f2d+0x7e>
 8002818:	0b32      	lsrs	r2, r6, #12
 800281a:	2680      	movs	r6, #128	; 0x80
 800281c:	0336      	lsls	r6, r6, #12
 800281e:	076d      	lsls	r5, r5, #29
 8002820:	4316      	orrs	r6, r2
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <__aeabi_f2d+0xa0>)
 8002824:	e7cf      	b.n	80027c6 <__aeabi_f2d+0x1e>
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <__aeabi_f2d+0xa0>)
 8002828:	2600      	movs	r6, #0
 800282a:	e7cc      	b.n	80027c6 <__aeabi_f2d+0x1e>
 800282c:	2300      	movs	r3, #0
 800282e:	2600      	movs	r6, #0
 8002830:	e7c9      	b.n	80027c6 <__aeabi_f2d+0x1e>
 8002832:	0003      	movs	r3, r0
 8002834:	002a      	movs	r2, r5
 8002836:	3b0b      	subs	r3, #11
 8002838:	409a      	lsls	r2, r3
 800283a:	2500      	movs	r5, #0
 800283c:	e7e3      	b.n	8002806 <__aeabi_f2d+0x5e>
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	800fffff 	.word	0x800fffff
 8002844:	00000389 	.word	0x00000389
 8002848:	000007ff 	.word	0x000007ff

0800284c <__aeabi_d2f>:
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	004c      	lsls	r4, r1, #1
 8002850:	0d64      	lsrs	r4, r4, #21
 8002852:	030b      	lsls	r3, r1, #12
 8002854:	1c62      	adds	r2, r4, #1
 8002856:	0a5b      	lsrs	r3, r3, #9
 8002858:	0f46      	lsrs	r6, r0, #29
 800285a:	0552      	lsls	r2, r2, #21
 800285c:	0fc9      	lsrs	r1, r1, #31
 800285e:	431e      	orrs	r6, r3
 8002860:	00c5      	lsls	r5, r0, #3
 8002862:	0d52      	lsrs	r2, r2, #21
 8002864:	2a01      	cmp	r2, #1
 8002866:	dd29      	ble.n	80028bc <__aeabi_d2f+0x70>
 8002868:	4b37      	ldr	r3, [pc, #220]	; (8002948 <__aeabi_d2f+0xfc>)
 800286a:	18e7      	adds	r7, r4, r3
 800286c:	2ffe      	cmp	r7, #254	; 0xfe
 800286e:	dc1c      	bgt.n	80028aa <__aeabi_d2f+0x5e>
 8002870:	2f00      	cmp	r7, #0
 8002872:	dd3b      	ble.n	80028ec <__aeabi_d2f+0xa0>
 8002874:	0180      	lsls	r0, r0, #6
 8002876:	1e43      	subs	r3, r0, #1
 8002878:	4198      	sbcs	r0, r3
 800287a:	2207      	movs	r2, #7
 800287c:	00f3      	lsls	r3, r6, #3
 800287e:	0f6d      	lsrs	r5, r5, #29
 8002880:	4303      	orrs	r3, r0
 8002882:	432b      	orrs	r3, r5
 8002884:	401a      	ands	r2, r3
 8002886:	2a00      	cmp	r2, #0
 8002888:	d004      	beq.n	8002894 <__aeabi_d2f+0x48>
 800288a:	220f      	movs	r2, #15
 800288c:	401a      	ands	r2, r3
 800288e:	2a04      	cmp	r2, #4
 8002890:	d000      	beq.n	8002894 <__aeabi_d2f+0x48>
 8002892:	3304      	adds	r3, #4
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	04d2      	lsls	r2, r2, #19
 8002898:	401a      	ands	r2, r3
 800289a:	d024      	beq.n	80028e6 <__aeabi_d2f+0x9a>
 800289c:	3701      	adds	r7, #1
 800289e:	b2fa      	uxtb	r2, r7
 80028a0:	2fff      	cmp	r7, #255	; 0xff
 80028a2:	d002      	beq.n	80028aa <__aeabi_d2f+0x5e>
 80028a4:	019b      	lsls	r3, r3, #6
 80028a6:	0a58      	lsrs	r0, r3, #9
 80028a8:	e001      	b.n	80028ae <__aeabi_d2f+0x62>
 80028aa:	22ff      	movs	r2, #255	; 0xff
 80028ac:	2000      	movs	r0, #0
 80028ae:	0240      	lsls	r0, r0, #9
 80028b0:	05d2      	lsls	r2, r2, #23
 80028b2:	0a40      	lsrs	r0, r0, #9
 80028b4:	07c9      	lsls	r1, r1, #31
 80028b6:	4310      	orrs	r0, r2
 80028b8:	4308      	orrs	r0, r1
 80028ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028bc:	4335      	orrs	r5, r6
 80028be:	2c00      	cmp	r4, #0
 80028c0:	d104      	bne.n	80028cc <__aeabi_d2f+0x80>
 80028c2:	2d00      	cmp	r5, #0
 80028c4:	d10a      	bne.n	80028dc <__aeabi_d2f+0x90>
 80028c6:	2200      	movs	r2, #0
 80028c8:	2000      	movs	r0, #0
 80028ca:	e7f0      	b.n	80028ae <__aeabi_d2f+0x62>
 80028cc:	2d00      	cmp	r5, #0
 80028ce:	d0ec      	beq.n	80028aa <__aeabi_d2f+0x5e>
 80028d0:	2080      	movs	r0, #128	; 0x80
 80028d2:	03c0      	lsls	r0, r0, #15
 80028d4:	4330      	orrs	r0, r6
 80028d6:	22ff      	movs	r2, #255	; 0xff
 80028d8:	e7e9      	b.n	80028ae <__aeabi_d2f+0x62>
 80028da:	2400      	movs	r4, #0
 80028dc:	2300      	movs	r3, #0
 80028de:	025b      	lsls	r3, r3, #9
 80028e0:	0a58      	lsrs	r0, r3, #9
 80028e2:	b2e2      	uxtb	r2, r4
 80028e4:	e7e3      	b.n	80028ae <__aeabi_d2f+0x62>
 80028e6:	08db      	lsrs	r3, r3, #3
 80028e8:	003c      	movs	r4, r7
 80028ea:	e7f8      	b.n	80028de <__aeabi_d2f+0x92>
 80028ec:	003b      	movs	r3, r7
 80028ee:	3317      	adds	r3, #23
 80028f0:	dbf3      	blt.n	80028da <__aeabi_d2f+0x8e>
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	4333      	orrs	r3, r6
 80028f8:	261e      	movs	r6, #30
 80028fa:	1bf6      	subs	r6, r6, r7
 80028fc:	2e1f      	cmp	r6, #31
 80028fe:	dd14      	ble.n	800292a <__aeabi_d2f+0xde>
 8002900:	2202      	movs	r2, #2
 8002902:	4252      	negs	r2, r2
 8002904:	1bd7      	subs	r7, r2, r7
 8002906:	001a      	movs	r2, r3
 8002908:	40fa      	lsrs	r2, r7
 800290a:	0017      	movs	r7, r2
 800290c:	2e20      	cmp	r6, #32
 800290e:	d004      	beq.n	800291a <__aeabi_d2f+0xce>
 8002910:	4a0e      	ldr	r2, [pc, #56]	; (800294c <__aeabi_d2f+0x100>)
 8002912:	4694      	mov	ip, r2
 8002914:	4464      	add	r4, ip
 8002916:	40a3      	lsls	r3, r4
 8002918:	431d      	orrs	r5, r3
 800291a:	002b      	movs	r3, r5
 800291c:	1e5d      	subs	r5, r3, #1
 800291e:	41ab      	sbcs	r3, r5
 8002920:	2207      	movs	r2, #7
 8002922:	433b      	orrs	r3, r7
 8002924:	401a      	ands	r2, r3
 8002926:	2700      	movs	r7, #0
 8002928:	e7ad      	b.n	8002886 <__aeabi_d2f+0x3a>
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <__aeabi_d2f+0x104>)
 800292c:	0028      	movs	r0, r5
 800292e:	18a2      	adds	r2, r4, r2
 8002930:	4095      	lsls	r5, r2
 8002932:	4093      	lsls	r3, r2
 8002934:	1e6c      	subs	r4, r5, #1
 8002936:	41a5      	sbcs	r5, r4
 8002938:	40f0      	lsrs	r0, r6
 800293a:	2207      	movs	r2, #7
 800293c:	432b      	orrs	r3, r5
 800293e:	4303      	orrs	r3, r0
 8002940:	401a      	ands	r2, r3
 8002942:	2700      	movs	r7, #0
 8002944:	e79f      	b.n	8002886 <__aeabi_d2f+0x3a>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	fffffc80 	.word	0xfffffc80
 800294c:	fffffca2 	.word	0xfffffca2
 8002950:	fffffc82 	.word	0xfffffc82

08002954 <__clzsi2>:
 8002954:	211c      	movs	r1, #28
 8002956:	2301      	movs	r3, #1
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	4298      	cmp	r0, r3
 800295c:	d301      	bcc.n	8002962 <__clzsi2+0xe>
 800295e:	0c00      	lsrs	r0, r0, #16
 8002960:	3910      	subs	r1, #16
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	4298      	cmp	r0, r3
 8002966:	d301      	bcc.n	800296c <__clzsi2+0x18>
 8002968:	0a00      	lsrs	r0, r0, #8
 800296a:	3908      	subs	r1, #8
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	4298      	cmp	r0, r3
 8002970:	d301      	bcc.n	8002976 <__clzsi2+0x22>
 8002972:	0900      	lsrs	r0, r0, #4
 8002974:	3904      	subs	r1, #4
 8002976:	a202      	add	r2, pc, #8	; (adr r2, 8002980 <__clzsi2+0x2c>)
 8002978:	5c10      	ldrb	r0, [r2, r0]
 800297a:	1840      	adds	r0, r0, r1
 800297c:	4770      	bx	lr
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	02020304 	.word	0x02020304
 8002984:	01010101 	.word	0x01010101
	...

08002990 <__clzdi2>:
 8002990:	b510      	push	{r4, lr}
 8002992:	2900      	cmp	r1, #0
 8002994:	d103      	bne.n	800299e <__clzdi2+0xe>
 8002996:	f7ff ffdd 	bl	8002954 <__clzsi2>
 800299a:	3020      	adds	r0, #32
 800299c:	e002      	b.n	80029a4 <__clzdi2+0x14>
 800299e:	1c08      	adds	r0, r1, #0
 80029a0:	f7ff ffd8 	bl	8002954 <__clzsi2>
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)

080029a8 <set_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time (void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	sTime.Hours = 0x00;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <set_time+0x74>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x00;
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <set_time+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x00;
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <set_time+0x74>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <set_time+0x74>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <set_time+0x74>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80029ca:	4914      	ldr	r1, [pc, #80]	; (8002a1c <set_time+0x74>)
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <set_time+0x78>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	0018      	movs	r0, r3
 80029d2:	f003 ffdf 	bl	8006994 <HAL_RTC_SetTime>
 80029d6:	1e03      	subs	r3, r0, #0
 80029d8:	d001      	beq.n	80029de <set_time+0x36>
	{
		Error_Handler();
 80029da:	f001 f899 	bl	8003b10 <Error_Handler>
	}
	sDate.WeekDay = 01;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <set_time+0x7c>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
	sDate.Month = 0x01;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <set_time+0x7c>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	705a      	strb	r2, [r3, #1]
	sDate.Date = 0x01;
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <set_time+0x7c>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	709a      	strb	r2, [r3, #2]
	sDate.Year = 0x20;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <set_time+0x7c>)
 80029f2:	2220      	movs	r2, #32
 80029f4:	70da      	strb	r2, [r3, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80029f6:	490b      	ldr	r1, [pc, #44]	; (8002a24 <set_time+0x7c>)
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <set_time+0x78>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	0018      	movs	r0, r3
 80029fe:	f004 f8e9 	bl	8006bd4 <HAL_RTC_SetDate>
 8002a02:	1e03      	subs	r3, r0, #0
 8002a04:	d001      	beq.n	8002a0a <set_time+0x62>
	{
		Error_Handler();
 8002a06:	f001 f883 	bl	8003b10 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8002a0a:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <set_time+0x80>)
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <set_time+0x78>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	0018      	movs	r0, r3
 8002a12:	f004 fa72 	bl	8006efa <HAL_RTCEx_BKUPWrite>
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	2000009c 	.word	0x2000009c
 8002a20:	20000634 	.word	0x20000634
 8002a24:	200000b0 	.word	0x200000b0
 8002a28:	000032f2 	.word	0x000032f2

08002a2c <get_time>:

void get_time(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	//Get current time from RTC
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002a30:	4907      	ldr	r1, [pc, #28]	; (8002a50 <get_time+0x24>)
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <get_time+0x28>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	0018      	movs	r0, r3
 8002a38:	f004 f870 	bl	8006b1c <HAL_RTC_GetTime>
	//Get current date from RTC
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002a3c:	4906      	ldr	r1, [pc, #24]	; (8002a58 <get_time+0x2c>)
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <get_time+0x28>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	0018      	movs	r0, r3
 8002a44:	f004 f974 	bl	8006d30 <HAL_RTC_GetDate>
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	2000061c 	.word	0x2000061c
 8002a54:	20000634 	.word	0x20000634
 8002a58:	200004dc 	.word	0x200004dc

08002a5c <display_time>:

void display_time (void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	//Display time: hh:mm:ss
	sprintf((char*)time, "%02d:%02d", gTime.Hours, gTime.Minutes);
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <display_time+0x48>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	001a      	movs	r2, r3
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <display_time+0x48>)
 8002a68:	785b      	ldrb	r3, [r3, #1]
 8002a6a:	490f      	ldr	r1, [pc, #60]	; (8002aa8 <display_time+0x4c>)
 8002a6c:	480f      	ldr	r0, [pc, #60]	; (8002aac <display_time+0x50>)
 8002a6e:	f005 f86d 	bl	8007b4c <siprintf>
	if (disp_changed)
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <display_time+0x54>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <display_time+0x28>
	{
		SSD1306_Clear();
 8002a7a:	f001 fa8d 	bl	8003f98 <SSD1306_Clear>
		disp_changed = false;
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <display_time+0x54>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(35, 40);
 8002a84:	2128      	movs	r1, #40	; 0x28
 8002a86:	2023      	movs	r0, #35	; 0x23
 8002a88:	f001 f9c6 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts(time, &Font_11x18, 1);
 8002a8c:	4909      	ldr	r1, [pc, #36]	; (8002ab4 <display_time+0x58>)
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <display_time+0x50>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	0018      	movs	r0, r3
 8002a94:	f001 fa5a 	bl	8003f4c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002a98:	f001 f902 	bl	8003ca0 <SSD1306_UpdateScreen>
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	2000061c 	.word	0x2000061c
 8002aa8:	08009910 	.word	0x08009910
 8002aac:	200006f0 	.word	0x200006f0
 8002ab0:	200000c1 	.word	0x200000c1
 8002ab4:	20000008 	.word	0x20000008

08002ab8 <display_date>:

void display_date (void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	//Display date: dd-mm-yy
	sprintf((char*)today, "%02d-%02d", gDate.Date, gDate.Month);
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <display_date+0x70>)
 8002abe:	789b      	ldrb	r3, [r3, #2]
 8002ac0:	001a      	movs	r2, r3
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <display_date+0x70>)
 8002ac4:	785b      	ldrb	r3, [r3, #1]
 8002ac6:	4919      	ldr	r1, [pc, #100]	; (8002b2c <display_date+0x74>)
 8002ac8:	4819      	ldr	r0, [pc, #100]	; (8002b30 <display_date+0x78>)
 8002aca:	f005 f83f 	bl	8007b4c <siprintf>
	sprintf((char*)today_year, "%d", 2000 + gDate.Year);
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <display_date+0x70>)
 8002ad0:	78db      	ldrb	r3, [r3, #3]
 8002ad2:	22fa      	movs	r2, #250	; 0xfa
 8002ad4:	00d2      	lsls	r2, r2, #3
 8002ad6:	189a      	adds	r2, r3, r2
 8002ad8:	4916      	ldr	r1, [pc, #88]	; (8002b34 <display_date+0x7c>)
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <display_date+0x80>)
 8002adc:	0018      	movs	r0, r3
 8002ade:	f005 f835 	bl	8007b4c <siprintf>
	if (disp_changed)
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <display_date+0x84>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <display_date+0x3c>
	{
		SSD1306_Clear();
 8002aea:	f001 fa55 	bl	8003f98 <SSD1306_Clear>
		disp_changed = false;
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <display_date+0x84>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(38, 32);
 8002af4:	2120      	movs	r1, #32
 8002af6:	2026      	movs	r0, #38	; 0x26
 8002af8:	f001 f98e 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts(today, &Font_11x18, 1);
 8002afc:	4910      	ldr	r1, [pc, #64]	; (8002b40 <display_date+0x88>)
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <display_date+0x78>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	0018      	movs	r0, r3
 8002b04:	f001 fa22 	bl	8003f4c <SSD1306_Puts>
	SSD1306_GotoXY(50, 50);
 8002b08:	2132      	movs	r1, #50	; 0x32
 8002b0a:	2032      	movs	r0, #50	; 0x32
 8002b0c:	f001 f984 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts(today_year, &Font_7x10, 1);
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <display_date+0x8c>)
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <display_date+0x80>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	0018      	movs	r0, r3
 8002b18:	f001 fa18 	bl	8003f4c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002b1c:	f001 f8c0 	bl	8003ca0 <SSD1306_UpdateScreen>
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	200004dc 	.word	0x200004dc
 8002b2c:	0800991c 	.word	0x0800991c
 8002b30:	200006fc 	.word	0x200006fc
 8002b34:	08009928 	.word	0x08009928
 8002b38:	2000070c 	.word	0x2000070c
 8002b3c:	200000c1 	.word	0x200000c1
 8002b40:	20000008 	.word	0x20000008
 8002b44:	20000000 	.word	0x20000000

08002b48 <get_temp>:

HAL_StatusTypeDef get_temp(uint8_t address, uint8_t config, float *sensor_temperature)
{
 8002b48:	b5b0      	push	{r4, r5, r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af04      	add	r7, sp, #16
 8002b4e:	603a      	str	r2, [r7, #0]
 8002b50:	1dfb      	adds	r3, r7, #7
 8002b52:	1c02      	adds	r2, r0, #0
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	1dbb      	adds	r3, r7, #6
 8002b58:	1c0a      	adds	r2, r1, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	uint8_t Data[2];//Will receive 2 bytes from the sensor

	//Send config
	ret = HAL_I2C_Mem_Write(&hi2c3, (uint8_t)(address), 0x01, 1, &config, 1, 50);//0x01 is the config register of MAX30205
 8002b5c:	1dfb      	adds	r3, r7, #7
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b299      	uxth	r1, r3
 8002b62:	250f      	movs	r5, #15
 8002b64:	197c      	adds	r4, r7, r5
 8002b66:	482a      	ldr	r0, [pc, #168]	; (8002c10 <get_temp+0xc8>)
 8002b68:	2332      	movs	r3, #50	; 0x32
 8002b6a:	9302      	str	r3, [sp, #8]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	1dbb      	adds	r3, r7, #6
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2301      	movs	r3, #1
 8002b76:	2201      	movs	r2, #1
 8002b78:	f002 f94a 	bl	8004e10 <HAL_I2C_Mem_Write>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	7023      	strb	r3, [r4, #0]
	//Check for errors
	if(ret != HAL_OK)
 8002b80:	197b      	adds	r3, r7, r5
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <get_temp+0x48>
	{
		return ret;
 8002b88:	230f      	movs	r3, #15
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	e03a      	b.n	8002c06 <get_temp+0xbe>
	}

	HAL_Delay(500);
 8002b90:	23fa      	movs	r3, #250	; 0xfa
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	0018      	movs	r0, r3
 8002b96:	f001 fd01 	bl	800459c <HAL_Delay>

	//Get temperature
	ret = HAL_I2C_Mem_Read(&hi2c3, (uint8_t)(address) | 0x01, 0x00, 1, Data, 2, 50);//(uint8_t)(address) | 0x01 = must add 0x01 to address to read (1), 0x00 is the temp register of MAX30205
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	b299      	uxth	r1, r3
 8002ba6:	250f      	movs	r5, #15
 8002ba8:	197c      	adds	r4, r7, r5
 8002baa:	4819      	ldr	r0, [pc, #100]	; (8002c10 <get_temp+0xc8>)
 8002bac:	2332      	movs	r3, #50	; 0x32
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	230c      	movs	r3, #12
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f002 fa55 	bl	800506c <HAL_I2C_Mem_Read>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	7023      	strb	r3, [r4, #0]
	if(ret != HAL_OK)
 8002bc6:	197b      	adds	r3, r7, r5
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <get_temp+0x8e>
	{
		return ret;
 8002bce:	230f      	movs	r3, #15
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	e017      	b.n	8002c06 <get_temp+0xbe>
	}

	//Convert to temperature
	//*sensor_temperature = 0.109*(((Data[0] << 8) | Data[1])*0.00390625) + 33.07;//Add the two received bytes together.
	*sensor_temperature = ((Data[0] << 8) | Data[1])*0.00390625;//Add the two received bytes together.
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	18bb      	adds	r3, r7, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	18ba      	adds	r2, r7, r2
 8002be0:	7852      	ldrb	r2, [r2, #1]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7ff fd73 	bl	80026d0 <__aeabi_i2d>
 8002bea:	2200      	movs	r2, #0
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <get_temp+0xcc>)
 8002bee:	f7fe ff7f 	bl	8001af0 <__aeabi_dmul>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	000c      	movs	r4, r1
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	0021      	movs	r1, r4
 8002bfa:	f7ff fe27 	bl	800284c <__aeabi_d2f>
 8002bfe:	1c02      	adds	r2, r0, #0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b004      	add	sp, #16
 8002c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	200004e0 	.word	0x200004e0
 8002c14:	3f700000 	.word	0x3f700000

08002c18 <display_temp>:

void display_temp(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
	if (disp_changed)
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <display_temp+0x70>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <display_temp+0x16>
	{
		SSD1306_Clear();
 8002c24:	f001 f9b8 	bl	8003f98 <SSD1306_Clear>
		disp_changed = false;
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <display_temp+0x70>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
	}
	gcvt(sens_temp, 3, temp);//Float to string
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <display_temp+0x74>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	1c18      	adds	r0, r3, #0
 8002c34:	f7ff fdb8 	bl	80027a8 <__aeabi_f2d>
 8002c38:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <display_temp+0x78>)
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	f004 ff2e 	bl	8007a9c <gcvt>
	SSD1306_GotoXY(35, 40);
 8002c40:	2128      	movs	r1, #40	; 0x28
 8002c42:	2023      	movs	r0, #35	; 0x23
 8002c44:	f001 f8e8 	bl	8003e18 <SSD1306_GotoXY>
    SSD1306_Puts(temp, &Font_11x18, 1);
 8002c48:	4912      	ldr	r1, [pc, #72]	; (8002c94 <display_temp+0x7c>)
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <display_temp+0x78>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f001 f97c 	bl	8003f4c <SSD1306_Puts>
    SSD1306_GotoXY(77, 35);
 8002c54:	2123      	movs	r1, #35	; 0x23
 8002c56:	204d      	movs	r0, #77	; 0x4d
 8002c58:	f001 f8de 	bl	8003e18 <SSD1306_GotoXY>
    SSD1306_Puts("o", &Font_7x10, 1);
 8002c5c:	490e      	ldr	r1, [pc, #56]	; (8002c98 <display_temp+0x80>)
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <display_temp+0x84>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	0018      	movs	r0, r3
 8002c64:	f001 f972 	bl	8003f4c <SSD1306_Puts>
    SSD1306_GotoXY(85, 40);
 8002c68:	2128      	movs	r1, #40	; 0x28
 8002c6a:	2055      	movs	r0, #85	; 0x55
 8002c6c:	f001 f8d4 	bl	8003e18 <SSD1306_GotoXY>
    SSD1306_Puts("C", &Font_11x18, 1);
 8002c70:	4908      	ldr	r1, [pc, #32]	; (8002c94 <display_temp+0x7c>)
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <display_temp+0x88>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	0018      	movs	r0, r3
 8002c78:	f001 f968 	bl	8003f4c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002c7c:	f001 f810 	bl	8003ca0 <SSD1306_UpdateScreen>
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	200000c1 	.word	0x200000c1
 8002c8c:	200000c4 	.word	0x200000c4
 8002c90:	2000057c 	.word	0x2000057c
 8002c94:	20000008 	.word	0x20000008
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	0800992c 	.word	0x0800992c
 8002ca0:	08009930 	.word	0x08009930

08002ca4 <display_set_hour>:

void display_set_hour(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	if (disp_changed)
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <display_set_hour+0x58>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <display_set_hour+0x16>
	{
		SSD1306_Clear();
 8002cb0:	f001 f972 	bl	8003f98 <SSD1306_Clear>
		disp_changed = false;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <display_set_hour+0x58>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(33, 32);
 8002cba:	2120      	movs	r1, #32
 8002cbc:	2021      	movs	r0, #33	; 0x21
 8002cbe:	f001 f8ab 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts("Set Hour", &Font_7x10, 1);
 8002cc2:	490f      	ldr	r1, [pc, #60]	; (8002d00 <display_set_hour+0x5c>)
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <display_set_hour+0x60>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f001 f93f 	bl	8003f4c <SSD1306_Puts>
	sprintf(hour, "%d", set_hour);
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <display_set_hour+0x64>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	490d      	ldr	r1, [pc, #52]	; (8002d0c <display_set_hour+0x68>)
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <display_set_hour+0x6c>)
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f004 ff37 	bl	8007b4c <siprintf>
	SSD1306_GotoXY(60, 45);
 8002cde:	212d      	movs	r1, #45	; 0x2d
 8002ce0:	203c      	movs	r0, #60	; 0x3c
 8002ce2:	f001 f899 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts(hour, &Font_11x18, 1);
 8002ce6:	490b      	ldr	r1, [pc, #44]	; (8002d14 <display_set_hour+0x70>)
 8002ce8:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <display_set_hour+0x6c>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	0018      	movs	r0, r3
 8002cee:	f001 f92d 	bl	8003f4c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002cf2:	f000 ffd5 	bl	8003ca0 <SSD1306_UpdateScreen>
}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	200000c1 	.word	0x200000c1
 8002d00:	20000000 	.word	0x20000000
 8002d04:	08009934 	.word	0x08009934
 8002d08:	200000b9 	.word	0x200000b9
 8002d0c:	08009928 	.word	0x08009928
 8002d10:	20000630 	.word	0x20000630
 8002d14:	20000008 	.word	0x20000008

08002d18 <display_set_min>:

void display_set_min(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	if (disp_changed)
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <display_set_min+0x58>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <display_set_min+0x16>
	{
		SSD1306_Clear();
 8002d24:	f001 f938 	bl	8003f98 <SSD1306_Clear>
		disp_changed = false;
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <display_set_min+0x58>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(33, 32);
 8002d2e:	2120      	movs	r1, #32
 8002d30:	2021      	movs	r0, #33	; 0x21
 8002d32:	f001 f871 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts("Set Min", &Font_7x10, 1);
 8002d36:	490f      	ldr	r1, [pc, #60]	; (8002d74 <display_set_min+0x5c>)
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <display_set_min+0x60>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f001 f905 	bl	8003f4c <SSD1306_Puts>
	sprintf(min, "%d", set_min);
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <display_set_min+0x64>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	001a      	movs	r2, r3
 8002d48:	490d      	ldr	r1, [pc, #52]	; (8002d80 <display_set_min+0x68>)
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <display_set_min+0x6c>)
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f004 fefd 	bl	8007b4c <siprintf>
	SSD1306_GotoXY(60, 45);
 8002d52:	212d      	movs	r1, #45	; 0x2d
 8002d54:	203c      	movs	r0, #60	; 0x3c
 8002d56:	f001 f85f 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts(min, &Font_11x18, 1);
 8002d5a:	490b      	ldr	r1, [pc, #44]	; (8002d88 <display_set_min+0x70>)
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <display_set_min+0x6c>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	0018      	movs	r0, r3
 8002d62:	f001 f8f3 	bl	8003f4c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002d66:	f000 ff9b 	bl	8003ca0 <SSD1306_UpdateScreen>
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200000c1 	.word	0x200000c1
 8002d74:	20000000 	.word	0x20000000
 8002d78:	08009940 	.word	0x08009940
 8002d7c:	200000ba 	.word	0x200000ba
 8002d80:	08009928 	.word	0x08009928
 8002d84:	20000714 	.word	0x20000714
 8002d88:	20000008 	.word	0x20000008

08002d8c <display_set_date>:

void display_set_date(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
	if (disp_changed)
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <display_set_date+0x58>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <display_set_date+0x16>
	{
		SSD1306_Clear();
 8002d98:	f001 f8fe 	bl	8003f98 <SSD1306_Clear>
		disp_changed = false;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <display_set_date+0x58>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(33, 32);
 8002da2:	2120      	movs	r1, #32
 8002da4:	2021      	movs	r0, #33	; 0x21
 8002da6:	f001 f837 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts("Set Date", &Font_7x10, 1);
 8002daa:	490f      	ldr	r1, [pc, #60]	; (8002de8 <display_set_date+0x5c>)
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <display_set_date+0x60>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	0018      	movs	r0, r3
 8002db2:	f001 f8cb 	bl	8003f4c <SSD1306_Puts>
	sprintf(date, "%d", set_date);
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <display_set_date+0x64>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	001a      	movs	r2, r3
 8002dbc:	490d      	ldr	r1, [pc, #52]	; (8002df4 <display_set_date+0x68>)
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <display_set_date+0x6c>)
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f004 fec3 	bl	8007b4c <siprintf>
	SSD1306_GotoXY(60, 45);
 8002dc6:	212d      	movs	r1, #45	; 0x2d
 8002dc8:	203c      	movs	r0, #60	; 0x3c
 8002dca:	f001 f825 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts(date, &Font_11x18, 1);
 8002dce:	490b      	ldr	r1, [pc, #44]	; (8002dfc <display_set_date+0x70>)
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <display_set_date+0x6c>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f001 f8b9 	bl	8003f4c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002dda:	f000 ff61 	bl	8003ca0 <SSD1306_UpdateScreen>
}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200000c1 	.word	0x200000c1
 8002de8:	20000000 	.word	0x20000000
 8002dec:	08009948 	.word	0x08009948
 8002df0:	200000bb 	.word	0x200000bb
 8002df4:	08009928 	.word	0x08009928
 8002df8:	200007b4 	.word	0x200007b4
 8002dfc:	20000008 	.word	0x20000008

08002e00 <display_set_month>:

void display_set_month(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	if (disp_changed)
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <display_set_month+0x58>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <display_set_month+0x16>
	{
		SSD1306_Clear();
 8002e0c:	f001 f8c4 	bl	8003f98 <SSD1306_Clear>
		disp_changed = false;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <display_set_month+0x58>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(33, 32);
 8002e16:	2120      	movs	r1, #32
 8002e18:	2021      	movs	r0, #33	; 0x21
 8002e1a:	f000 fffd 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts("Set Month", &Font_7x10, 1);
 8002e1e:	490f      	ldr	r1, [pc, #60]	; (8002e5c <display_set_month+0x5c>)
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <display_set_month+0x60>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	0018      	movs	r0, r3
 8002e26:	f001 f891 	bl	8003f4c <SSD1306_Puts>
	sprintf(month, "%d", set_month);
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <display_set_month+0x64>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	001a      	movs	r2, r3
 8002e30:	490d      	ldr	r1, [pc, #52]	; (8002e68 <display_set_month+0x68>)
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <display_set_month+0x6c>)
 8002e34:	0018      	movs	r0, r3
 8002e36:	f004 fe89 	bl	8007b4c <siprintf>
	SSD1306_GotoXY(60, 45);
 8002e3a:	212d      	movs	r1, #45	; 0x2d
 8002e3c:	203c      	movs	r0, #60	; 0x3c
 8002e3e:	f000 ffeb 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts(month, &Font_11x18, 1);
 8002e42:	490b      	ldr	r1, [pc, #44]	; (8002e70 <display_set_month+0x70>)
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <display_set_month+0x6c>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f001 f87f 	bl	8003f4c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002e4e:	f000 ff27 	bl	8003ca0 <SSD1306_UpdateScreen>
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	200000c1 	.word	0x200000c1
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	08009954 	.word	0x08009954
 8002e64:	200000bc 	.word	0x200000bc
 8002e68:	08009928 	.word	0x08009928
 8002e6c:	20000578 	.word	0x20000578
 8002e70:	20000008 	.word	0x20000008

08002e74 <display_set_year>:

void display_set_year(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	if (disp_changed)
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <display_set_year+0x6c>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <display_set_year+0x16>
	{
		SSD1306_Clear();
 8002e80:	f001 f88a 	bl	8003f98 <SSD1306_Clear>
		disp_changed = false;
 8002e84:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <display_set_year+0x6c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(33, 32);
 8002e8a:	2120      	movs	r1, #32
 8002e8c:	2021      	movs	r0, #33	; 0x21
 8002e8e:	f000 ffc3 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts("Set Year", &Font_7x10, 1);
 8002e92:	4914      	ldr	r1, [pc, #80]	; (8002ee4 <display_set_year+0x70>)
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <display_set_year+0x74>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f001 f857 	bl	8003f4c <SSD1306_Puts>
	sprintf(year, "%d", set_year);
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <display_set_year+0x78>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	4912      	ldr	r1, [pc, #72]	; (8002ef0 <display_set_year+0x7c>)
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <display_set_year+0x80>)
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f004 fe4f 	bl	8007b4c <siprintf>
	SSD1306_GotoXY(42, 45);
 8002eae:	212d      	movs	r1, #45	; 0x2d
 8002eb0:	202a      	movs	r0, #42	; 0x2a
 8002eb2:	f000 ffb1 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts("20", &Font_11x18, 1);
 8002eb6:	4910      	ldr	r1, [pc, #64]	; (8002ef8 <display_set_year+0x84>)
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <display_set_year+0x88>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f001 f845 	bl	8003f4c <SSD1306_Puts>
	SSD1306_GotoXY(65, 45);
 8002ec2:	212d      	movs	r1, #45	; 0x2d
 8002ec4:	2041      	movs	r0, #65	; 0x41
 8002ec6:	f000 ffa7 	bl	8003e18 <SSD1306_GotoXY>
	SSD1306_Puts(year, &Font_11x18, 1);
 8002eca:	490b      	ldr	r1, [pc, #44]	; (8002ef8 <display_set_year+0x84>)
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <display_set_year+0x80>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f001 f83b 	bl	8003f4c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002ed6:	f000 fee3 	bl	8003ca0 <SSD1306_UpdateScreen>
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200000c1 	.word	0x200000c1
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	08009960 	.word	0x08009960
 8002eec:	200000bd 	.word	0x200000bd
 8002ef0:	08009928 	.word	0x08009928
 8002ef4:	20000718 	.word	0x20000718
 8002ef8:	20000008 	.word	0x20000008
 8002efc:	0800996c 	.word	0x0800996c

08002f00 <polling>:

void polling(void)//Determine time button is pressed.
{
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)==0)//Positive logic on button
 8002f04:	4b69      	ldr	r3, [pc, #420]	; (80030ac <polling+0x1ac>)
 8002f06:	2102      	movs	r1, #2
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f001 fdc5 	bl	8004a98 <HAL_GPIO_ReadPin>
 8002f0e:	1e03      	subs	r3, r0, #0
 8002f10:	d138      	bne.n	8002f84 <polling+0x84>
		{
			buttonPressed = true;
 8002f12:	4b67      	ldr	r3, [pc, #412]	; (80030b0 <polling+0x1b0>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
			doNothing = 0;
 8002f18:	4b66      	ldr	r3, [pc, #408]	; (80030b4 <polling+0x1b4>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim3);
 8002f1e:	4b66      	ldr	r3, [pc, #408]	; (80030b8 <polling+0x1b8>)
 8002f20:	0018      	movs	r0, r3
 8002f22:	f004 f863 	bl	8006fec <HAL_TIM_Base_Start>
			time_pressed = __HAL_TIM_GET_COUNTER(&htim3);
 8002f26:	4b64      	ldr	r3, [pc, #400]	; (80030b8 <polling+0x1b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7fd fe79 	bl	8000c24 <__aeabi_ui2f>
 8002f32:	1c02      	adds	r2, r0, #0
 8002f34:	4b61      	ldr	r3, [pc, #388]	; (80030bc <polling+0x1bc>)
 8002f36:	601a      	str	r2, [r3, #0]
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)==0)
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	4b5c      	ldr	r3, [pc, #368]	; (80030ac <polling+0x1ac>)
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f001 fdaa 	bl	8004a98 <HAL_GPIO_ReadPin>
 8002f44:	1e03      	subs	r3, r0, #0
 8002f46:	d0f8      	beq.n	8002f3a <polling+0x3a>
			{
				//Do nothing
			}
			time_pressed = (__HAL_TIM_GET_COUNTER(&htim3) - time_pressed)*0.0001;//To seconds, timer is 100us tick
 8002f48:	4b5b      	ldr	r3, [pc, #364]	; (80030b8 <polling+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7fd fe68 	bl	8000c24 <__aeabi_ui2f>
 8002f54:	1c02      	adds	r2, r0, #0
 8002f56:	4b59      	ldr	r3, [pc, #356]	; (80030bc <polling+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1c19      	adds	r1, r3, #0
 8002f5c:	1c10      	adds	r0, r2, #0
 8002f5e:	f7fd fc9d 	bl	800089c <__aeabi_fsub>
 8002f62:	1c03      	adds	r3, r0, #0
 8002f64:	1c18      	adds	r0, r3, #0
 8002f66:	f7ff fc1f 	bl	80027a8 <__aeabi_f2d>
 8002f6a:	4a55      	ldr	r2, [pc, #340]	; (80030c0 <polling+0x1c0>)
 8002f6c:	4b55      	ldr	r3, [pc, #340]	; (80030c4 <polling+0x1c4>)
 8002f6e:	f7fe fdbf 	bl	8001af0 <__aeabi_dmul>
 8002f72:	0003      	movs	r3, r0
 8002f74:	000c      	movs	r4, r1
 8002f76:	0018      	movs	r0, r3
 8002f78:	0021      	movs	r1, r4
 8002f7a:	f7ff fc67 	bl	800284c <__aeabi_d2f>
 8002f7e:	1c02      	adds	r2, r0, #0
 8002f80:	4b4e      	ldr	r3, [pc, #312]	; (80030bc <polling+0x1bc>)
 8002f82:	601a      	str	r2, [r3, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
		HAL_PWR_EnterSTANDBYMode();
	}*/

	if (buttonPressed)
 8002f84:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <polling+0x1b0>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d100      	bne.n	8002f8e <polling+0x8e>
 8002f8c:	e08a      	b.n	80030a4 <polling+0x1a4>
	{
		//HAL_TIM_Base_Stop_IT(&htim5);
		//standby_tim_start = false;
		if ((time_pressed >= 0.01) && (time_pressed <= 1))
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <polling+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	1c18      	adds	r0, r3, #0
 8002f94:	f7ff fc08 	bl	80027a8 <__aeabi_f2d>
 8002f98:	4a4b      	ldr	r2, [pc, #300]	; (80030c8 <polling+0x1c8>)
 8002f9a:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <polling+0x1cc>)
 8002f9c:	f7fd fa68 	bl	8000470 <__aeabi_dcmpge>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d030      	beq.n	8003006 <polling+0x106>
 8002fa4:	4b45      	ldr	r3, [pc, #276]	; (80030bc <polling+0x1bc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	21fe      	movs	r1, #254	; 0xfe
 8002faa:	0589      	lsls	r1, r1, #22
 8002fac:	1c18      	adds	r0, r3, #0
 8002fae:	f7fd fa85 	bl	80004bc <__aeabi_fcmple>
 8002fb2:	1e03      	subs	r3, r0, #0
 8002fb4:	d027      	beq.n	8003006 <polling+0x106>
		{
	       //switch display mode
			switch(disp_mode)
 8002fb6:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <polling+0x1d0>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d00e      	beq.n	8002fdc <polling+0xdc>
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d016      	beq.n	8002ff0 <polling+0xf0>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d000      	beq.n	8002fc8 <polling+0xc8>
				disp_mode = 0;
				buttonPressed = false;
				disp_changed = true;
				break;
			}
		}
 8002fc6:	e06d      	b.n	80030a4 <polling+0x1a4>
				disp_mode = 1;
 8002fc8:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <polling+0x1d0>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
				buttonPressed = false;
 8002fce:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <polling+0x1b0>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
				disp_changed = true;
 8002fd4:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <polling+0x1d4>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
				break;
 8002fda:	e013      	b.n	8003004 <polling+0x104>
				disp_mode = 2;
 8002fdc:	4b3c      	ldr	r3, [pc, #240]	; (80030d0 <polling+0x1d0>)
 8002fde:	2202      	movs	r2, #2
 8002fe0:	701a      	strb	r2, [r3, #0]
				buttonPressed = false;
 8002fe2:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <polling+0x1b0>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
				disp_changed = true;
 8002fe8:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <polling+0x1d4>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
				break;
 8002fee:	e009      	b.n	8003004 <polling+0x104>
				disp_mode = 0;
 8002ff0:	4b37      	ldr	r3, [pc, #220]	; (80030d0 <polling+0x1d0>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
				buttonPressed = false;
 8002ff6:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <polling+0x1b0>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
				disp_changed = true;
 8002ffc:	4b35      	ldr	r3, [pc, #212]	; (80030d4 <polling+0x1d4>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
				break;
 8003002:	46c0      	nop			; (mov r8, r8)
		}
 8003004:	e04e      	b.n	80030a4 <polling+0x1a4>
		else if ((time_pressed > 1.5) && (time_pressed <= 3) && ((disp_mode == 1) || (disp_mode == 2)))
 8003006:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <polling+0x1bc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	21ff      	movs	r1, #255	; 0xff
 800300c:	0589      	lsls	r1, r1, #22
 800300e:	1c18      	adds	r0, r3, #0
 8003010:	f7fd fa5e 	bl	80004d0 <__aeabi_fcmpgt>
 8003014:	1e03      	subs	r3, r0, #0
 8003016:	d037      	beq.n	8003088 <polling+0x188>
 8003018:	4b28      	ldr	r3, [pc, #160]	; (80030bc <polling+0x1bc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	492e      	ldr	r1, [pc, #184]	; (80030d8 <polling+0x1d8>)
 800301e:	1c18      	adds	r0, r3, #0
 8003020:	f7fd fa4c 	bl	80004bc <__aeabi_fcmple>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d02f      	beq.n	8003088 <polling+0x188>
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <polling+0x1d0>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d003      	beq.n	8003038 <polling+0x138>
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <polling+0x1d0>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d127      	bne.n	8003088 <polling+0x188>
		{
		   disp_mode = 3;
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <polling+0x1d0>)
 800303a:	2203      	movs	r2, #3
 800303c:	701a      	strb	r2, [r3, #0]
		   disp_changed = true;
 800303e:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <polling+0x1d4>)
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
		   buttonPressed = false;
 8003044:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <polling+0x1b0>)
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
		   HAL_TIM_Base_Stop(&htim2);//stop the timer used for polling the input button
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <polling+0x1dc>)
 800304c:	0018      	movs	r0, r3
 800304e:	f004 f817 	bl	8007080 <HAL_TIM_Base_Stop>
		   get_time();
 8003052:	f7ff fceb 	bl	8002a2c <get_time>
		   set_hour = gTime.Hours;
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <polling+0x1e0>)
 8003058:	781a      	ldrb	r2, [r3, #0]
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <polling+0x1e4>)
 800305c:	701a      	strb	r2, [r3, #0]
		   set_min = gTime.Minutes;
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <polling+0x1e0>)
 8003060:	785a      	ldrb	r2, [r3, #1]
 8003062:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <polling+0x1e8>)
 8003064:	701a      	strb	r2, [r3, #0]
		   set_date = gDate.Date;
 8003066:	4b21      	ldr	r3, [pc, #132]	; (80030ec <polling+0x1ec>)
 8003068:	789a      	ldrb	r2, [r3, #2]
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <polling+0x1f0>)
 800306c:	701a      	strb	r2, [r3, #0]
		   set_month = gDate.Month;
 800306e:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <polling+0x1ec>)
 8003070:	785a      	ldrb	r2, [r3, #1]
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <polling+0x1f4>)
 8003074:	701a      	strb	r2, [r3, #0]
		   set_year = gDate.Year;
 8003076:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <polling+0x1ec>)
 8003078:	78da      	ldrb	r2, [r3, #3]
 800307a:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <polling+0x1f8>)
 800307c:	701a      	strb	r2, [r3, #0]
		   HAL_TIM_Base_Start_IT(&htim6);//start the timer used in settings mode
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <polling+0x1fc>)
 8003080:	0018      	movs	r0, r3
 8003082:	f004 f81b 	bl	80070bc <HAL_TIM_Base_Start_IT>
 8003086:	e00d      	b.n	80030a4 <polling+0x1a4>
		}
		else if (time_pressed >= 4)
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <polling+0x1bc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2181      	movs	r1, #129	; 0x81
 800308e:	05c9      	lsls	r1, r1, #23
 8003090:	1c18      	adds	r0, r3, #0
 8003092:	f7fd fa27 	bl	80004e4 <__aeabi_fcmpge>
 8003096:	1e03      	subs	r3, r0, #0
 8003098:	d100      	bne.n	800309c <polling+0x19c>
		{
			disp_mode = 8;//Standby Mode
		}
	}

}
 800309a:	e003      	b.n	80030a4 <polling+0x1a4>
			disp_mode = 8;//Standby Mode
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <polling+0x1d0>)
 800309e:	2208      	movs	r2, #8
 80030a0:	701a      	strb	r2, [r3, #0]
}
 80030a2:	e7ff      	b.n	80030a4 <polling+0x1a4>
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bdb0      	pop	{r4, r5, r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	50000400 	.word	0x50000400
 80030b0:	200000bf 	.word	0x200000bf
 80030b4:	200000be 	.word	0x200000be
 80030b8:	20000584 	.word	0x20000584
 80030bc:	200000b4 	.word	0x200000b4
 80030c0:	eb1c432d 	.word	0xeb1c432d
 80030c4:	3f1a36e2 	.word	0x3f1a36e2
 80030c8:	47ae147b 	.word	0x47ae147b
 80030cc:	3f847ae1 	.word	0x3f847ae1
 80030d0:	200000b8 	.word	0x200000b8
 80030d4:	200000c1 	.word	0x200000c1
 80030d8:	40400000 	.word	0x40400000
 80030dc:	2000071c 	.word	0x2000071c
 80030e0:	2000061c 	.word	0x2000061c
 80030e4:	200000b9 	.word	0x200000b9
 80030e8:	200000ba 	.word	0x200000ba
 80030ec:	200004dc 	.word	0x200004dc
 80030f0:	200000bb 	.word	0x200000bb
 80030f4:	200000bc 	.word	0x200000bc
 80030f8:	200000bd 	.word	0x200000bd
 80030fc:	20000658 	.word	0x20000658

08003100 <polling_set>:
void polling_set(void)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)==0)//Positive logic on button
 8003104:	4bad      	ldr	r3, [pc, #692]	; (80033bc <polling_set+0x2bc>)
 8003106:	2102      	movs	r1, #2
 8003108:	0018      	movs	r0, r3
 800310a:	f001 fcc5 	bl	8004a98 <HAL_GPIO_ReadPin>
 800310e:	1e03      	subs	r3, r0, #0
 8003110:	d13d      	bne.n	800318e <polling_set+0x8e>
		{
			buttonPressed_set = true;
 8003112:	4bab      	ldr	r3, [pc, #684]	; (80033c0 <polling_set+0x2c0>)
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim7);
 8003118:	4baa      	ldr	r3, [pc, #680]	; (80033c4 <polling_set+0x2c4>)
 800311a:	0018      	movs	r0, r3
 800311c:	f003 ff66 	bl	8006fec <HAL_TIM_Base_Start>
			time_pressed = __HAL_TIM_GET_COUNTER(&htim7);
 8003120:	4ba8      	ldr	r3, [pc, #672]	; (80033c4 <polling_set+0x2c4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	0018      	movs	r0, r3
 8003128:	f7fd fd7c 	bl	8000c24 <__aeabi_ui2f>
 800312c:	1c02      	adds	r2, r0, #0
 800312e:	4ba6      	ldr	r3, [pc, #664]	; (80033c8 <polling_set+0x2c8>)
 8003130:	601a      	str	r2, [r3, #0]
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)==0)
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	4ba1      	ldr	r3, [pc, #644]	; (80033bc <polling_set+0x2bc>)
 8003136:	2102      	movs	r1, #2
 8003138:	0018      	movs	r0, r3
 800313a:	f001 fcad 	bl	8004a98 <HAL_GPIO_ReadPin>
 800313e:	1e03      	subs	r3, r0, #0
 8003140:	d0f8      	beq.n	8003134 <polling_set+0x34>
			{
				//Do nothing
			}
			time_pressed = (__HAL_TIM_GET_COUNTER(&htim7) - time_pressed)*0.0001;//To seconds, timer is 100us tick
 8003142:	4ba0      	ldr	r3, [pc, #640]	; (80033c4 <polling_set+0x2c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	0018      	movs	r0, r3
 800314a:	f7fd fd6b 	bl	8000c24 <__aeabi_ui2f>
 800314e:	1c02      	adds	r2, r0, #0
 8003150:	4b9d      	ldr	r3, [pc, #628]	; (80033c8 <polling_set+0x2c8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	1c19      	adds	r1, r3, #0
 8003156:	1c10      	adds	r0, r2, #0
 8003158:	f7fd fba0 	bl	800089c <__aeabi_fsub>
 800315c:	1c03      	adds	r3, r0, #0
 800315e:	1c18      	adds	r0, r3, #0
 8003160:	f7ff fb22 	bl	80027a8 <__aeabi_f2d>
 8003164:	4a99      	ldr	r2, [pc, #612]	; (80033cc <polling_set+0x2cc>)
 8003166:	4b9a      	ldr	r3, [pc, #616]	; (80033d0 <polling_set+0x2d0>)
 8003168:	f7fe fcc2 	bl	8001af0 <__aeabi_dmul>
 800316c:	0003      	movs	r3, r0
 800316e:	000c      	movs	r4, r1
 8003170:	0018      	movs	r0, r3
 8003172:	0021      	movs	r1, r4
 8003174:	f7ff fb6a 	bl	800284c <__aeabi_d2f>
 8003178:	1c02      	adds	r2, r0, #0
 800317a:	4b93      	ldr	r3, [pc, #588]	; (80033c8 <polling_set+0x2c8>)
 800317c:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim7);
 800317e:	4b91      	ldr	r3, [pc, #580]	; (80033c4 <polling_set+0x2c4>)
 8003180:	0018      	movs	r0, r3
 8003182:	f003 ff7d 	bl	8007080 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Init(&htim7);//Used to reset timer 7
 8003186:	4b8f      	ldr	r3, [pc, #572]	; (80033c4 <polling_set+0x2c4>)
 8003188:	0018      	movs	r0, r3
 800318a:	f003 fee1 	bl	8006f50 <HAL_TIM_Base_Init>
		}
	if (buttonPressed_set)
 800318e:	4b8c      	ldr	r3, [pc, #560]	; (80033c0 <polling_set+0x2c0>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d100      	bne.n	8003198 <polling_set+0x98>
 8003196:	e10e      	b.n	80033b6 <polling_set+0x2b6>
	{
		if ((time_pressed >= 0.01) && (time_pressed <= 1))
 8003198:	4b8b      	ldr	r3, [pc, #556]	; (80033c8 <polling_set+0x2c8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1c18      	adds	r0, r3, #0
 800319e:	f7ff fb03 	bl	80027a8 <__aeabi_f2d>
 80031a2:	4a8c      	ldr	r2, [pc, #560]	; (80033d4 <polling_set+0x2d4>)
 80031a4:	4b8c      	ldr	r3, [pc, #560]	; (80033d8 <polling_set+0x2d8>)
 80031a6:	f7fd f963 	bl	8000470 <__aeabi_dcmpge>
 80031aa:	1e03      	subs	r3, r0, #0
 80031ac:	d100      	bne.n	80031b0 <polling_set+0xb0>
 80031ae:	e082      	b.n	80032b6 <polling_set+0x1b6>
 80031b0:	4b85      	ldr	r3, [pc, #532]	; (80033c8 <polling_set+0x2c8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	21fe      	movs	r1, #254	; 0xfe
 80031b6:	0589      	lsls	r1, r1, #22
 80031b8:	1c18      	adds	r0, r3, #0
 80031ba:	f7fd f97f 	bl	80004bc <__aeabi_fcmple>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d100      	bne.n	80031c4 <polling_set+0xc4>
 80031c2:	e078      	b.n	80032b6 <polling_set+0x1b6>
		{
			switch(disp_mode)
 80031c4:	4b85      	ldr	r3, [pc, #532]	; (80033dc <polling_set+0x2dc>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d900      	bls.n	80031d0 <polling_set+0xd0>
 80031ce:	e0f1      	b.n	80033b4 <polling_set+0x2b4>
 80031d0:	009a      	lsls	r2, r3, #2
 80031d2:	4b83      	ldr	r3, [pc, #524]	; (80033e0 <polling_set+0x2e0>)
 80031d4:	18d3      	adds	r3, r2, r3
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	469f      	mov	pc, r3
			{
			case 3:
				buttonPressed_set = false;
 80031da:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <polling_set+0x2c0>)
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
				set_hour++;
 80031e0:	4b80      	ldr	r3, [pc, #512]	; (80033e4 <polling_set+0x2e4>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b7e      	ldr	r3, [pc, #504]	; (80033e4 <polling_set+0x2e4>)
 80031ea:	701a      	strb	r2, [r3, #0]
				if (set_hour > 23)
 80031ec:	4b7d      	ldr	r3, [pc, #500]	; (80033e4 <polling_set+0x2e4>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b17      	cmp	r3, #23
 80031f2:	d956      	bls.n	80032a2 <polling_set+0x1a2>
				{
					set_hour = 0;
 80031f4:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <polling_set+0x2e4>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
					disp_changed = true;
 80031fa:	4b7b      	ldr	r3, [pc, #492]	; (80033e8 <polling_set+0x2e8>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003200:	e04f      	b.n	80032a2 <polling_set+0x1a2>
			case 4:
				buttonPressed_set = false;
 8003202:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <polling_set+0x2c0>)
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
				set_min++;
 8003208:	4b78      	ldr	r3, [pc, #480]	; (80033ec <polling_set+0x2ec>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b76      	ldr	r3, [pc, #472]	; (80033ec <polling_set+0x2ec>)
 8003212:	701a      	strb	r2, [r3, #0]
				if (set_min > 59)
 8003214:	4b75      	ldr	r3, [pc, #468]	; (80033ec <polling_set+0x2ec>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b3b      	cmp	r3, #59	; 0x3b
 800321a:	d944      	bls.n	80032a6 <polling_set+0x1a6>
				{
					set_min = 0;
 800321c:	4b73      	ldr	r3, [pc, #460]	; (80033ec <polling_set+0x2ec>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
					disp_changed = true;
 8003222:	4b71      	ldr	r3, [pc, #452]	; (80033e8 <polling_set+0x2e8>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003228:	e03d      	b.n	80032a6 <polling_set+0x1a6>
			case 5:
				buttonPressed_set = false;
 800322a:	4b65      	ldr	r3, [pc, #404]	; (80033c0 <polling_set+0x2c0>)
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
				set_date++;
 8003230:	4b6f      	ldr	r3, [pc, #444]	; (80033f0 <polling_set+0x2f0>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	b2da      	uxtb	r2, r3
 8003238:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <polling_set+0x2f0>)
 800323a:	701a      	strb	r2, [r3, #0]
				if (set_date > 31)
 800323c:	4b6c      	ldr	r3, [pc, #432]	; (80033f0 <polling_set+0x2f0>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b1f      	cmp	r3, #31
 8003242:	d932      	bls.n	80032aa <polling_set+0x1aa>
				{
					set_date = 1;
 8003244:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <polling_set+0x2f0>)
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
					disp_changed = true;
 800324a:	4b67      	ldr	r3, [pc, #412]	; (80033e8 <polling_set+0x2e8>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003250:	e02b      	b.n	80032aa <polling_set+0x1aa>
			case 6:
				buttonPressed_set = false;
 8003252:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <polling_set+0x2c0>)
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
				set_month++;
 8003258:	4b66      	ldr	r3, [pc, #408]	; (80033f4 <polling_set+0x2f4>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	b2da      	uxtb	r2, r3
 8003260:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <polling_set+0x2f4>)
 8003262:	701a      	strb	r2, [r3, #0]
				if (set_month > 12)
 8003264:	4b63      	ldr	r3, [pc, #396]	; (80033f4 <polling_set+0x2f4>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b0c      	cmp	r3, #12
 800326a:	d920      	bls.n	80032ae <polling_set+0x1ae>
				{
					set_month = 1;
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <polling_set+0x2f4>)
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
					disp_changed = true;
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <polling_set+0x2e8>)
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003278:	e019      	b.n	80032ae <polling_set+0x1ae>
			case 7:
				buttonPressed_set = false;
 800327a:	4b51      	ldr	r3, [pc, #324]	; (80033c0 <polling_set+0x2c0>)
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
				set_year++;
 8003280:	4b5d      	ldr	r3, [pc, #372]	; (80033f8 <polling_set+0x2f8>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	b2da      	uxtb	r2, r3
 8003288:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <polling_set+0x2f8>)
 800328a:	701a      	strb	r2, [r3, #0]
			    if (set_year > 30)
 800328c:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <polling_set+0x2f8>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b1e      	cmp	r3, #30
 8003292:	d90e      	bls.n	80032b2 <polling_set+0x1b2>
				{
					set_year = 20;
 8003294:	4b58      	ldr	r3, [pc, #352]	; (80033f8 <polling_set+0x2f8>)
 8003296:	2214      	movs	r2, #20
 8003298:	701a      	strb	r2, [r3, #0]
					disp_changed = true;
 800329a:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <polling_set+0x2e8>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
				}
				break;
 80032a0:	e007      	b.n	80032b2 <polling_set+0x1b2>
				break;
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	e086      	b.n	80033b4 <polling_set+0x2b4>
				break;
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	e084      	b.n	80033b4 <polling_set+0x2b4>
				break;
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	e082      	b.n	80033b4 <polling_set+0x2b4>
				break;
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	e080      	b.n	80033b4 <polling_set+0x2b4>
				break;
 80032b2:	46c0      	nop			; (mov r8, r8)
			}
		}
 80032b4:	e07e      	b.n	80033b4 <polling_set+0x2b4>
		else if ((time_pressed > 1.5) && (time_pressed <= 3))//Change what are being set
 80032b6:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <polling_set+0x2c8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	21ff      	movs	r1, #255	; 0xff
 80032bc:	0589      	lsls	r1, r1, #22
 80032be:	1c18      	adds	r0, r3, #0
 80032c0:	f7fd f906 	bl	80004d0 <__aeabi_fcmpgt>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d100      	bne.n	80032ca <polling_set+0x1ca>
				HAL_TIM_Base_Stop(&htim6);//stop the timer used to monitor the input button while in settings mode
				HAL_TIM_Base_Start_IT(&htim2);//start the timer used to monitor the input button while in display mode
			}
		}
	}
}
 80032c8:	e075      	b.n	80033b6 <polling_set+0x2b6>
		else if ((time_pressed > 1.5) && (time_pressed <= 3))//Change what are being set
 80032ca:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <polling_set+0x2c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	494b      	ldr	r1, [pc, #300]	; (80033fc <polling_set+0x2fc>)
 80032d0:	1c18      	adds	r0, r3, #0
 80032d2:	f7fd f8f3 	bl	80004bc <__aeabi_fcmple>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d100      	bne.n	80032dc <polling_set+0x1dc>
}
 80032da:	e06c      	b.n	80033b6 <polling_set+0x2b6>
			switch(disp_mode)
 80032dc:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <polling_set+0x2dc>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	3b03      	subs	r3, #3
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d867      	bhi.n	80033b6 <polling_set+0x2b6>
 80032e6:	009a      	lsls	r2, r3, #2
 80032e8:	4b45      	ldr	r3, [pc, #276]	; (8003400 <polling_set+0x300>)
 80032ea:	18d3      	adds	r3, r2, r3
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	469f      	mov	pc, r3
				disp_mode = 4;
 80032f0:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <polling_set+0x2dc>)
 80032f2:	2204      	movs	r2, #4
 80032f4:	701a      	strb	r2, [r3, #0]
				buttonPressed_set = false;
 80032f6:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <polling_set+0x2c0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
				disp_changed = true;
 80032fc:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <polling_set+0x2e8>)
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
				break;
 8003302:	e058      	b.n	80033b6 <polling_set+0x2b6>
				disp_mode = 5;
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <polling_set+0x2dc>)
 8003306:	2205      	movs	r2, #5
 8003308:	701a      	strb	r2, [r3, #0]
				buttonPressed_set = false;
 800330a:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <polling_set+0x2c0>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
				disp_changed = true;
 8003310:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <polling_set+0x2e8>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
				break;
 8003316:	e04e      	b.n	80033b6 <polling_set+0x2b6>
				disp_mode = 6;
 8003318:	4b30      	ldr	r3, [pc, #192]	; (80033dc <polling_set+0x2dc>)
 800331a:	2206      	movs	r2, #6
 800331c:	701a      	strb	r2, [r3, #0]
				buttonPressed_set = false;
 800331e:	4b28      	ldr	r3, [pc, #160]	; (80033c0 <polling_set+0x2c0>)
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
				disp_changed = true;
 8003324:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <polling_set+0x2e8>)
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
				break;
 800332a:	e044      	b.n	80033b6 <polling_set+0x2b6>
				disp_mode = 7;
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <polling_set+0x2dc>)
 800332e:	2207      	movs	r2, #7
 8003330:	701a      	strb	r2, [r3, #0]
				buttonPressed_set = false;
 8003332:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <polling_set+0x2c0>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
				disp_changed = true;
 8003338:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <polling_set+0x2e8>)
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
				break;
 800333e:	e03a      	b.n	80033b6 <polling_set+0x2b6>
				disp_mode = 0;
 8003340:	4b26      	ldr	r3, [pc, #152]	; (80033dc <polling_set+0x2dc>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
				buttonPressed_set = false;
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <polling_set+0x2c0>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
				disp_changed = true;
 800334c:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <polling_set+0x2e8>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
				sTime.Hours = set_hour;
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <polling_set+0x2e4>)
 8003354:	781a      	ldrb	r2, [r3, #0]
 8003356:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <polling_set+0x304>)
 8003358:	701a      	strb	r2, [r3, #0]
				sTime.Minutes = set_min;
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <polling_set+0x2ec>)
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <polling_set+0x304>)
 8003360:	705a      	strb	r2, [r3, #1]
				if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)//Save the time
 8003362:	4928      	ldr	r1, [pc, #160]	; (8003404 <polling_set+0x304>)
 8003364:	4b28      	ldr	r3, [pc, #160]	; (8003408 <polling_set+0x308>)
 8003366:	2200      	movs	r2, #0
 8003368:	0018      	movs	r0, r3
 800336a:	f003 fb13 	bl	8006994 <HAL_RTC_SetTime>
 800336e:	1e03      	subs	r3, r0, #0
 8003370:	d001      	beq.n	8003376 <polling_set+0x276>
					Error_Handler();
 8003372:	f000 fbcd 	bl	8003b10 <Error_Handler>
				sDate.Date = set_date;
 8003376:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <polling_set+0x2f0>)
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <polling_set+0x30c>)
 800337c:	709a      	strb	r2, [r3, #2]
				sDate.Month = set_month;
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <polling_set+0x2f4>)
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	4b22      	ldr	r3, [pc, #136]	; (800340c <polling_set+0x30c>)
 8003384:	705a      	strb	r2, [r3, #1]
				sDate.Year = set_year;
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <polling_set+0x2f8>)
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <polling_set+0x30c>)
 800338c:	70da      	strb	r2, [r3, #3]
				if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)//Save the date
 800338e:	491f      	ldr	r1, [pc, #124]	; (800340c <polling_set+0x30c>)
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <polling_set+0x308>)
 8003392:	2200      	movs	r2, #0
 8003394:	0018      	movs	r0, r3
 8003396:	f003 fc1d 	bl	8006bd4 <HAL_RTC_SetDate>
 800339a:	1e03      	subs	r3, r0, #0
 800339c:	d001      	beq.n	80033a2 <polling_set+0x2a2>
					Error_Handler();
 800339e:	f000 fbb7 	bl	8003b10 <Error_Handler>
				HAL_TIM_Base_Stop(&htim6);//stop the timer used to monitor the input button while in settings mode
 80033a2:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <polling_set+0x310>)
 80033a4:	0018      	movs	r0, r3
 80033a6:	f003 fe6b 	bl	8007080 <HAL_TIM_Base_Stop>
				HAL_TIM_Base_Start_IT(&htim2);//start the timer used to monitor the input button while in display mode
 80033aa:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <polling_set+0x314>)
 80033ac:	0018      	movs	r0, r3
 80033ae:	f003 fe85 	bl	80070bc <HAL_TIM_Base_Start_IT>
}
 80033b2:	e000      	b.n	80033b6 <polling_set+0x2b6>
		}
 80033b4:	46c0      	nop			; (mov r8, r8)
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bdb0      	pop	{r4, r5, r7, pc}
 80033bc:	50000400 	.word	0x50000400
 80033c0:	200000c0 	.word	0x200000c0
 80033c4:	200007b8 	.word	0x200007b8
 80033c8:	200000b4 	.word	0x200000b4
 80033cc:	eb1c432d 	.word	0xeb1c432d
 80033d0:	3f1a36e2 	.word	0x3f1a36e2
 80033d4:	47ae147b 	.word	0x47ae147b
 80033d8:	3f847ae1 	.word	0x3f847ae1
 80033dc:	200000b8 	.word	0x200000b8
 80033e0:	0800aeb8 	.word	0x0800aeb8
 80033e4:	200000b9 	.word	0x200000b9
 80033e8:	200000c1 	.word	0x200000c1
 80033ec:	200000ba 	.word	0x200000ba
 80033f0:	200000bb 	.word	0x200000bb
 80033f4:	200000bc 	.word	0x200000bc
 80033f8:	200000bd 	.word	0x200000bd
 80033fc:	40400000 	.word	0x40400000
 8003400:	0800aecc 	.word	0x0800aecc
 8003404:	2000009c 	.word	0x2000009c
 8003408:	20000634 	.word	0x20000634
 800340c:	200000b0 	.word	0x200000b0
 8003410:	20000658 	.word	0x20000658
 8003414:	2000071c 	.word	0x2000071c

08003418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800341c:	f001 f84e 	bl	80044bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003420:	f000 f888 	bl	8003534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003424:	f000 fb2e 	bl	8003a84 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003428:	f000 f900 	bl	800362c <MX_I2C1_Init>
  MX_I2C3_Init();
 800342c:	f000 f93c 	bl	80036a8 <MX_I2C3_Init>
  MX_RTC_Init();
 8003430:	f000 f97a 	bl	8003728 <MX_RTC_Init>
  MX_TIM2_Init();
 8003434:	f000 f9ae 	bl	8003794 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003438:	f000 fa00 	bl	800383c <MX_TIM3_Init>
  MX_TIM6_Init();
 800343c:	f000 fa54 	bl	80038e8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003440:	f000 fa8e 	bl	8003960 <MX_TIM7_Init>
  MX_TIM21_Init();
 8003444:	f000 fac8 	bl	80039d8 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(); // Initialize the oled display
 8003448:	f000 fb66 	bl	8003b18 <SSD1306_Init>

  HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID,(void*)polling);
 800344c:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <main+0xe4>)
 800344e:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <main+0xe8>)
 8003450:	210e      	movs	r1, #14
 8003452:	0018      	movs	r0, r3
 8003454:	f004 f8a0 	bl	8007598 <HAL_TIM_RegisterCallback>
  HAL_TIM_RegisterCallback(&htim6, HAL_TIM_PERIOD_ELAPSED_CB_ID,(void*)polling_set);
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <main+0xec>)
 800345a:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <main+0xf0>)
 800345c:	210e      	movs	r1, #14
 800345e:	0018      	movs	r0, r3
 8003460:	f004 f89a 	bl	8007598 <HAL_TIM_RegisterCallback>
  //HAL_TIM_RegisterCallback(&htim21, HAL_TIM_PERIOD_ELAPSED_CB_ID,(void*)read_temp);
  HAL_TIM_Base_Start_IT(&htim2);
 8003464:	4b26      	ldr	r3, [pc, #152]	; (8003500 <main+0xe8>)
 8003466:	0018      	movs	r0, r3
 8003468:	f003 fe28 	bl	80070bc <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim21);

  //Initialize variables:
  buttonPressed = false;
 800346c:	4b27      	ldr	r3, [pc, #156]	; (800350c <main+0xf4>)
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
  buttonPressed_set = false;
 8003472:	4b27      	ldr	r3, [pc, #156]	; (8003510 <main+0xf8>)
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
  disp_changed = false;
 8003478:	4b26      	ldr	r3, [pc, #152]	; (8003514 <main+0xfc>)
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
  standby_tim_start = false;
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <main+0x100>)
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
  disp_mode = 0;
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <main+0x104>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
  doNothing = 0;
 800348a:	4b25      	ldr	r3, [pc, #148]	; (8003520 <main+0x108>)
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)//Backup register for RTC
 8003490:	4b24      	ldr	r3, [pc, #144]	; (8003524 <main+0x10c>)
 8003492:	2101      	movs	r1, #1
 8003494:	0018      	movs	r0, r3
 8003496:	f003 fd46 	bl	8006f26 <HAL_RTCEx_BKUPRead>
 800349a:	0002      	movs	r2, r0
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <main+0x110>)
 800349e:	429a      	cmp	r2, r3
 80034a0:	d001      	beq.n	80034a6 <main+0x8e>
  {
	  set_time();
 80034a2:	f7ff fa81 	bl	80029a8 <set_time>
	  {
		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
		  //Disable the wakeup pin
		  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);//PA0
	  }*/
	  switch(disp_mode)
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <main+0x104>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b07      	cmp	r3, #7
 80034ac:	d8fb      	bhi.n	80034a6 <main+0x8e>
 80034ae:	009a      	lsls	r2, r3, #2
 80034b0:	4b1e      	ldr	r3, [pc, #120]	; (800352c <main+0x114>)
 80034b2:	18d3      	adds	r3, r2, r3
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	469f      	mov	pc, r3
	  {
	  case 0://Temp
		  get_temp(max30205_addr, max30205_conf, &sens_temp);
 80034b8:	2090      	movs	r0, #144	; 0x90
 80034ba:	2144      	movs	r1, #68	; 0x44
 80034bc:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <main+0x118>)
 80034be:	001a      	movs	r2, r3
 80034c0:	f7ff fb42 	bl	8002b48 <get_temp>
		  display_temp();
 80034c4:	f7ff fba8 	bl	8002c18 <display_temp>
		  break;
 80034c8:	e016      	b.n	80034f8 <main+0xe0>
	  case 1://Time
		  get_time();
 80034ca:	f7ff faaf 	bl	8002a2c <get_time>
		  display_time();
 80034ce:	f7ff fac5 	bl	8002a5c <display_time>
		  break;
 80034d2:	e011      	b.n	80034f8 <main+0xe0>
	  case 2://Date
		  display_date();
 80034d4:	f7ff faf0 	bl	8002ab8 <display_date>
		  break;
 80034d8:	e00e      	b.n	80034f8 <main+0xe0>
	  case 3://Set hour
		  display_set_hour();
 80034da:	f7ff fbe3 	bl	8002ca4 <display_set_hour>
		  break;
 80034de:	e00b      	b.n	80034f8 <main+0xe0>
	  case 4://Set min
		  display_set_min();
 80034e0:	f7ff fc1a 	bl	8002d18 <display_set_min>
		  break;
 80034e4:	e008      	b.n	80034f8 <main+0xe0>
	  case 5://Set date
		  display_set_date();
 80034e6:	f7ff fc51 	bl	8002d8c <display_set_date>
		  break;
 80034ea:	e005      	b.n	80034f8 <main+0xe0>
	  case 6://Set month
		  display_set_month();
 80034ec:	f7ff fc88 	bl	8002e00 <display_set_month>
		  break;
 80034f0:	e002      	b.n	80034f8 <main+0xe0>
	  case 7://Set year
		  display_set_year();
 80034f2:	f7ff fcbf 	bl	8002e74 <display_set_year>
		  break;
 80034f6:	46c0      	nop			; (mov r8, r8)
	  switch(disp_mode)
 80034f8:	e7d5      	b.n	80034a6 <main+0x8e>
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	08002f01 	.word	0x08002f01
 8003500:	2000071c 	.word	0x2000071c
 8003504:	08003101 	.word	0x08003101
 8003508:	20000658 	.word	0x20000658
 800350c:	200000bf 	.word	0x200000bf
 8003510:	200000c0 	.word	0x200000c0
 8003514:	200000c1 	.word	0x200000c1
 8003518:	200000c2 	.word	0x200000c2
 800351c:	200000b8 	.word	0x200000b8
 8003520:	200000be 	.word	0x200000be
 8003524:	20000634 	.word	0x20000634
 8003528:	000032f2 	.word	0x000032f2
 800352c:	0800aee0 	.word	0x0800aee0
 8003530:	200000c4 	.word	0x200000c4

08003534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b09b      	sub	sp, #108	; 0x6c
 8003538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800353a:	2434      	movs	r4, #52	; 0x34
 800353c:	193b      	adds	r3, r7, r4
 800353e:	0018      	movs	r0, r3
 8003540:	2334      	movs	r3, #52	; 0x34
 8003542:	001a      	movs	r2, r3
 8003544:	2100      	movs	r1, #0
 8003546:	f004 faf9 	bl	8007b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800354a:	2320      	movs	r3, #32
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	0018      	movs	r0, r3
 8003550:	2314      	movs	r3, #20
 8003552:	001a      	movs	r2, r3
 8003554:	2100      	movs	r1, #0
 8003556:	f004 faf1 	bl	8007b3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800355a:	003b      	movs	r3, r7
 800355c:	0018      	movs	r0, r3
 800355e:	2320      	movs	r3, #32
 8003560:	001a      	movs	r2, r3
 8003562:	2100      	movs	r1, #0
 8003564:	f004 faea 	bl	8007b3c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003568:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <SystemClock_Config+0xec>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2d      	ldr	r2, [pc, #180]	; (8003624 <SystemClock_Config+0xf0>)
 800356e:	401a      	ands	r2, r3
 8003570:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <SystemClock_Config+0xec>)
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	0109      	lsls	r1, r1, #4
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800357a:	f002 faaf 	bl	8005adc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800357e:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <SystemClock_Config+0xf4>)
 8003580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <SystemClock_Config+0xf4>)
 8003584:	4927      	ldr	r1, [pc, #156]	; (8003624 <SystemClock_Config+0xf0>)
 8003586:	400a      	ands	r2, r1
 8003588:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800358a:	193b      	adds	r3, r7, r4
 800358c:	2206      	movs	r2, #6
 800358e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003590:	193b      	adds	r3, r7, r4
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	0052      	lsls	r2, r2, #1
 8003596:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003598:	193b      	adds	r3, r7, r4
 800359a:	2201      	movs	r2, #1
 800359c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	2210      	movs	r2, #16
 80035a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80035a4:	193b      	adds	r3, r7, r4
 80035a6:	2200      	movs	r2, #0
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035aa:	193b      	adds	r3, r7, r4
 80035ac:	0018      	movs	r0, r3
 80035ae:	f002 faa3 	bl	8005af8 <HAL_RCC_OscConfig>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d001      	beq.n	80035ba <SystemClock_Config+0x86>
  {
    Error_Handler();
 80035b6:	f000 faab 	bl	8003b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ba:	2120      	movs	r1, #32
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	220f      	movs	r2, #15
 80035c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80035c2:	187b      	adds	r3, r7, r1
 80035c4:	2201      	movs	r2, #1
 80035c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80035c8:	187b      	adds	r3, r7, r1
 80035ca:	2290      	movs	r2, #144	; 0x90
 80035cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2200      	movs	r2, #0
 80035d2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	2100      	movs	r1, #0
 80035de:	0018      	movs	r0, r3
 80035e0:	f002 fe0a 	bl	80061f8 <HAL_RCC_ClockConfig>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d001      	beq.n	80035ec <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80035e8:	f000 fa92 	bl	8003b10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
 80035ec:	003b      	movs	r3, r7
 80035ee:	2294      	movs	r2, #148	; 0x94
 80035f0:	0052      	lsls	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80035f4:	003b      	movs	r3, r7
 80035f6:	2200      	movs	r2, #0
 80035f8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80035fa:	003b      	movs	r3, r7
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003600:	003b      	movs	r3, r7
 8003602:	2280      	movs	r2, #128	; 0x80
 8003604:	0252      	lsls	r2, r2, #9
 8003606:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003608:	003b      	movs	r3, r7
 800360a:	0018      	movs	r0, r3
 800360c:	f002 ffde 	bl	80065cc <HAL_RCCEx_PeriphCLKConfig>
 8003610:	1e03      	subs	r3, r0, #0
 8003612:	d001      	beq.n	8003618 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8003614:	f000 fa7c 	bl	8003b10 <Error_Handler>
  }
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b01b      	add	sp, #108	; 0x6c
 800361e:	bd90      	pop	{r4, r7, pc}
 8003620:	40007000 	.word	0x40007000
 8003624:	ffffe7ff 	.word	0xffffe7ff
 8003628:	40021000 	.word	0x40021000

0800362c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003632:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <MX_I2C1_Init+0x78>)
 8003634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003638:	2204      	movs	r2, #4
 800363a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <MX_I2C1_Init+0x74>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003644:	2201      	movs	r2, #1
 8003646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <MX_I2C1_Init+0x74>)
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <MX_I2C1_Init+0x74>)
 800365c:	2200      	movs	r2, #0
 800365e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003662:	2200      	movs	r2, #0
 8003664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003668:	0018      	movs	r0, r3
 800366a:	f001 fa33 	bl	8004ad4 <HAL_I2C_Init>
 800366e:	1e03      	subs	r3, r0, #0
 8003670:	d001      	beq.n	8003676 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003672:	f000 fa4d 	bl	8003b10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003678:	2100      	movs	r1, #0
 800367a:	0018      	movs	r0, r3
 800367c:	f002 f996 	bl	80059ac <HAL_I2CEx_ConfigAnalogFilter>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d001      	beq.n	8003688 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003684:	f000 fa44 	bl	8003b10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <MX_I2C1_Init+0x74>)
 800368a:	2100      	movs	r1, #0
 800368c:	0018      	movs	r0, r3
 800368e:	f002 f9d9 	bl	8005a44 <HAL_I2CEx_ConfigDigitalFilter>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d001      	beq.n	800369a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003696:	f000 fa3b 	bl	8003b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	2000052c 	.word	0x2000052c
 80036a4:	40005400 	.word	0x40005400

080036a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <MX_I2C3_Init+0x74>)
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <MX_I2C3_Init+0x78>)
 80036b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <MX_I2C3_Init+0x74>)
 80036b4:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <MX_I2C3_Init+0x7c>)
 80036b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <MX_I2C3_Init+0x74>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036be:	4b17      	ldr	r3, [pc, #92]	; (800371c <MX_I2C3_Init+0x74>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036c4:	4b15      	ldr	r3, [pc, #84]	; (800371c <MX_I2C3_Init+0x74>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <MX_I2C3_Init+0x74>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <MX_I2C3_Init+0x74>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <MX_I2C3_Init+0x74>)
 80036d8:	2200      	movs	r2, #0
 80036da:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <MX_I2C3_Init+0x74>)
 80036de:	2200      	movs	r2, #0
 80036e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80036e2:	4b0e      	ldr	r3, [pc, #56]	; (800371c <MX_I2C3_Init+0x74>)
 80036e4:	0018      	movs	r0, r3
 80036e6:	f001 f9f5 	bl	8004ad4 <HAL_I2C_Init>
 80036ea:	1e03      	subs	r3, r0, #0
 80036ec:	d001      	beq.n	80036f2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80036ee:	f000 fa0f 	bl	8003b10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <MX_I2C3_Init+0x74>)
 80036f4:	2100      	movs	r1, #0
 80036f6:	0018      	movs	r0, r3
 80036f8:	f002 f958 	bl	80059ac <HAL_I2CEx_ConfigAnalogFilter>
 80036fc:	1e03      	subs	r3, r0, #0
 80036fe:	d001      	beq.n	8003704 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003700:	f000 fa06 	bl	8003b10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <MX_I2C3_Init+0x74>)
 8003706:	2100      	movs	r1, #0
 8003708:	0018      	movs	r0, r3
 800370a:	f002 f99b 	bl	8005a44 <HAL_I2CEx_ConfigDigitalFilter>
 800370e:	1e03      	subs	r3, r0, #0
 8003710:	d001      	beq.n	8003716 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003712:	f000 f9fd 	bl	8003b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	200004e0 	.word	0x200004e0
 8003720:	40007800 	.word	0x40007800
 8003724:	00000e14 	.word	0x00000e14

08003728 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	0018      	movs	r0, r3
 8003732:	2314      	movs	r3, #20
 8003734:	001a      	movs	r2, r3
 8003736:	2100      	movs	r1, #0
 8003738:	f004 fa00 	bl	8007b3c <memset>
  RTC_DateTypeDef sDate = {0};
 800373c:	003b      	movs	r3, r7
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <MX_RTC_Init+0x64>)
 8003744:	4a12      	ldr	r2, [pc, #72]	; (8003790 <MX_RTC_Init+0x68>)
 8003746:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <MX_RTC_Init+0x64>)
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800374e:	4b0f      	ldr	r3, [pc, #60]	; (800378c <MX_RTC_Init+0x64>)
 8003750:	227f      	movs	r2, #127	; 0x7f
 8003752:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <MX_RTC_Init+0x64>)
 8003756:	22ff      	movs	r2, #255	; 0xff
 8003758:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800375a:	4b0c      	ldr	r3, [pc, #48]	; (800378c <MX_RTC_Init+0x64>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <MX_RTC_Init+0x64>)
 8003762:	2200      	movs	r2, #0
 8003764:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <MX_RTC_Init+0x64>)
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <MX_RTC_Init+0x64>)
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <MX_RTC_Init+0x64>)
 8003774:	0018      	movs	r0, r3
 8003776:	f003 f86f 	bl	8006858 <HAL_RTC_Init>
 800377a:	1e03      	subs	r3, r0, #0
 800377c:	d001      	beq.n	8003782 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800377e:	f000 f9c7 	bl	8003b10 <Error_Handler>
  }*/
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	b006      	add	sp, #24
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	20000634 	.word	0x20000634
 8003790:	40002800 	.word	0x40002800

08003794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800379a:	2308      	movs	r3, #8
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	0018      	movs	r0, r3
 80037a0:	2310      	movs	r3, #16
 80037a2:	001a      	movs	r2, r3
 80037a4:	2100      	movs	r1, #0
 80037a6:	f004 f9c9 	bl	8007b3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037aa:	003b      	movs	r3, r7
 80037ac:	0018      	movs	r0, r3
 80037ae:	2308      	movs	r3, #8
 80037b0:	001a      	movs	r2, r3
 80037b2:	2100      	movs	r1, #0
 80037b4:	f004 f9c2 	bl	8007b3c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037b8:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <MX_TIM2_Init+0xa0>)
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	05d2      	lsls	r2, r2, #23
 80037be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <MX_TIM2_Init+0xa0>)
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <MX_TIM2_Init+0xa4>)
 80037c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c6:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <MX_TIM2_Init+0xa0>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <MX_TIM2_Init+0xa0>)
 80037ce:	2232      	movs	r2, #50	; 0x32
 80037d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <MX_TIM2_Init+0xa0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d8:	4b16      	ldr	r3, [pc, #88]	; (8003834 <MX_TIM2_Init+0xa0>)
 80037da:	2200      	movs	r2, #0
 80037dc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <MX_TIM2_Init+0xa0>)
 80037e0:	0018      	movs	r0, r3
 80037e2:	f003 fbb5 	bl	8006f50 <HAL_TIM_Base_Init>
 80037e6:	1e03      	subs	r3, r0, #0
 80037e8:	d001      	beq.n	80037ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80037ea:	f000 f991 	bl	8003b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ee:	2108      	movs	r1, #8
 80037f0:	187b      	adds	r3, r7, r1
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	0152      	lsls	r2, r2, #5
 80037f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037f8:	187a      	adds	r2, r7, r1
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <MX_TIM2_Init+0xa0>)
 80037fc:	0011      	movs	r1, r2
 80037fe:	0018      	movs	r0, r3
 8003800:	f003 fdb0 	bl	8007364 <HAL_TIM_ConfigClockSource>
 8003804:	1e03      	subs	r3, r0, #0
 8003806:	d001      	beq.n	800380c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003808:	f000 f982 	bl	8003b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800380c:	003b      	movs	r3, r7
 800380e:	2210      	movs	r2, #16
 8003810:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003812:	003b      	movs	r3, r7
 8003814:	2200      	movs	r2, #0
 8003816:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003818:	003a      	movs	r2, r7
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <MX_TIM2_Init+0xa0>)
 800381c:	0011      	movs	r1, r2
 800381e:	0018      	movs	r0, r3
 8003820:	f004 f8de 	bl	80079e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d001      	beq.n	800382c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003828:	f000 f972 	bl	8003b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b006      	add	sp, #24
 8003832:	bd80      	pop	{r7, pc}
 8003834:	2000071c 	.word	0x2000071c
 8003838:	00000f9f 	.word	0x00000f9f

0800383c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003842:	2308      	movs	r3, #8
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	0018      	movs	r0, r3
 8003848:	2310      	movs	r3, #16
 800384a:	001a      	movs	r2, r3
 800384c:	2100      	movs	r1, #0
 800384e:	f004 f975 	bl	8007b3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003852:	003b      	movs	r3, r7
 8003854:	0018      	movs	r0, r3
 8003856:	2308      	movs	r3, #8
 8003858:	001a      	movs	r2, r3
 800385a:	2100      	movs	r1, #0
 800385c:	f004 f96e 	bl	8007b3c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <MX_TIM3_Init+0xa0>)
 8003862:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <MX_TIM3_Init+0xa4>)
 8003864:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 400-1;
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <MX_TIM3_Init+0xa0>)
 8003868:	2290      	movs	r2, #144	; 0x90
 800386a:	32ff      	adds	r2, #255	; 0xff
 800386c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386e:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <MX_TIM3_Init+0xa0>)
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65536-1;
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <MX_TIM3_Init+0xa0>)
 8003876:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <MX_TIM3_Init+0xa8>)
 8003878:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800387a:	4b18      	ldr	r3, [pc, #96]	; (80038dc <MX_TIM3_Init+0xa0>)
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003880:	4b16      	ldr	r3, [pc, #88]	; (80038dc <MX_TIM3_Init+0xa0>)
 8003882:	2200      	movs	r2, #0
 8003884:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <MX_TIM3_Init+0xa0>)
 8003888:	0018      	movs	r0, r3
 800388a:	f003 fb61 	bl	8006f50 <HAL_TIM_Base_Init>
 800388e:	1e03      	subs	r3, r0, #0
 8003890:	d001      	beq.n	8003896 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003892:	f000 f93d 	bl	8003b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003896:	2108      	movs	r1, #8
 8003898:	187b      	adds	r3, r7, r1
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	0152      	lsls	r2, r2, #5
 800389e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038a0:	187a      	adds	r2, r7, r1
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <MX_TIM3_Init+0xa0>)
 80038a4:	0011      	movs	r1, r2
 80038a6:	0018      	movs	r0, r3
 80038a8:	f003 fd5c 	bl	8007364 <HAL_TIM_ConfigClockSource>
 80038ac:	1e03      	subs	r3, r0, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80038b0:	f000 f92e 	bl	8003b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b4:	003b      	movs	r3, r7
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ba:	003b      	movs	r3, r7
 80038bc:	2200      	movs	r2, #0
 80038be:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038c0:	003a      	movs	r2, r7
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <MX_TIM3_Init+0xa0>)
 80038c4:	0011      	movs	r1, r2
 80038c6:	0018      	movs	r0, r3
 80038c8:	f004 f88a 	bl	80079e0 <HAL_TIMEx_MasterConfigSynchronization>
 80038cc:	1e03      	subs	r3, r0, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80038d0:	f000 f91e 	bl	8003b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b006      	add	sp, #24
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000584 	.word	0x20000584
 80038e0:	40000400 	.word	0x40000400
 80038e4:	0000ffff 	.word	0x0000ffff

080038e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038ee:	003b      	movs	r3, r7
 80038f0:	0018      	movs	r0, r3
 80038f2:	2308      	movs	r3, #8
 80038f4:	001a      	movs	r2, r3
 80038f6:	2100      	movs	r1, #0
 80038f8:	f004 f920 	bl	8007b3c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80038fc:	4b15      	ldr	r3, [pc, #84]	; (8003954 <MX_TIM6_Init+0x6c>)
 80038fe:	4a16      	ldr	r2, [pc, #88]	; (8003958 <MX_TIM6_Init+0x70>)
 8003900:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4000-1;
 8003902:	4b14      	ldr	r3, [pc, #80]	; (8003954 <MX_TIM6_Init+0x6c>)
 8003904:	4a15      	ldr	r2, [pc, #84]	; (800395c <MX_TIM6_Init+0x74>)
 8003906:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003908:	4b12      	ldr	r3, [pc, #72]	; (8003954 <MX_TIM6_Init+0x6c>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50;
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <MX_TIM6_Init+0x6c>)
 8003910:	2232      	movs	r2, #50	; 0x32
 8003912:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003914:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <MX_TIM6_Init+0x6c>)
 8003916:	2200      	movs	r2, #0
 8003918:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <MX_TIM6_Init+0x6c>)
 800391c:	0018      	movs	r0, r3
 800391e:	f003 fb17 	bl	8006f50 <HAL_TIM_Base_Init>
 8003922:	1e03      	subs	r3, r0, #0
 8003924:	d001      	beq.n	800392a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003926:	f000 f8f3 	bl	8003b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800392a:	003b      	movs	r3, r7
 800392c:	2210      	movs	r2, #16
 800392e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003930:	003b      	movs	r3, r7
 8003932:	2200      	movs	r2, #0
 8003934:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003936:	003a      	movs	r2, r7
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <MX_TIM6_Init+0x6c>)
 800393a:	0011      	movs	r1, r2
 800393c:	0018      	movs	r0, r3
 800393e:	f004 f84f 	bl	80079e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d001      	beq.n	800394a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003946:	f000 f8e3 	bl	8003b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	46bd      	mov	sp, r7
 800394e:	b002      	add	sp, #8
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	20000658 	.word	0x20000658
 8003958:	40001000 	.word	0x40001000
 800395c:	00000f9f 	.word	0x00000f9f

08003960 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003966:	003b      	movs	r3, r7
 8003968:	0018      	movs	r0, r3
 800396a:	2308      	movs	r3, #8
 800396c:	001a      	movs	r2, r3
 800396e:	2100      	movs	r1, #0
 8003970:	f004 f8e4 	bl	8007b3c <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003974:	4b15      	ldr	r3, [pc, #84]	; (80039cc <MX_TIM7_Init+0x6c>)
 8003976:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <MX_TIM7_Init+0x70>)
 8003978:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 400-1;
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <MX_TIM7_Init+0x6c>)
 800397c:	2290      	movs	r2, #144	; 0x90
 800397e:	32ff      	adds	r2, #255	; 0xff
 8003980:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <MX_TIM7_Init+0x6c>)
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65536-1;
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <MX_TIM7_Init+0x6c>)
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <MX_TIM7_Init+0x74>)
 800398c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <MX_TIM7_Init+0x6c>)
 8003990:	2200      	movs	r2, #0
 8003992:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <MX_TIM7_Init+0x6c>)
 8003996:	0018      	movs	r0, r3
 8003998:	f003 fada 	bl	8006f50 <HAL_TIM_Base_Init>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d001      	beq.n	80039a4 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 80039a0:	f000 f8b6 	bl	8003b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a4:	003b      	movs	r3, r7
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039aa:	003b      	movs	r3, r7
 80039ac:	2200      	movs	r2, #0
 80039ae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80039b0:	003a      	movs	r2, r7
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <MX_TIM7_Init+0x6c>)
 80039b4:	0011      	movs	r1, r2
 80039b6:	0018      	movs	r0, r3
 80039b8:	f004 f812 	bl	80079e0 <HAL_TIMEx_MasterConfigSynchronization>
 80039bc:	1e03      	subs	r3, r0, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 80039c0:	f000 f8a6 	bl	8003b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200007b8 	.word	0x200007b8
 80039d0:	40001400 	.word	0x40001400
 80039d4:	0000ffff 	.word	0x0000ffff

080039d8 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039de:	2308      	movs	r3, #8
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	0018      	movs	r0, r3
 80039e4:	2310      	movs	r3, #16
 80039e6:	001a      	movs	r2, r3
 80039e8:	2100      	movs	r1, #0
 80039ea:	f004 f8a7 	bl	8007b3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ee:	003b      	movs	r3, r7
 80039f0:	0018      	movs	r0, r3
 80039f2:	2308      	movs	r3, #8
 80039f4:	001a      	movs	r2, r3
 80039f6:	2100      	movs	r1, #0
 80039f8:	f004 f8a0 	bl	8007b3c <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <MX_TIM21_Init+0xa4>)
 80039fe:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <MX_TIM21_Init+0xa8>)
 8003a00:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 4000;
 8003a02:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <MX_TIM21_Init+0xa4>)
 8003a04:	22fa      	movs	r2, #250	; 0xfa
 8003a06:	0112      	lsls	r2, r2, #4
 8003a08:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <MX_TIM21_Init+0xa4>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000;
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <MX_TIM21_Init+0xa4>)
 8003a12:	22fa      	movs	r2, #250	; 0xfa
 8003a14:	0092      	lsls	r2, r2, #2
 8003a16:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a18:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <MX_TIM21_Init+0xa4>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <MX_TIM21_Init+0xa4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <MX_TIM21_Init+0xa4>)
 8003a26:	0018      	movs	r0, r3
 8003a28:	f003 fa92 	bl	8006f50 <HAL_TIM_Base_Init>
 8003a2c:	1e03      	subs	r3, r0, #0
 8003a2e:	d001      	beq.n	8003a34 <MX_TIM21_Init+0x5c>
  {
    Error_Handler();
 8003a30:	f000 f86e 	bl	8003b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a34:	2108      	movs	r1, #8
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	0152      	lsls	r2, r2, #5
 8003a3c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003a3e:	187a      	adds	r2, r7, r1
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <MX_TIM21_Init+0xa4>)
 8003a42:	0011      	movs	r1, r2
 8003a44:	0018      	movs	r0, r3
 8003a46:	f003 fc8d 	bl	8007364 <HAL_TIM_ConfigClockSource>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 8003a4e:	f000 f85f 	bl	8003b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003a52:	003b      	movs	r3, r7
 8003a54:	2210      	movs	r2, #16
 8003a56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a58:	003b      	movs	r3, r7
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003a5e:	003a      	movs	r2, r7
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <MX_TIM21_Init+0xa4>)
 8003a62:	0011      	movs	r1, r2
 8003a64:	0018      	movs	r0, r3
 8003a66:	f003 ffbb 	bl	80079e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a6a:	1e03      	subs	r3, r0, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 8003a6e:	f000 f84f 	bl	8003b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b006      	add	sp, #24
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	20000850 	.word	0x20000850
 8003a80:	40010800 	.word	0x40010800

08003a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8a:	240c      	movs	r4, #12
 8003a8c:	193b      	adds	r3, r7, r4
 8003a8e:	0018      	movs	r0, r3
 8003a90:	2314      	movs	r3, #20
 8003a92:	001a      	movs	r2, r3
 8003a94:	2100      	movs	r1, #0
 8003a96:	f004 f851 	bl	8007b3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <MX_GPIO_Init+0x84>)
 8003a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <MX_GPIO_Init+0x84>)
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aa6:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <MX_GPIO_Init+0x84>)
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	2204      	movs	r2, #4
 8003aac:	4013      	ands	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <MX_GPIO_Init+0x84>)
 8003ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab6:	4b14      	ldr	r3, [pc, #80]	; (8003b08 <MX_GPIO_Init+0x84>)
 8003ab8:	2101      	movs	r1, #1
 8003aba:	430a      	orrs	r2, r1
 8003abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <MX_GPIO_Init+0x84>)
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <MX_GPIO_Init+0x84>)
 8003acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ace:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <MX_GPIO_Init+0x84>)
 8003ad0:	2102      	movs	r1, #2
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <MX_GPIO_Init+0x84>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	2202      	movs	r2, #2
 8003adc:	4013      	ands	r3, r2
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ae8:	193b      	adds	r3, r7, r4
 8003aea:	2200      	movs	r2, #0
 8003aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	193b      	adds	r3, r7, r4
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af4:	193b      	adds	r3, r7, r4
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <MX_GPIO_Init+0x88>)
 8003af8:	0019      	movs	r1, r3
 8003afa:	0010      	movs	r0, r2
 8003afc:	f000 fe4e 	bl	800479c <HAL_GPIO_Init>

}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b009      	add	sp, #36	; 0x24
 8003b06:	bd90      	pop	{r4, r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	50000400 	.word	0x50000400

08003b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b14:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b16:	e7fe      	b.n	8003b16 <Error_Handler+0x6>

08003b18 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003b1e:	f000 fa45 	bl	8003fac <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003b22:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <SSD1306_Init+0x178>)
 8003b24:	485b      	ldr	r0, [pc, #364]	; (8003c94 <SSD1306_Init+0x17c>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	2178      	movs	r1, #120	; 0x78
 8003b2a:	f001 fbd3 	bl	80052d4 <HAL_I2C_IsDeviceReady>
 8003b2e:	1e03      	subs	r3, r0, #0
 8003b30:	d001      	beq.n	8003b36 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e0a8      	b.n	8003c88 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003b36:	4b58      	ldr	r3, [pc, #352]	; (8003c98 <SSD1306_Init+0x180>)
 8003b38:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003b3a:	e002      	b.n	8003b42 <SSD1306_Init+0x2a>
		p--;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f9      	bne.n	8003b3c <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003b48:	22ae      	movs	r2, #174	; 0xae
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	2078      	movs	r0, #120	; 0x78
 8003b4e:	f000 fabd 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003b52:	2220      	movs	r2, #32
 8003b54:	2100      	movs	r1, #0
 8003b56:	2078      	movs	r0, #120	; 0x78
 8003b58:	f000 fab8 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	2100      	movs	r1, #0
 8003b60:	2078      	movs	r0, #120	; 0x78
 8003b62:	f000 fab3 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003b66:	22b0      	movs	r2, #176	; 0xb0
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2078      	movs	r0, #120	; 0x78
 8003b6c:	f000 faae 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003b70:	22c8      	movs	r2, #200	; 0xc8
 8003b72:	2100      	movs	r1, #0
 8003b74:	2078      	movs	r0, #120	; 0x78
 8003b76:	f000 faa9 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	2078      	movs	r0, #120	; 0x78
 8003b80:	f000 faa4 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003b84:	2210      	movs	r2, #16
 8003b86:	2100      	movs	r1, #0
 8003b88:	2078      	movs	r0, #120	; 0x78
 8003b8a:	f000 fa9f 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003b8e:	2240      	movs	r2, #64	; 0x40
 8003b90:	2100      	movs	r1, #0
 8003b92:	2078      	movs	r0, #120	; 0x78
 8003b94:	f000 fa9a 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003b98:	2281      	movs	r2, #129	; 0x81
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	2078      	movs	r0, #120	; 0x78
 8003b9e:	f000 fa95 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003ba2:	22ff      	movs	r2, #255	; 0xff
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	2078      	movs	r0, #120	; 0x78
 8003ba8:	f000 fa90 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003bac:	22a1      	movs	r2, #161	; 0xa1
 8003bae:	2100      	movs	r1, #0
 8003bb0:	2078      	movs	r0, #120	; 0x78
 8003bb2:	f000 fa8b 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003bb6:	22a6      	movs	r2, #166	; 0xa6
 8003bb8:	2100      	movs	r1, #0
 8003bba:	2078      	movs	r0, #120	; 0x78
 8003bbc:	f000 fa86 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003bc0:	22a8      	movs	r2, #168	; 0xa8
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	2078      	movs	r0, #120	; 0x78
 8003bc6:	f000 fa81 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003bca:	223f      	movs	r2, #63	; 0x3f
 8003bcc:	2100      	movs	r1, #0
 8003bce:	2078      	movs	r0, #120	; 0x78
 8003bd0:	f000 fa7c 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003bd4:	22a4      	movs	r2, #164	; 0xa4
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	2078      	movs	r0, #120	; 0x78
 8003bda:	f000 fa77 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003bde:	22d3      	movs	r2, #211	; 0xd3
 8003be0:	2100      	movs	r1, #0
 8003be2:	2078      	movs	r0, #120	; 0x78
 8003be4:	f000 fa72 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003be8:	2200      	movs	r2, #0
 8003bea:	2100      	movs	r1, #0
 8003bec:	2078      	movs	r0, #120	; 0x78
 8003bee:	f000 fa6d 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003bf2:	22d5      	movs	r2, #213	; 0xd5
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	2078      	movs	r0, #120	; 0x78
 8003bf8:	f000 fa68 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003bfc:	22f0      	movs	r2, #240	; 0xf0
 8003bfe:	2100      	movs	r1, #0
 8003c00:	2078      	movs	r0, #120	; 0x78
 8003c02:	f000 fa63 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003c06:	22d9      	movs	r2, #217	; 0xd9
 8003c08:	2100      	movs	r1, #0
 8003c0a:	2078      	movs	r0, #120	; 0x78
 8003c0c:	f000 fa5e 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003c10:	2222      	movs	r2, #34	; 0x22
 8003c12:	2100      	movs	r1, #0
 8003c14:	2078      	movs	r0, #120	; 0x78
 8003c16:	f000 fa59 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003c1a:	22da      	movs	r2, #218	; 0xda
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	2078      	movs	r0, #120	; 0x78
 8003c20:	f000 fa54 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003c24:	2212      	movs	r2, #18
 8003c26:	2100      	movs	r1, #0
 8003c28:	2078      	movs	r0, #120	; 0x78
 8003c2a:	f000 fa4f 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003c2e:	22db      	movs	r2, #219	; 0xdb
 8003c30:	2100      	movs	r1, #0
 8003c32:	2078      	movs	r0, #120	; 0x78
 8003c34:	f000 fa4a 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003c38:	2220      	movs	r2, #32
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	2078      	movs	r0, #120	; 0x78
 8003c3e:	f000 fa45 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003c42:	228d      	movs	r2, #141	; 0x8d
 8003c44:	2100      	movs	r1, #0
 8003c46:	2078      	movs	r0, #120	; 0x78
 8003c48:	f000 fa40 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003c4c:	2214      	movs	r2, #20
 8003c4e:	2100      	movs	r1, #0
 8003c50:	2078      	movs	r0, #120	; 0x78
 8003c52:	f000 fa3b 	bl	80040cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003c56:	22af      	movs	r2, #175	; 0xaf
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2078      	movs	r0, #120	; 0x78
 8003c5c:	f000 fa36 	bl	80040cc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003c60:	222e      	movs	r2, #46	; 0x2e
 8003c62:	2100      	movs	r1, #0
 8003c64:	2078      	movs	r0, #120	; 0x78
 8003c66:	f000 fa31 	bl	80040cc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f000 f84c 	bl	8003d08 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003c70:	f000 f816 	bl	8003ca0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <SSD1306_Init+0x184>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <SSD1306_Init+0x184>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <SSD1306_Init+0x184>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003c86:	2301      	movs	r3, #1
}
 8003c88:	0018      	movs	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	00004e20 	.word	0x00004e20
 8003c94:	2000052c 	.word	0x2000052c
 8003c98:	000009c4 	.word	0x000009c4
 8003c9c:	200004c8 	.word	0x200004c8

08003ca0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003ca6:	1dfb      	adds	r3, r7, #7
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e021      	b.n	8003cf2 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	3b50      	subs	r3, #80	; 0x50
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	2100      	movs	r1, #0
 8003cba:	2078      	movs	r0, #120	; 0x78
 8003cbc:	f000 fa06 	bl	80040cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	2078      	movs	r0, #120	; 0x78
 8003cc6:	f000 fa01 	bl	80040cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003cca:	2210      	movs	r2, #16
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2078      	movs	r0, #120	; 0x78
 8003cd0:	f000 f9fc 	bl	80040cc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003cd4:	1dfb      	adds	r3, r7, #7
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	01da      	lsls	r2, r3, #7
 8003cda:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <SSD1306_UpdateScreen+0x64>)
 8003cdc:	18d2      	adds	r2, r2, r3
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	2140      	movs	r1, #64	; 0x40
 8003ce2:	2078      	movs	r0, #120	; 0x78
 8003ce4:	f000 f974 	bl	8003fd0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003ce8:	1dfb      	adds	r3, r7, #7
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	1dfb      	adds	r3, r7, #7
 8003cee:	3201      	adds	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	1dfb      	adds	r3, r7, #7
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b07      	cmp	r3, #7
 8003cf8:	d9d9      	bls.n	8003cae <SSD1306_UpdateScreen+0xe>
	}
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	200000c8 	.word	0x200000c8

08003d08 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	0002      	movs	r2, r0
 8003d10:	1dfb      	adds	r3, r7, #7
 8003d12:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003d14:	1dfb      	adds	r3, r7, #7
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <SSD1306_Fill+0x18>
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	e000      	b.n	8003d22 <SSD1306_Fill+0x1a>
 8003d20:	21ff      	movs	r1, #255	; 0xff
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	00da      	lsls	r2, r3, #3
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <SSD1306_Fill+0x30>)
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f003 ff07 	bl	8007b3c <memset>
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b002      	add	sp, #8
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	200000c8 	.word	0x200000c8

08003d3c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	0004      	movs	r4, r0
 8003d44:	0008      	movs	r0, r1
 8003d46:	0011      	movs	r1, r2
 8003d48:	1dbb      	adds	r3, r7, #6
 8003d4a:	1c22      	adds	r2, r4, #0
 8003d4c:	801a      	strh	r2, [r3, #0]
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	1c02      	adds	r2, r0, #0
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	1cfb      	adds	r3, r7, #3
 8003d56:	1c0a      	adds	r2, r1, #0
 8003d58:	701a      	strb	r2, [r3, #0]
	if (
 8003d5a:	1dbb      	adds	r3, r7, #6
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d60:	d852      	bhi.n	8003e08 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	2b3f      	cmp	r3, #63	; 0x3f
 8003d68:	d84e      	bhi.n	8003e08 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003d6a:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <SSD1306_DrawPixel+0xd4>)
 8003d6c:	791b      	ldrb	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d006      	beq.n	8003d80 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8003d72:	1cfb      	adds	r3, r7, #3
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	425a      	negs	r2, r3
 8003d78:	4153      	adcs	r3, r2
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	1cfb      	adds	r3, r7, #3
 8003d7e:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003d80:	1cfb      	adds	r3, r7, #3
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d11e      	bne.n	8003dc6 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003d88:	1dbb      	adds	r3, r7, #6
 8003d8a:	881a      	ldrh	r2, [r3, #0]
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	08db      	lsrs	r3, r3, #3
 8003d92:	b298      	uxth	r0, r3
 8003d94:	0003      	movs	r3, r0
 8003d96:	01db      	lsls	r3, r3, #7
 8003d98:	18d3      	adds	r3, r2, r3
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <SSD1306_DrawPixel+0xd8>)
 8003d9c:	5cd3      	ldrb	r3, [r2, r3]
 8003d9e:	b25a      	sxtb	r2, r3
 8003da0:	1d3b      	adds	r3, r7, #4
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	2107      	movs	r1, #7
 8003da6:	400b      	ands	r3, r1
 8003da8:	2101      	movs	r1, #1
 8003daa:	4099      	lsls	r1, r3
 8003dac:	000b      	movs	r3, r1
 8003dae:	b25b      	sxtb	r3, r3
 8003db0:	4313      	orrs	r3, r2
 8003db2:	b259      	sxtb	r1, r3
 8003db4:	1dbb      	adds	r3, r7, #6
 8003db6:	881a      	ldrh	r2, [r3, #0]
 8003db8:	0003      	movs	r3, r0
 8003dba:	01db      	lsls	r3, r3, #7
 8003dbc:	18d3      	adds	r3, r2, r3
 8003dbe:	b2c9      	uxtb	r1, r1
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <SSD1306_DrawPixel+0xd8>)
 8003dc2:	54d1      	strb	r1, [r2, r3]
 8003dc4:	e021      	b.n	8003e0a <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003dc6:	1dbb      	adds	r3, r7, #6
 8003dc8:	881a      	ldrh	r2, [r3, #0]
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	08db      	lsrs	r3, r3, #3
 8003dd0:	b298      	uxth	r0, r3
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	01db      	lsls	r3, r3, #7
 8003dd6:	18d3      	adds	r3, r2, r3
 8003dd8:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <SSD1306_DrawPixel+0xd8>)
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	b25b      	sxtb	r3, r3
 8003dde:	1d3a      	adds	r2, r7, #4
 8003de0:	8812      	ldrh	r2, [r2, #0]
 8003de2:	2107      	movs	r1, #7
 8003de4:	400a      	ands	r2, r1
 8003de6:	2101      	movs	r1, #1
 8003de8:	4091      	lsls	r1, r2
 8003dea:	000a      	movs	r2, r1
 8003dec:	b252      	sxtb	r2, r2
 8003dee:	43d2      	mvns	r2, r2
 8003df0:	b252      	sxtb	r2, r2
 8003df2:	4013      	ands	r3, r2
 8003df4:	b259      	sxtb	r1, r3
 8003df6:	1dbb      	adds	r3, r7, #6
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	01db      	lsls	r3, r3, #7
 8003dfe:	18d3      	adds	r3, r2, r3
 8003e00:	b2c9      	uxtb	r1, r1
 8003e02:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <SSD1306_DrawPixel+0xd8>)
 8003e04:	54d1      	strb	r1, [r2, r3]
 8003e06:	e000      	b.n	8003e0a <SSD1306_DrawPixel+0xce>
		return;
 8003e08:	46c0      	nop			; (mov r8, r8)
	}
}
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b003      	add	sp, #12
 8003e0e:	bd90      	pop	{r4, r7, pc}
 8003e10:	200004c8 	.word	0x200004c8
 8003e14:	200000c8 	.word	0x200000c8

08003e18 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	0002      	movs	r2, r0
 8003e20:	1dbb      	adds	r3, r7, #6
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	1c0a      	adds	r2, r1, #0
 8003e28:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <SSD1306_GotoXY+0x2c>)
 8003e2c:	1dba      	adds	r2, r7, #6
 8003e2e:	8812      	ldrh	r2, [r2, #0]
 8003e30:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8003e32:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <SSD1306_GotoXY+0x2c>)
 8003e34:	1d3a      	adds	r2, r7, #4
 8003e36:	8812      	ldrh	r2, [r2, #0]
 8003e38:	805a      	strh	r2, [r3, #2]
}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b002      	add	sp, #8
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	200004c8 	.word	0x200004c8

08003e48 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6039      	str	r1, [r7, #0]
 8003e50:	0011      	movs	r1, r2
 8003e52:	1dfb      	adds	r3, r7, #7
 8003e54:	1c02      	adds	r2, r0, #0
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	1dbb      	adds	r3, r7, #6
 8003e5a:	1c0a      	adds	r2, r1, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003e5e:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <SSD1306_Putc+0x100>)
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	001a      	movs	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	18d3      	adds	r3, r2, r3
	if (
 8003e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e6c:	dc07      	bgt.n	8003e7e <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <SSD1306_Putc+0x100>)
 8003e70:	885b      	ldrh	r3, [r3, #2]
 8003e72:	001a      	movs	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	785b      	ldrb	r3, [r3, #1]
 8003e78:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003e7a:	2b3f      	cmp	r3, #63	; 0x3f
 8003e7c:	dd01      	ble.n	8003e82 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e05e      	b.n	8003f40 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e04a      	b.n	8003f1e <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	1dfb      	adds	r3, r7, #7
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	3b20      	subs	r3, #32
 8003e92:	6839      	ldr	r1, [r7, #0]
 8003e94:	7849      	ldrb	r1, [r1, #1]
 8003e96:	434b      	muls	r3, r1
 8003e98:	0019      	movs	r1, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	18cb      	adds	r3, r1, r3
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	18d3      	adds	r3, r2, r3
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	e02f      	b.n	8003f0c <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d011      	beq.n	8003ede <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003eba:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <SSD1306_Putc+0x100>)
 8003ebc:	881a      	ldrh	r2, [r3, #0]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	18d3      	adds	r3, r2, r3
 8003ec4:	b298      	uxth	r0, r3
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <SSD1306_Putc+0x100>)
 8003ec8:	885a      	ldrh	r2, [r3, #2]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	18d3      	adds	r3, r2, r3
 8003ed0:	b299      	uxth	r1, r3
 8003ed2:	1dbb      	adds	r3, r7, #6
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	001a      	movs	r2, r3
 8003ed8:	f7ff ff30 	bl	8003d3c <SSD1306_DrawPixel>
 8003edc:	e013      	b.n	8003f06 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <SSD1306_Putc+0x100>)
 8003ee0:	881a      	ldrh	r2, [r3, #0]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	18d3      	adds	r3, r2, r3
 8003ee8:	b298      	uxth	r0, r3
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <SSD1306_Putc+0x100>)
 8003eec:	885a      	ldrh	r2, [r3, #2]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	18d3      	adds	r3, r2, r3
 8003ef4:	b299      	uxth	r1, r3
 8003ef6:	1dbb      	adds	r3, r7, #6
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	425a      	negs	r2, r3
 8003efc:	4153      	adcs	r3, r2
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	001a      	movs	r2, r3
 8003f02:	f7ff ff1b 	bl	8003d3c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	001a      	movs	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d3c9      	bcc.n	8003eac <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	001a      	movs	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d3ae      	bcc.n	8003e88 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <SSD1306_Putc+0x100>)
 8003f2c:	881a      	ldrh	r2, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	18d3      	adds	r3, r2, r3
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <SSD1306_Putc+0x100>)
 8003f3a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003f3c:	1dfb      	adds	r3, r7, #7
 8003f3e:	781b      	ldrb	r3, [r3, #0]
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b006      	add	sp, #24
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	200004c8 	.word	0x200004c8

08003f4c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	1dfb      	adds	r3, r7, #7
 8003f58:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8003f5a:	e013      	b.n	8003f84 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	7818      	ldrb	r0, [r3, #0]
 8003f60:	1dfb      	adds	r3, r7, #7
 8003f62:	781a      	ldrb	r2, [r3, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	0019      	movs	r1, r3
 8003f68:	f7ff ff6e 	bl	8003e48 <SSD1306_Putc>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	001a      	movs	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d002      	beq.n	8003f7e <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	e008      	b.n	8003f90 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e7      	bne.n	8003f5c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b004      	add	sp, #16
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7ff feb3 	bl	8003d08 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003fa2:	f7ff fe7d 	bl	8003ca0 <SSD1306_UpdateScreen>
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <ssd1306_I2C_Init+0x20>)
 8003fb4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003fb6:	e002      	b.n	8003fbe <ssd1306_I2C_Init+0x12>
		p--;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f9      	bne.n	8003fb8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	0003d090 	.word	0x0003d090

08003fd0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003fd0:	b590      	push	{r4, r7, lr}
 8003fd2:	b0c7      	sub	sp, #284	; 0x11c
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	0004      	movs	r4, r0
 8003fd8:	0008      	movs	r0, r1
 8003fda:	603a      	str	r2, [r7, #0]
 8003fdc:	0019      	movs	r1, r3
 8003fde:	4b36      	ldr	r3, [pc, #216]	; (80040b8 <ssd1306_I2C_WriteMulti+0xe8>)
 8003fe0:	2288      	movs	r2, #136	; 0x88
 8003fe2:	0052      	lsls	r2, r2, #1
 8003fe4:	4694      	mov	ip, r2
 8003fe6:	44bc      	add	ip, r7
 8003fe8:	4463      	add	r3, ip
 8003fea:	1c22      	adds	r2, r4, #0
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	4b33      	ldr	r3, [pc, #204]	; (80040bc <ssd1306_I2C_WriteMulti+0xec>)
 8003ff0:	2288      	movs	r2, #136	; 0x88
 8003ff2:	0052      	lsls	r2, r2, #1
 8003ff4:	4694      	mov	ip, r2
 8003ff6:	44bc      	add	ip, r7
 8003ff8:	4463      	add	r3, ip
 8003ffa:	1c02      	adds	r2, r0, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	4b30      	ldr	r3, [pc, #192]	; (80040c0 <ssd1306_I2C_WriteMulti+0xf0>)
 8004000:	2288      	movs	r2, #136	; 0x88
 8004002:	0052      	lsls	r2, r2, #1
 8004004:	4694      	mov	ip, r2
 8004006:	44bc      	add	ip, r7
 8004008:	4463      	add	r3, ip
 800400a:	1c0a      	adds	r2, r1, #0
 800400c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800400e:	4b2d      	ldr	r3, [pc, #180]	; (80040c4 <ssd1306_I2C_WriteMulti+0xf4>)
 8004010:	2288      	movs	r2, #136	; 0x88
 8004012:	0052      	lsls	r2, r2, #1
 8004014:	4694      	mov	ip, r2
 8004016:	44bc      	add	ip, r7
 8004018:	4463      	add	r3, ip
 800401a:	4a28      	ldr	r2, [pc, #160]	; (80040bc <ssd1306_I2C_WriteMulti+0xec>)
 800401c:	2188      	movs	r1, #136	; 0x88
 800401e:	0049      	lsls	r1, r1, #1
 8004020:	468c      	mov	ip, r1
 8004022:	44bc      	add	ip, r7
 8004024:	4462      	add	r2, ip
 8004026:	7812      	ldrb	r2, [r2, #0]
 8004028:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800402a:	2310      	movs	r3, #16
 800402c:	33ff      	adds	r3, #255	; 0xff
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	e015      	b.n	8004062 <ssd1306_I2C_WriteMulti+0x92>
dt[i+1] = data[i];
 8004036:	2010      	movs	r0, #16
 8004038:	30ff      	adds	r0, #255	; 0xff
 800403a:	183b      	adds	r3, r7, r0
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	18d2      	adds	r2, r2, r3
 8004042:	183b      	adds	r3, r7, r0
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	3301      	adds	r3, #1
 8004048:	7811      	ldrb	r1, [r2, #0]
 800404a:	4a1e      	ldr	r2, [pc, #120]	; (80040c4 <ssd1306_I2C_WriteMulti+0xf4>)
 800404c:	2488      	movs	r4, #136	; 0x88
 800404e:	0064      	lsls	r4, r4, #1
 8004050:	46a4      	mov	ip, r4
 8004052:	44bc      	add	ip, r7
 8004054:	4462      	add	r2, ip
 8004056:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004058:	183b      	adds	r3, r7, r0
 800405a:	781a      	ldrb	r2, [r3, #0]
 800405c:	183b      	adds	r3, r7, r0
 800405e:	3201      	adds	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	2310      	movs	r3, #16
 8004064:	33ff      	adds	r3, #255	; 0xff
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <ssd1306_I2C_WriteMulti+0xf0>)
 800406e:	2188      	movs	r1, #136	; 0x88
 8004070:	0049      	lsls	r1, r1, #1
 8004072:	468c      	mov	ip, r1
 8004074:	44bc      	add	ip, r7
 8004076:	4462      	add	r2, ip
 8004078:	8812      	ldrh	r2, [r2, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d8db      	bhi.n	8004036 <ssd1306_I2C_WriteMulti+0x66>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <ssd1306_I2C_WriteMulti+0xe8>)
 8004080:	2288      	movs	r2, #136	; 0x88
 8004082:	0052      	lsls	r2, r2, #1
 8004084:	4694      	mov	ip, r2
 8004086:	44bc      	add	ip, r7
 8004088:	4463      	add	r3, ip
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b299      	uxth	r1, r3
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <ssd1306_I2C_WriteMulti+0xf0>)
 8004090:	2288      	movs	r2, #136	; 0x88
 8004092:	0052      	lsls	r2, r2, #1
 8004094:	4694      	mov	ip, r2
 8004096:	44bc      	add	ip, r7
 8004098:	4463      	add	r3, ip
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	b29c      	uxth	r4, r3
 80040a0:	230c      	movs	r3, #12
 80040a2:	18fa      	adds	r2, r7, r3
 80040a4:	4808      	ldr	r0, [pc, #32]	; (80040c8 <ssd1306_I2C_WriteMulti+0xf8>)
 80040a6:	230a      	movs	r3, #10
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	0023      	movs	r3, r4
 80040ac:	f000 fda8 	bl	8004c00 <HAL_I2C_Master_Transmit>
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b045      	add	sp, #276	; 0x114
 80040b6:	bd90      	pop	{r4, r7, pc}
 80040b8:	fffffef7 	.word	0xfffffef7
 80040bc:	fffffef6 	.word	0xfffffef6
 80040c0:	fffffef4 	.word	0xfffffef4
 80040c4:	fffffefc 	.word	0xfffffefc
 80040c8:	2000052c 	.word	0x2000052c

080040cc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	0004      	movs	r4, r0
 80040d4:	0008      	movs	r0, r1
 80040d6:	0011      	movs	r1, r2
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	1c22      	adds	r2, r4, #0
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	1dbb      	adds	r3, r7, #6
 80040e0:	1c02      	adds	r2, r0, #0
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	1d7b      	adds	r3, r7, #5
 80040e6:	1c0a      	adds	r2, r1, #0
 80040e8:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 80040ea:	200c      	movs	r0, #12
 80040ec:	183b      	adds	r3, r7, r0
 80040ee:	1dba      	adds	r2, r7, #6
 80040f0:	7812      	ldrb	r2, [r2, #0]
 80040f2:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 80040f4:	183b      	adds	r3, r7, r0
 80040f6:	1d7a      	adds	r2, r7, #5
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80040fc:	1dfb      	adds	r3, r7, #7
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b299      	uxth	r1, r3
 8004102:	183a      	adds	r2, r7, r0
 8004104:	4804      	ldr	r0, [pc, #16]	; (8004118 <ssd1306_I2C_Write+0x4c>)
 8004106:	230a      	movs	r3, #10
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	2302      	movs	r3, #2
 800410c:	f000 fd78 	bl	8004c00 <HAL_I2C_Master_Transmit>
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b005      	add	sp, #20
 8004116:	bd90      	pop	{r4, r7, pc}
 8004118:	2000052c 	.word	0x2000052c

0800411c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <HAL_MspInit+0x24>)
 8004122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_MspInit+0x24>)
 8004126:	2101      	movs	r1, #1
 8004128:	430a      	orrs	r2, r1
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_MspInit+0x24>)
 800412e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <HAL_MspInit+0x24>)
 8004132:	2180      	movs	r1, #128	; 0x80
 8004134:	0549      	lsls	r1, r1, #21
 8004136:	430a      	orrs	r2, r1
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000

08004144 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b08b      	sub	sp, #44	; 0x2c
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	2314      	movs	r3, #20
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	0018      	movs	r0, r3
 8004152:	2314      	movs	r3, #20
 8004154:	001a      	movs	r2, r3
 8004156:	2100      	movs	r1, #0
 8004158:	f003 fcf0 	bl	8007b3c <memset>
  if(hi2c->Instance==I2C1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a42      	ldr	r2, [pc, #264]	; (800426c <HAL_I2C_MspInit+0x128>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d12b      	bne.n	80041be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004166:	4b42      	ldr	r3, [pc, #264]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 8004168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416a:	4b41      	ldr	r3, [pc, #260]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 800416c:	2101      	movs	r1, #1
 800416e:	430a      	orrs	r2, r1
 8004170:	62da      	str	r2, [r3, #44]	; 0x2c
 8004172:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	2201      	movs	r2, #1
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800417e:	2114      	movs	r1, #20
 8004180:	187b      	adds	r3, r7, r1
 8004182:	22c0      	movs	r2, #192	; 0xc0
 8004184:	00d2      	lsls	r2, r2, #3
 8004186:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004188:	187b      	adds	r3, r7, r1
 800418a:	2212      	movs	r2, #18
 800418c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800418e:	187b      	adds	r3, r7, r1
 8004190:	2201      	movs	r2, #1
 8004192:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004194:	187b      	adds	r3, r7, r1
 8004196:	2203      	movs	r2, #3
 8004198:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800419a:	187b      	adds	r3, r7, r1
 800419c:	2206      	movs	r2, #6
 800419e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a0:	187a      	adds	r2, r7, r1
 80041a2:	23a0      	movs	r3, #160	; 0xa0
 80041a4:	05db      	lsls	r3, r3, #23
 80041a6:	0011      	movs	r1, r2
 80041a8:	0018      	movs	r0, r3
 80041aa:	f000 faf7 	bl	800479c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041ae:	4b30      	ldr	r3, [pc, #192]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 80041b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b2:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 80041b4:	2180      	movs	r1, #128	; 0x80
 80041b6:	0389      	lsls	r1, r1, #14
 80041b8:	430a      	orrs	r2, r1
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80041bc:	e052      	b.n	8004264 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2c      	ldr	r2, [pc, #176]	; (8004274 <HAL_I2C_MspInit+0x130>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d14d      	bne.n	8004264 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c8:	4b29      	ldr	r3, [pc, #164]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	4b28      	ldr	r3, [pc, #160]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 80041ce:	2101      	movs	r1, #1
 80041d0:	430a      	orrs	r2, r1
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80041d4:	4b26      	ldr	r3, [pc, #152]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	2201      	movs	r2, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e0:	4b23      	ldr	r3, [pc, #140]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	4b22      	ldr	r3, [pc, #136]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 80041e6:	2102      	movs	r1, #2
 80041e8:	430a      	orrs	r2, r1
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	2202      	movs	r2, #2
 80041f2:	4013      	ands	r3, r2
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041f8:	2114      	movs	r1, #20
 80041fa:	187b      	adds	r3, r7, r1
 80041fc:	2280      	movs	r2, #128	; 0x80
 80041fe:	0052      	lsls	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004202:	000c      	movs	r4, r1
 8004204:	193b      	adds	r3, r7, r4
 8004206:	2212      	movs	r2, #18
 8004208:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800420a:	193b      	adds	r3, r7, r4
 800420c:	2201      	movs	r2, #1
 800420e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004210:	193b      	adds	r3, r7, r4
 8004212:	2203      	movs	r2, #3
 8004214:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_I2C3;
 8004216:	193b      	adds	r3, r7, r4
 8004218:	2207      	movs	r2, #7
 800421a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421c:	193a      	adds	r2, r7, r4
 800421e:	23a0      	movs	r3, #160	; 0xa0
 8004220:	05db      	lsls	r3, r3, #23
 8004222:	0011      	movs	r1, r2
 8004224:	0018      	movs	r0, r3
 8004226:	f000 fab9 	bl	800479c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800422a:	0021      	movs	r1, r4
 800422c:	187b      	adds	r3, r7, r1
 800422e:	2210      	movs	r2, #16
 8004230:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004232:	187b      	adds	r3, r7, r1
 8004234:	2212      	movs	r2, #18
 8004236:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004238:	187b      	adds	r3, r7, r1
 800423a:	2201      	movs	r2, #1
 800423c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423e:	187b      	adds	r3, r7, r1
 8004240:	2203      	movs	r2, #3
 8004242:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_I2C3;
 8004244:	187b      	adds	r3, r7, r1
 8004246:	2207      	movs	r2, #7
 8004248:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800424a:	187b      	adds	r3, r7, r1
 800424c:	4a0a      	ldr	r2, [pc, #40]	; (8004278 <HAL_I2C_MspInit+0x134>)
 800424e:	0019      	movs	r1, r3
 8004250:	0010      	movs	r0, r2
 8004252:	f000 faa3 	bl	800479c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 8004258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_I2C_MspInit+0x12c>)
 800425c:	2180      	movs	r1, #128	; 0x80
 800425e:	05c9      	lsls	r1, r1, #23
 8004260:	430a      	orrs	r2, r1
 8004262:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	b00b      	add	sp, #44	; 0x2c
 800426a:	bd90      	pop	{r4, r7, pc}
 800426c:	40005400 	.word	0x40005400
 8004270:	40021000 	.word	0x40021000
 8004274:	40007800 	.word	0x40007800
 8004278:	50000400 	.word	0x50000400

0800427c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a06      	ldr	r2, [pc, #24]	; (80042a4 <HAL_RTC_MspInit+0x28>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d106      	bne.n	800429c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RTC_MspInit+0x2c>)
 8004290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <HAL_RTC_MspInit+0x2c>)
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	02c9      	lsls	r1, r1, #11
 8004298:	430a      	orrs	r2, r1
 800429a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b002      	add	sp, #8
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40002800 	.word	0x40002800
 80042a8:	40021000 	.word	0x40021000

080042ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	05db      	lsls	r3, r3, #23
 80042bc:	429a      	cmp	r2, r3
 80042be:	d10e      	bne.n	80042de <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042c0:	4b28      	ldr	r3, [pc, #160]	; (8004364 <HAL_TIM_Base_MspInit+0xb8>)
 80042c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c4:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_TIM_Base_MspInit+0xb8>)
 80042c6:	2101      	movs	r1, #1
 80042c8:	430a      	orrs	r2, r1
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042cc:	2200      	movs	r2, #0
 80042ce:	2100      	movs	r1, #0
 80042d0:	200f      	movs	r0, #15
 80042d2:	f000 fa31 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042d6:	200f      	movs	r0, #15
 80042d8:	f000 fa43 	bl	8004762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80042dc:	e03e      	b.n	800435c <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a21      	ldr	r2, [pc, #132]	; (8004368 <HAL_TIM_Base_MspInit+0xbc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d106      	bne.n	80042f6 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042e8:	4b1e      	ldr	r3, [pc, #120]	; (8004364 <HAL_TIM_Base_MspInit+0xb8>)
 80042ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_TIM_Base_MspInit+0xb8>)
 80042ee:	2102      	movs	r1, #2
 80042f0:	430a      	orrs	r2, r1
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80042f4:	e032      	b.n	800435c <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM6)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1c      	ldr	r2, [pc, #112]	; (800436c <HAL_TIM_Base_MspInit+0xc0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d10e      	bne.n	800431e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004300:	4b18      	ldr	r3, [pc, #96]	; (8004364 <HAL_TIM_Base_MspInit+0xb8>)
 8004302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004304:	4b17      	ldr	r3, [pc, #92]	; (8004364 <HAL_TIM_Base_MspInit+0xb8>)
 8004306:	2110      	movs	r1, #16
 8004308:	430a      	orrs	r2, r1
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800430c:	2200      	movs	r2, #0
 800430e:	2100      	movs	r1, #0
 8004310:	2011      	movs	r0, #17
 8004312:	f000 fa11 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004316:	2011      	movs	r0, #17
 8004318:	f000 fa23 	bl	8004762 <HAL_NVIC_EnableIRQ>
}
 800431c:	e01e      	b.n	800435c <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM7)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a13      	ldr	r2, [pc, #76]	; (8004370 <HAL_TIM_Base_MspInit+0xc4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d106      	bne.n	8004336 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_TIM_Base_MspInit+0xb8>)
 800432a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432c:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_TIM_Base_MspInit+0xb8>)
 800432e:	2120      	movs	r1, #32
 8004330:	430a      	orrs	r2, r1
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004334:	e012      	b.n	800435c <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM21)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <HAL_TIM_Base_MspInit+0xc8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d10d      	bne.n	800435c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <HAL_TIM_Base_MspInit+0xb8>)
 8004342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004344:	4b07      	ldr	r3, [pc, #28]	; (8004364 <HAL_TIM_Base_MspInit+0xb8>)
 8004346:	2104      	movs	r1, #4
 8004348:	430a      	orrs	r2, r1
 800434a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 1, 0);
 800434c:	2200      	movs	r2, #0
 800434e:	2101      	movs	r1, #1
 8004350:	2014      	movs	r0, #20
 8004352:	f000 f9f1 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8004356:	2014      	movs	r0, #20
 8004358:	f000 fa03 	bl	8004762 <HAL_NVIC_EnableIRQ>
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b002      	add	sp, #8
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000
 8004368:	40000400 	.word	0x40000400
 800436c:	40001000 	.word	0x40001000
 8004370:	40001400 	.word	0x40001400
 8004374:	40010800 	.word	0x40010800

08004378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800437c:	e7fe      	b.n	800437c <NMI_Handler+0x4>

0800437e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004382:	e7fe      	b.n	8004382 <HardFault_Handler+0x4>

08004384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800439c:	f000 f8e2 	bl	8004564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043a0:	46c0      	nop			; (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <TIM2_IRQHandler+0x14>)
 80043ae:	0018      	movs	r0, r3
 80043b0:	f002 fed6 	bl	8007160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	2000071c 	.word	0x2000071c

080043c0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <TIM6_IRQHandler+0x14>)
 80043c6:	0018      	movs	r0, r3
 80043c8:	f002 feca 	bl	8007160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	20000658 	.word	0x20000658

080043d8 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80043dc:	4b03      	ldr	r3, [pc, #12]	; (80043ec <TIM21_IRQHandler+0x14>)
 80043de:	0018      	movs	r0, r3
 80043e0:	f002 febe 	bl	8007160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	20000850 	.word	0x20000850

080043f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <_sbrk+0x5c>)
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <_sbrk+0x60>)
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <_sbrk+0x64>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <_sbrk+0x64>)
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <_sbrk+0x68>)
 8004410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <_sbrk+0x64>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	18d3      	adds	r3, r2, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	429a      	cmp	r2, r3
 800441e:	d207      	bcs.n	8004430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004420:	f003 fb62 	bl	8007ae8 <__errno>
 8004424:	0003      	movs	r3, r0
 8004426:	220c      	movs	r2, #12
 8004428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800442a:	2301      	movs	r3, #1
 800442c:	425b      	negs	r3, r3
 800442e:	e009      	b.n	8004444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004430:	4b08      	ldr	r3, [pc, #32]	; (8004454 <_sbrk+0x64>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <_sbrk+0x64>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	18d2      	adds	r2, r2, r3
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <_sbrk+0x64>)
 8004440:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004442:	68fb      	ldr	r3, [r7, #12]
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b006      	add	sp, #24
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20005000 	.word	0x20005000
 8004450:	00000400 	.word	0x00000400
 8004454:	200004d0 	.word	0x200004d0
 8004458:	200008f0 	.word	0x200008f0

0800445c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004468:	480d      	ldr	r0, [pc, #52]	; (80044a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800446a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800446c:	480d      	ldr	r0, [pc, #52]	; (80044a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800446e:	490e      	ldr	r1, [pc, #56]	; (80044a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004470:	4a0e      	ldr	r2, [pc, #56]	; (80044ac <LoopForever+0xe>)
  movs r3, #0
 8004472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004474:	e002      	b.n	800447c <LoopCopyDataInit>

08004476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800447a:	3304      	adds	r3, #4

0800447c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800447c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800447e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004480:	d3f9      	bcc.n	8004476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004482:	4a0b      	ldr	r2, [pc, #44]	; (80044b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004484:	4c0b      	ldr	r4, [pc, #44]	; (80044b4 <LoopForever+0x16>)
  movs r3, #0
 8004486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004488:	e001      	b.n	800448e <LoopFillZerobss>

0800448a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800448a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800448c:	3204      	adds	r2, #4

0800448e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800448e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004490:	d3fb      	bcc.n	800448a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004492:	f7ff ffe3 	bl	800445c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004496:	f003 fb2d 	bl	8007af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800449a:	f7fe ffbd 	bl	8003418 <main>

0800449e <LoopForever>:

LoopForever:
    b LoopForever
 800449e:	e7fe      	b.n	800449e <LoopForever>
   ldr   r0, =_estack
 80044a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80044a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044a8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80044ac:	0800b100 	.word	0x0800b100
  ldr r2, =_sbss
 80044b0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80044b4:	200008f0 	.word	0x200008f0

080044b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044b8:	e7fe      	b.n	80044b8 <ADC1_COMP_IRQHandler>
	...

080044bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044c2:	1dfb      	adds	r3, r7, #7
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_Init+0x3c>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <HAL_Init+0x3c>)
 80044ce:	2140      	movs	r1, #64	; 0x40
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044d4:	2000      	movs	r0, #0
 80044d6:	f000 f811 	bl	80044fc <HAL_InitTick>
 80044da:	1e03      	subs	r3, r0, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80044de:	1dfb      	adds	r3, r7, #7
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e001      	b.n	80044ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044e6:	f7ff fe19 	bl	800411c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	781b      	ldrb	r3, [r3, #0]
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	40022000 	.word	0x40022000

080044fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044fc:	b590      	push	{r4, r7, lr}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004504:	4b14      	ldr	r3, [pc, #80]	; (8004558 <HAL_InitTick+0x5c>)
 8004506:	681c      	ldr	r4, [r3, #0]
 8004508:	4b14      	ldr	r3, [pc, #80]	; (800455c <HAL_InitTick+0x60>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	0019      	movs	r1, r3
 800450e:	23fa      	movs	r3, #250	; 0xfa
 8004510:	0098      	lsls	r0, r3, #2
 8004512:	f7fb fe03 	bl	800011c <__udivsi3>
 8004516:	0003      	movs	r3, r0
 8004518:	0019      	movs	r1, r3
 800451a:	0020      	movs	r0, r4
 800451c:	f7fb fdfe 	bl	800011c <__udivsi3>
 8004520:	0003      	movs	r3, r0
 8004522:	0018      	movs	r0, r3
 8004524:	f000 f92d 	bl	8004782 <HAL_SYSTICK_Config>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d001      	beq.n	8004530 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e00f      	b.n	8004550 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d80b      	bhi.n	800454e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	2301      	movs	r3, #1
 800453a:	425b      	negs	r3, r3
 800453c:	2200      	movs	r2, #0
 800453e:	0018      	movs	r0, r3
 8004540:	f000 f8fa 	bl	8004738 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_InitTick+0x64>)
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b003      	add	sp, #12
 8004556:	bd90      	pop	{r4, r7, pc}
 8004558:	20000010 	.word	0x20000010
 800455c:	20000018 	.word	0x20000018
 8004560:	20000014 	.word	0x20000014

08004564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_IncTick+0x1c>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	001a      	movs	r2, r3
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_IncTick+0x20>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	18d2      	adds	r2, r2, r3
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_IncTick+0x20>)
 8004576:	601a      	str	r2, [r3, #0]
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	20000018 	.word	0x20000018
 8004584:	200008e8 	.word	0x200008e8

08004588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  return uwTick;
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <HAL_GetTick+0x10>)
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	200008e8 	.word	0x200008e8

0800459c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045a4:	f7ff fff0 	bl	8004588 <HAL_GetTick>
 80045a8:	0003      	movs	r3, r0
 80045aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3301      	adds	r3, #1
 80045b4:	d005      	beq.n	80045c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_Delay+0x40>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	001a      	movs	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	f7ff ffe0 	bl	8004588 <HAL_GetTick>
 80045c8:	0002      	movs	r2, r0
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d8f7      	bhi.n	80045c4 <HAL_Delay+0x28>
  {
  }
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000018 	.word	0x20000018

080045e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	0002      	movs	r2, r0
 80045e8:	1dfb      	adds	r3, r7, #7
 80045ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045ec:	1dfb      	adds	r3, r7, #7
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b7f      	cmp	r3, #127	; 0x7f
 80045f2:	d809      	bhi.n	8004608 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045f4:	1dfb      	adds	r3, r7, #7
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	001a      	movs	r2, r3
 80045fa:	231f      	movs	r3, #31
 80045fc:	401a      	ands	r2, r3
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <__NVIC_EnableIRQ+0x30>)
 8004600:	2101      	movs	r1, #1
 8004602:	4091      	lsls	r1, r2
 8004604:	000a      	movs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]
  }
}
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	b002      	add	sp, #8
 800460e:	bd80      	pop	{r7, pc}
 8004610:	e000e100 	.word	0xe000e100

08004614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	0002      	movs	r2, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	1dfb      	adds	r3, r7, #7
 8004620:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004622:	1dfb      	adds	r3, r7, #7
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b7f      	cmp	r3, #127	; 0x7f
 8004628:	d828      	bhi.n	800467c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800462a:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <__NVIC_SetPriority+0xd4>)
 800462c:	1dfb      	adds	r3, r7, #7
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b25b      	sxtb	r3, r3
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	33c0      	adds	r3, #192	; 0xc0
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	589b      	ldr	r3, [r3, r2]
 800463a:	1dfa      	adds	r2, r7, #7
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	0011      	movs	r1, r2
 8004640:	2203      	movs	r2, #3
 8004642:	400a      	ands	r2, r1
 8004644:	00d2      	lsls	r2, r2, #3
 8004646:	21ff      	movs	r1, #255	; 0xff
 8004648:	4091      	lsls	r1, r2
 800464a:	000a      	movs	r2, r1
 800464c:	43d2      	mvns	r2, r2
 800464e:	401a      	ands	r2, r3
 8004650:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	22ff      	movs	r2, #255	; 0xff
 8004658:	401a      	ands	r2, r3
 800465a:	1dfb      	adds	r3, r7, #7
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	0018      	movs	r0, r3
 8004660:	2303      	movs	r3, #3
 8004662:	4003      	ands	r3, r0
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004668:	481f      	ldr	r0, [pc, #124]	; (80046e8 <__NVIC_SetPriority+0xd4>)
 800466a:	1dfb      	adds	r3, r7, #7
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b25b      	sxtb	r3, r3
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	430a      	orrs	r2, r1
 8004674:	33c0      	adds	r3, #192	; 0xc0
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800467a:	e031      	b.n	80046e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <__NVIC_SetPriority+0xd8>)
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	0019      	movs	r1, r3
 8004684:	230f      	movs	r3, #15
 8004686:	400b      	ands	r3, r1
 8004688:	3b08      	subs	r3, #8
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	3306      	adds	r3, #6
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	18d3      	adds	r3, r2, r3
 8004692:	3304      	adds	r3, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	1dfa      	adds	r2, r7, #7
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	0011      	movs	r1, r2
 800469c:	2203      	movs	r2, #3
 800469e:	400a      	ands	r2, r1
 80046a0:	00d2      	lsls	r2, r2, #3
 80046a2:	21ff      	movs	r1, #255	; 0xff
 80046a4:	4091      	lsls	r1, r2
 80046a6:	000a      	movs	r2, r1
 80046a8:	43d2      	mvns	r2, r2
 80046aa:	401a      	ands	r2, r3
 80046ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	22ff      	movs	r2, #255	; 0xff
 80046b4:	401a      	ands	r2, r3
 80046b6:	1dfb      	adds	r3, r7, #7
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	0018      	movs	r0, r3
 80046bc:	2303      	movs	r3, #3
 80046be:	4003      	ands	r3, r0
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046c4:	4809      	ldr	r0, [pc, #36]	; (80046ec <__NVIC_SetPriority+0xd8>)
 80046c6:	1dfb      	adds	r3, r7, #7
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	001c      	movs	r4, r3
 80046cc:	230f      	movs	r3, #15
 80046ce:	4023      	ands	r3, r4
 80046d0:	3b08      	subs	r3, #8
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	430a      	orrs	r2, r1
 80046d6:	3306      	adds	r3, #6
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	18c3      	adds	r3, r0, r3
 80046dc:	3304      	adds	r3, #4
 80046de:	601a      	str	r2, [r3, #0]
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b003      	add	sp, #12
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	e000e100 	.word	0xe000e100
 80046ec:	e000ed00 	.word	0xe000ed00

080046f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <SysTick_Config+0x40>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004702:	2301      	movs	r3, #1
 8004704:	e010      	b.n	8004728 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <SysTick_Config+0x44>)
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	3a01      	subs	r2, #1
 800470c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800470e:	2301      	movs	r3, #1
 8004710:	425b      	negs	r3, r3
 8004712:	2103      	movs	r1, #3
 8004714:	0018      	movs	r0, r3
 8004716:	f7ff ff7d 	bl	8004614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <SysTick_Config+0x44>)
 800471c:	2200      	movs	r2, #0
 800471e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <SysTick_Config+0x44>)
 8004722:	2207      	movs	r2, #7
 8004724:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004726:	2300      	movs	r3, #0
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}
 8004730:	00ffffff 	.word	0x00ffffff
 8004734:	e000e010 	.word	0xe000e010

08004738 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	210f      	movs	r1, #15
 8004744:	187b      	adds	r3, r7, r1
 8004746:	1c02      	adds	r2, r0, #0
 8004748:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	187b      	adds	r3, r7, r1
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	b25b      	sxtb	r3, r3
 8004752:	0011      	movs	r1, r2
 8004754:	0018      	movs	r0, r3
 8004756:	f7ff ff5d 	bl	8004614 <__NVIC_SetPriority>
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b004      	add	sp, #16
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	0002      	movs	r2, r0
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800476e:	1dfb      	adds	r3, r7, #7
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	b25b      	sxtb	r3, r3
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff ff33 	bl	80045e0 <__NVIC_EnableIRQ>
}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	b002      	add	sp, #8
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f7ff ffaf 	bl	80046f0 <SysTick_Config>
 8004792:	0003      	movs	r3, r0
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b002      	add	sp, #8
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80047b2:	e155      	b.n	8004a60 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2101      	movs	r1, #1
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4091      	lsls	r1, r2
 80047be:	000a      	movs	r2, r1
 80047c0:	4013      	ands	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d100      	bne.n	80047cc <HAL_GPIO_Init+0x30>
 80047ca:	e146      	b.n	8004a5a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2203      	movs	r2, #3
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d005      	beq.n	80047e4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2203      	movs	r2, #3
 80047de:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d130      	bne.n	8004846 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	2203      	movs	r2, #3
 80047f0:	409a      	lsls	r2, r3
 80047f2:	0013      	movs	r3, r2
 80047f4:	43da      	mvns	r2, r3
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4013      	ands	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	409a      	lsls	r2, r3
 8004806:	0013      	movs	r3, r2
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800481a:	2201      	movs	r2, #1
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	409a      	lsls	r2, r3
 8004820:	0013      	movs	r3, r2
 8004822:	43da      	mvns	r2, r3
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4013      	ands	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	2201      	movs	r2, #1
 8004832:	401a      	ands	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	409a      	lsls	r2, r3
 8004838:	0013      	movs	r3, r2
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2203      	movs	r2, #3
 800484c:	4013      	ands	r3, r2
 800484e:	2b03      	cmp	r3, #3
 8004850:	d017      	beq.n	8004882 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	2203      	movs	r2, #3
 800485e:	409a      	lsls	r2, r3
 8004860:	0013      	movs	r3, r2
 8004862:	43da      	mvns	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	409a      	lsls	r2, r3
 8004874:	0013      	movs	r3, r2
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2203      	movs	r2, #3
 8004888:	4013      	ands	r3, r2
 800488a:	2b02      	cmp	r3, #2
 800488c:	d123      	bne.n	80048d6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	08da      	lsrs	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3208      	adds	r2, #8
 8004896:	0092      	lsls	r2, r2, #2
 8004898:	58d3      	ldr	r3, [r2, r3]
 800489a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2207      	movs	r2, #7
 80048a0:	4013      	ands	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	220f      	movs	r2, #15
 80048a6:	409a      	lsls	r2, r3
 80048a8:	0013      	movs	r3, r2
 80048aa:	43da      	mvns	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4013      	ands	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2107      	movs	r1, #7
 80048ba:	400b      	ands	r3, r1
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	409a      	lsls	r2, r3
 80048c0:	0013      	movs	r3, r2
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	08da      	lsrs	r2, r3, #3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3208      	adds	r2, #8
 80048d0:	0092      	lsls	r2, r2, #2
 80048d2:	6939      	ldr	r1, [r7, #16]
 80048d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	2203      	movs	r2, #3
 80048e2:	409a      	lsls	r2, r3
 80048e4:	0013      	movs	r3, r2
 80048e6:	43da      	mvns	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2203      	movs	r2, #3
 80048f4:	401a      	ands	r2, r3
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	0013      	movs	r3, r2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	23c0      	movs	r3, #192	; 0xc0
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	4013      	ands	r3, r2
 8004914:	d100      	bne.n	8004918 <HAL_GPIO_Init+0x17c>
 8004916:	e0a0      	b.n	8004a5a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004918:	4b57      	ldr	r3, [pc, #348]	; (8004a78 <HAL_GPIO_Init+0x2dc>)
 800491a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491c:	4b56      	ldr	r3, [pc, #344]	; (8004a78 <HAL_GPIO_Init+0x2dc>)
 800491e:	2101      	movs	r1, #1
 8004920:	430a      	orrs	r2, r1
 8004922:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004924:	4a55      	ldr	r2, [pc, #340]	; (8004a7c <HAL_GPIO_Init+0x2e0>)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	3302      	adds	r3, #2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	589b      	ldr	r3, [r3, r2]
 8004930:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2203      	movs	r2, #3
 8004936:	4013      	ands	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	220f      	movs	r2, #15
 800493c:	409a      	lsls	r2, r3
 800493e:	0013      	movs	r3, r2
 8004940:	43da      	mvns	r2, r3
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4013      	ands	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	23a0      	movs	r3, #160	; 0xa0
 800494c:	05db      	lsls	r3, r3, #23
 800494e:	429a      	cmp	r2, r3
 8004950:	d01f      	beq.n	8004992 <HAL_GPIO_Init+0x1f6>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a4a      	ldr	r2, [pc, #296]	; (8004a80 <HAL_GPIO_Init+0x2e4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d019      	beq.n	800498e <HAL_GPIO_Init+0x1f2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a49      	ldr	r2, [pc, #292]	; (8004a84 <HAL_GPIO_Init+0x2e8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_GPIO_Init+0x1ee>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a48      	ldr	r2, [pc, #288]	; (8004a88 <HAL_GPIO_Init+0x2ec>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00d      	beq.n	8004986 <HAL_GPIO_Init+0x1ea>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a47      	ldr	r2, [pc, #284]	; (8004a8c <HAL_GPIO_Init+0x2f0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <HAL_GPIO_Init+0x1e6>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a46      	ldr	r2, [pc, #280]	; (8004a90 <HAL_GPIO_Init+0x2f4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d101      	bne.n	800497e <HAL_GPIO_Init+0x1e2>
 800497a:	2305      	movs	r3, #5
 800497c:	e00a      	b.n	8004994 <HAL_GPIO_Init+0x1f8>
 800497e:	2306      	movs	r3, #6
 8004980:	e008      	b.n	8004994 <HAL_GPIO_Init+0x1f8>
 8004982:	2304      	movs	r3, #4
 8004984:	e006      	b.n	8004994 <HAL_GPIO_Init+0x1f8>
 8004986:	2303      	movs	r3, #3
 8004988:	e004      	b.n	8004994 <HAL_GPIO_Init+0x1f8>
 800498a:	2302      	movs	r3, #2
 800498c:	e002      	b.n	8004994 <HAL_GPIO_Init+0x1f8>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <HAL_GPIO_Init+0x1f8>
 8004992:	2300      	movs	r3, #0
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	2103      	movs	r1, #3
 8004998:	400a      	ands	r2, r1
 800499a:	0092      	lsls	r2, r2, #2
 800499c:	4093      	lsls	r3, r2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049a4:	4935      	ldr	r1, [pc, #212]	; (8004a7c <HAL_GPIO_Init+0x2e0>)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	089b      	lsrs	r3, r3, #2
 80049aa:	3302      	adds	r3, #2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049b2:	4b38      	ldr	r3, [pc, #224]	; (8004a94 <HAL_GPIO_Init+0x2f8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	43da      	mvns	r2, r3
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	025b      	lsls	r3, r3, #9
 80049ca:	4013      	ands	r3, r2
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80049d6:	4b2f      	ldr	r3, [pc, #188]	; (8004a94 <HAL_GPIO_Init+0x2f8>)
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80049dc:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <HAL_GPIO_Init+0x2f8>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	43da      	mvns	r2, r3
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4013      	ands	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	029b      	lsls	r3, r3, #10
 80049f4:	4013      	ands	r3, r2
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <HAL_GPIO_Init+0x2f8>)
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a06:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_GPIO_Init+0x2f8>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4013      	ands	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	035b      	lsls	r3, r3, #13
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d003      	beq.n	8004a2a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a2a:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <HAL_GPIO_Init+0x2f8>)
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004a30:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <HAL_GPIO_Init+0x2f8>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	43da      	mvns	r2, r3
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	039b      	lsls	r3, r3, #14
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a54:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <HAL_GPIO_Init+0x2f8>)
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	40da      	lsrs	r2, r3
 8004a68:	1e13      	subs	r3, r2, #0
 8004a6a:	d000      	beq.n	8004a6e <HAL_GPIO_Init+0x2d2>
 8004a6c:	e6a2      	b.n	80047b4 <HAL_GPIO_Init+0x18>
  }
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b006      	add	sp, #24
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	50000400 	.word	0x50000400
 8004a84:	50000800 	.word	0x50000800
 8004a88:	50000c00 	.word	0x50000c00
 8004a8c:	50001000 	.word	0x50001000
 8004a90:	50001c00 	.word	0x50001c00
 8004a94:	40010400 	.word	0x40010400

08004a98 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	000a      	movs	r2, r1
 8004aa2:	1cbb      	adds	r3, r7, #2
 8004aa4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	1cba      	adds	r2, r7, #2
 8004aac:	8812      	ldrh	r2, [r2, #0]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004ab2:	230f      	movs	r3, #15
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	e003      	b.n	8004ac4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004abc:	230f      	movs	r3, #15
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004ac4:	230f      	movs	r3, #15
 8004ac6:	18fb      	adds	r3, r7, r3
 8004ac8:	781b      	ldrb	r3, [r3, #0]
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b004      	add	sp, #16
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e082      	b.n	8004bec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2241      	movs	r2, #65	; 0x41
 8004aea:	5c9b      	ldrb	r3, [r3, r2]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2240      	movs	r2, #64	; 0x40
 8004af6:	2100      	movs	r1, #0
 8004af8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7ff fb21 	bl	8004144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2241      	movs	r2, #65	; 0x41
 8004b06:	2124      	movs	r1, #36	; 0x24
 8004b08:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2101      	movs	r1, #1
 8004b16:	438a      	bics	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4934      	ldr	r1, [pc, #208]	; (8004bf4 <HAL_I2C_Init+0x120>)
 8004b24:	400a      	ands	r2, r1
 8004b26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4931      	ldr	r1, [pc, #196]	; (8004bf8 <HAL_I2C_Init+0x124>)
 8004b34:	400a      	ands	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d108      	bne.n	8004b52 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2180      	movs	r1, #128	; 0x80
 8004b4a:	0209      	lsls	r1, r1, #8
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	e007      	b.n	8004b62 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2184      	movs	r1, #132	; 0x84
 8004b5c:	0209      	lsls	r1, r1, #8
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d104      	bne.n	8004b74 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2280      	movs	r2, #128	; 0x80
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	491f      	ldr	r1, [pc, #124]	; (8004bfc <HAL_I2C_Init+0x128>)
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	491a      	ldr	r1, [pc, #104]	; (8004bf8 <HAL_I2C_Init+0x124>)
 8004b90:	400a      	ands	r2, r1
 8004b92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69d9      	ldr	r1, [r3, #28]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1a      	ldr	r2, [r3, #32]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2101      	movs	r1, #1
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2241      	movs	r2, #65	; 0x41
 8004bd8:	2120      	movs	r1, #32
 8004bda:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2242      	movs	r2, #66	; 0x42
 8004be6:	2100      	movs	r1, #0
 8004be8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	0018      	movs	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	f0ffffff 	.word	0xf0ffffff
 8004bf8:	ffff7fff 	.word	0xffff7fff
 8004bfc:	02008000 	.word	0x02008000

08004c00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b089      	sub	sp, #36	; 0x24
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	0008      	movs	r0, r1
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	230a      	movs	r3, #10
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	1c02      	adds	r2, r0, #0
 8004c14:	801a      	strh	r2, [r3, #0]
 8004c16:	2308      	movs	r3, #8
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	1c0a      	adds	r2, r1, #0
 8004c1c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2241      	movs	r2, #65	; 0x41
 8004c22:	5c9b      	ldrb	r3, [r3, r2]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d000      	beq.n	8004c2c <HAL_I2C_Master_Transmit+0x2c>
 8004c2a:	e0e7      	b.n	8004dfc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2240      	movs	r2, #64	; 0x40
 8004c30:	5c9b      	ldrb	r3, [r3, r2]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_I2C_Master_Transmit+0x3a>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e0e1      	b.n	8004dfe <HAL_I2C_Master_Transmit+0x1fe>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2240      	movs	r2, #64	; 0x40
 8004c3e:	2101      	movs	r1, #1
 8004c40:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c42:	f7ff fca1 	bl	8004588 <HAL_GetTick>
 8004c46:	0003      	movs	r3, r0
 8004c48:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	0219      	lsls	r1, r3, #8
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	2319      	movs	r3, #25
 8004c56:	2201      	movs	r2, #1
 8004c58:	f000 fd3e 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8004c5c:	1e03      	subs	r3, r0, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0cc      	b.n	8004dfe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2241      	movs	r2, #65	; 0x41
 8004c68:	2121      	movs	r1, #33	; 0x21
 8004c6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2242      	movs	r2, #66	; 0x42
 8004c70:	2110      	movs	r1, #16
 8004c72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2208      	movs	r2, #8
 8004c84:	18ba      	adds	r2, r7, r2
 8004c86:	8812      	ldrh	r2, [r2, #0]
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2bff      	cmp	r3, #255	; 0xff
 8004c98:	d911      	bls.n	8004cbe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	22ff      	movs	r2, #255	; 0xff
 8004c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	045c      	lsls	r4, r3, #17
 8004caa:	230a      	movs	r3, #10
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	8819      	ldrh	r1, [r3, #0]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	4b55      	ldr	r3, [pc, #340]	; (8004e08 <HAL_I2C_Master_Transmit+0x208>)
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	0023      	movs	r3, r4
 8004cb8:	f000 fe42 	bl	8005940 <I2C_TransferConfig>
 8004cbc:	e075      	b.n	8004daa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	049c      	lsls	r4, r3, #18
 8004cd2:	230a      	movs	r3, #10
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	8819      	ldrh	r1, [r3, #0]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	4b4b      	ldr	r3, [pc, #300]	; (8004e08 <HAL_I2C_Master_Transmit+0x208>)
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	0023      	movs	r3, r4
 8004ce0:	f000 fe2e 	bl	8005940 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004ce4:	e061      	b.n	8004daa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f000 fd32 	bl	8005756 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cf2:	1e03      	subs	r3, r0, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e081      	b.n	8004dfe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d03a      	beq.n	8004daa <HAL_I2C_Master_Transmit+0x1aa>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d136      	bne.n	8004daa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	0013      	movs	r3, r2
 8004d46:	2200      	movs	r2, #0
 8004d48:	2180      	movs	r1, #128	; 0x80
 8004d4a:	f000 fcc5 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8004d4e:	1e03      	subs	r3, r0, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e053      	b.n	8004dfe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2bff      	cmp	r3, #255	; 0xff
 8004d5e:	d911      	bls.n	8004d84 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	22ff      	movs	r2, #255	; 0xff
 8004d64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	045c      	lsls	r4, r3, #17
 8004d70:	230a      	movs	r3, #10
 8004d72:	18fb      	adds	r3, r7, r3
 8004d74:	8819      	ldrh	r1, [r3, #0]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	0023      	movs	r3, r4
 8004d7e:	f000 fddf 	bl	8005940 <I2C_TransferConfig>
 8004d82:	e012      	b.n	8004daa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	049c      	lsls	r4, r3, #18
 8004d98:	230a      	movs	r3, #10
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	8819      	ldrh	r1, [r3, #0]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	2300      	movs	r3, #0
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	0023      	movs	r3, r4
 8004da6:	f000 fdcb 	bl	8005940 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d198      	bne.n	8004ce6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 fd0a 	bl	80057d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dc0:	1e03      	subs	r3, r0, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e01a      	b.n	8004dfe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	490c      	ldr	r1, [pc, #48]	; (8004e0c <HAL_I2C_Master_Transmit+0x20c>)
 8004ddc:	400a      	ands	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2241      	movs	r2, #65	; 0x41
 8004de4:	2120      	movs	r1, #32
 8004de6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2242      	movs	r2, #66	; 0x42
 8004dec:	2100      	movs	r1, #0
 8004dee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2240      	movs	r2, #64	; 0x40
 8004df4:	2100      	movs	r1, #0
 8004df6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b007      	add	sp, #28
 8004e04:	bd90      	pop	{r4, r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	80002000 	.word	0x80002000
 8004e0c:	fe00e800 	.word	0xfe00e800

08004e10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	000c      	movs	r4, r1
 8004e1a:	0010      	movs	r0, r2
 8004e1c:	0019      	movs	r1, r3
 8004e1e:	230a      	movs	r3, #10
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	1c22      	adds	r2, r4, #0
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	2308      	movs	r3, #8
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	1c02      	adds	r2, r0, #0
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	1dbb      	adds	r3, r7, #6
 8004e30:	1c0a      	adds	r2, r1, #0
 8004e32:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2241      	movs	r2, #65	; 0x41
 8004e38:	5c9b      	ldrb	r3, [r3, r2]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d000      	beq.n	8004e42 <HAL_I2C_Mem_Write+0x32>
 8004e40:	e10c      	b.n	800505c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d004      	beq.n	8004e52 <HAL_I2C_Mem_Write+0x42>
 8004e48:	232c      	movs	r3, #44	; 0x2c
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2280      	movs	r2, #128	; 0x80
 8004e56:	0092      	lsls	r2, r2, #2
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e0ff      	b.n	800505e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2240      	movs	r2, #64	; 0x40
 8004e62:	5c9b      	ldrb	r3, [r3, r2]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_I2C_Mem_Write+0x5c>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e0f8      	b.n	800505e <HAL_I2C_Mem_Write+0x24e>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2240      	movs	r2, #64	; 0x40
 8004e70:	2101      	movs	r1, #1
 8004e72:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e74:	f7ff fb88 	bl	8004588 <HAL_GetTick>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	0219      	lsls	r1, r3, #8
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	2319      	movs	r3, #25
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f000 fc25 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8004e8e:	1e03      	subs	r3, r0, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e0e3      	b.n	800505e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2241      	movs	r2, #65	; 0x41
 8004e9a:	2121      	movs	r1, #33	; 0x21
 8004e9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2242      	movs	r2, #66	; 0x42
 8004ea2:	2140      	movs	r1, #64	; 0x40
 8004ea4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	222c      	movs	r2, #44	; 0x2c
 8004eb6:	18ba      	adds	r2, r7, r2
 8004eb8:	8812      	ldrh	r2, [r2, #0]
 8004eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ec2:	1dbb      	adds	r3, r7, #6
 8004ec4:	881c      	ldrh	r4, [r3, #0]
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	881a      	ldrh	r2, [r3, #0]
 8004ecc:	230a      	movs	r3, #10
 8004ece:	18fb      	adds	r3, r7, r3
 8004ed0:	8819      	ldrh	r1, [r3, #0]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	0023      	movs	r3, r4
 8004ede:	f000 fb13 	bl	8005508 <I2C_RequestMemoryWrite>
 8004ee2:	1e03      	subs	r3, r0, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	2100      	movs	r1, #0
 8004eec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0b5      	b.n	800505e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2bff      	cmp	r3, #255	; 0xff
 8004efa:	d911      	bls.n	8004f20 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	22ff      	movs	r2, #255	; 0xff
 8004f00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	2380      	movs	r3, #128	; 0x80
 8004f0a:	045c      	lsls	r4, r3, #17
 8004f0c:	230a      	movs	r3, #10
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	8819      	ldrh	r1, [r3, #0]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	2300      	movs	r3, #0
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	0023      	movs	r3, r4
 8004f1a:	f000 fd11 	bl	8005940 <I2C_TransferConfig>
 8004f1e:	e012      	b.n	8004f46 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	049c      	lsls	r4, r3, #18
 8004f34:	230a      	movs	r3, #10
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	8819      	ldrh	r1, [r3, #0]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	0023      	movs	r3, r4
 8004f42:	f000 fcfd 	bl	8005940 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f000 fc02 	bl	8005756 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f52:	1e03      	subs	r3, r0, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e081      	b.n	800505e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	781a      	ldrb	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d03a      	beq.n	800500a <HAL_I2C_Mem_Write+0x1fa>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d136      	bne.n	800500a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	0013      	movs	r3, r2
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2180      	movs	r1, #128	; 0x80
 8004faa:	f000 fb95 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8004fae:	1e03      	subs	r3, r0, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e053      	b.n	800505e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2bff      	cmp	r3, #255	; 0xff
 8004fbe:	d911      	bls.n	8004fe4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	22ff      	movs	r2, #255	; 0xff
 8004fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	045c      	lsls	r4, r3, #17
 8004fd0:	230a      	movs	r3, #10
 8004fd2:	18fb      	adds	r3, r7, r3
 8004fd4:	8819      	ldrh	r1, [r3, #0]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	0023      	movs	r3, r4
 8004fde:	f000 fcaf 	bl	8005940 <I2C_TransferConfig>
 8004fe2:	e012      	b.n	800500a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	2380      	movs	r3, #128	; 0x80
 8004ff6:	049c      	lsls	r4, r3, #18
 8004ff8:	230a      	movs	r3, #10
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	8819      	ldrh	r1, [r3, #0]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	2300      	movs	r3, #0
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	0023      	movs	r3, r4
 8005006:	f000 fc9b 	bl	8005940 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d198      	bne.n	8004f46 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	0018      	movs	r0, r3
 800501c:	f000 fbda 	bl	80057d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005020:	1e03      	subs	r3, r0, #0
 8005022:	d001      	beq.n	8005028 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e01a      	b.n	800505e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2220      	movs	r2, #32
 800502e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	490b      	ldr	r1, [pc, #44]	; (8005068 <HAL_I2C_Mem_Write+0x258>)
 800503c:	400a      	ands	r2, r1
 800503e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2241      	movs	r2, #65	; 0x41
 8005044:	2120      	movs	r1, #32
 8005046:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2242      	movs	r2, #66	; 0x42
 800504c:	2100      	movs	r1, #0
 800504e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2240      	movs	r2, #64	; 0x40
 8005054:	2100      	movs	r1, #0
 8005056:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	e000      	b.n	800505e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800505c:	2302      	movs	r3, #2
  }
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b007      	add	sp, #28
 8005064:	bd90      	pop	{r4, r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	fe00e800 	.word	0xfe00e800

0800506c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b089      	sub	sp, #36	; 0x24
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	000c      	movs	r4, r1
 8005076:	0010      	movs	r0, r2
 8005078:	0019      	movs	r1, r3
 800507a:	230a      	movs	r3, #10
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	1c22      	adds	r2, r4, #0
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	2308      	movs	r3, #8
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	1c02      	adds	r2, r0, #0
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	1dbb      	adds	r3, r7, #6
 800508c:	1c0a      	adds	r2, r1, #0
 800508e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2241      	movs	r2, #65	; 0x41
 8005094:	5c9b      	ldrb	r3, [r3, r2]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b20      	cmp	r3, #32
 800509a:	d000      	beq.n	800509e <HAL_I2C_Mem_Read+0x32>
 800509c:	e110      	b.n	80052c0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <HAL_I2C_Mem_Read+0x42>
 80050a4:	232c      	movs	r3, #44	; 0x2c
 80050a6:	18fb      	adds	r3, r7, r3
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d105      	bne.n	80050ba <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2280      	movs	r2, #128	; 0x80
 80050b2:	0092      	lsls	r2, r2, #2
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e103      	b.n	80052c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2240      	movs	r2, #64	; 0x40
 80050be:	5c9b      	ldrb	r3, [r3, r2]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_I2C_Mem_Read+0x5c>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e0fc      	b.n	80052c2 <HAL_I2C_Mem_Read+0x256>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2240      	movs	r2, #64	; 0x40
 80050cc:	2101      	movs	r1, #1
 80050ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050d0:	f7ff fa5a 	bl	8004588 <HAL_GetTick>
 80050d4:	0003      	movs	r3, r0
 80050d6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	0219      	lsls	r1, r3, #8
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	2319      	movs	r3, #25
 80050e4:	2201      	movs	r2, #1
 80050e6:	f000 faf7 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 80050ea:	1e03      	subs	r3, r0, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e0e7      	b.n	80052c2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2241      	movs	r2, #65	; 0x41
 80050f6:	2122      	movs	r1, #34	; 0x22
 80050f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2242      	movs	r2, #66	; 0x42
 80050fe:	2140      	movs	r1, #64	; 0x40
 8005100:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	222c      	movs	r2, #44	; 0x2c
 8005112:	18ba      	adds	r2, r7, r2
 8005114:	8812      	ldrh	r2, [r2, #0]
 8005116:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800511e:	1dbb      	adds	r3, r7, #6
 8005120:	881c      	ldrh	r4, [r3, #0]
 8005122:	2308      	movs	r3, #8
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	881a      	ldrh	r2, [r3, #0]
 8005128:	230a      	movs	r3, #10
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	8819      	ldrh	r1, [r3, #0]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	0023      	movs	r3, r4
 800513a:	f000 fa49 	bl	80055d0 <I2C_RequestMemoryRead>
 800513e:	1e03      	subs	r3, r0, #0
 8005140:	d005      	beq.n	800514e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2240      	movs	r2, #64	; 0x40
 8005146:	2100      	movs	r1, #0
 8005148:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e0b9      	b.n	80052c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	2bff      	cmp	r3, #255	; 0xff
 8005156:	d911      	bls.n	800517c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	22ff      	movs	r2, #255	; 0xff
 800515c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005162:	b2da      	uxtb	r2, r3
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	045c      	lsls	r4, r3, #17
 8005168:	230a      	movs	r3, #10
 800516a:	18fb      	adds	r3, r7, r3
 800516c:	8819      	ldrh	r1, [r3, #0]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	4b56      	ldr	r3, [pc, #344]	; (80052cc <HAL_I2C_Mem_Read+0x260>)
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	0023      	movs	r3, r4
 8005176:	f000 fbe3 	bl	8005940 <I2C_TransferConfig>
 800517a:	e012      	b.n	80051a2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518a:	b2da      	uxtb	r2, r3
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	049c      	lsls	r4, r3, #18
 8005190:	230a      	movs	r3, #10
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	8819      	ldrh	r1, [r3, #0]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	4b4c      	ldr	r3, [pc, #304]	; (80052cc <HAL_I2C_Mem_Read+0x260>)
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	0023      	movs	r3, r4
 800519e:	f000 fbcf 	bl	8005940 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80051a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	0013      	movs	r3, r2
 80051ac:	2200      	movs	r2, #0
 80051ae:	2104      	movs	r1, #4
 80051b0:	f000 fa92 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 80051b4:	1e03      	subs	r3, r0, #0
 80051b6:	d001      	beq.n	80051bc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e082      	b.n	80052c2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d03a      	beq.n	800526e <HAL_I2C_Mem_Read+0x202>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d136      	bne.n	800526e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	0013      	movs	r3, r2
 800520a:	2200      	movs	r2, #0
 800520c:	2180      	movs	r1, #128	; 0x80
 800520e:	f000 fa63 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8005212:	1e03      	subs	r3, r0, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e053      	b.n	80052c2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	2bff      	cmp	r3, #255	; 0xff
 8005222:	d911      	bls.n	8005248 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	22ff      	movs	r2, #255	; 0xff
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522e:	b2da      	uxtb	r2, r3
 8005230:	2380      	movs	r3, #128	; 0x80
 8005232:	045c      	lsls	r4, r3, #17
 8005234:	230a      	movs	r3, #10
 8005236:	18fb      	adds	r3, r7, r3
 8005238:	8819      	ldrh	r1, [r3, #0]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	2300      	movs	r3, #0
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	0023      	movs	r3, r4
 8005242:	f000 fb7d 	bl	8005940 <I2C_TransferConfig>
 8005246:	e012      	b.n	800526e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005256:	b2da      	uxtb	r2, r3
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	049c      	lsls	r4, r3, #18
 800525c:	230a      	movs	r3, #10
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	8819      	ldrh	r1, [r3, #0]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	2300      	movs	r3, #0
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	0023      	movs	r3, r4
 800526a:	f000 fb69 	bl	8005940 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d194      	bne.n	80051a2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	0018      	movs	r0, r3
 8005280:	f000 faa8 	bl	80057d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005284:	1e03      	subs	r3, r0, #0
 8005286:	d001      	beq.n	800528c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e01a      	b.n	80052c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2220      	movs	r2, #32
 8005292:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	490c      	ldr	r1, [pc, #48]	; (80052d0 <HAL_I2C_Mem_Read+0x264>)
 80052a0:	400a      	ands	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2241      	movs	r2, #65	; 0x41
 80052a8:	2120      	movs	r1, #32
 80052aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2242      	movs	r2, #66	; 0x42
 80052b0:	2100      	movs	r1, #0
 80052b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2240      	movs	r2, #64	; 0x40
 80052b8:	2100      	movs	r1, #0
 80052ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e000      	b.n	80052c2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80052c0:	2302      	movs	r3, #2
  }
}
 80052c2:	0018      	movs	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b007      	add	sp, #28
 80052c8:	bd90      	pop	{r4, r7, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	80002400 	.word	0x80002400
 80052d0:	fe00e800 	.word	0xfe00e800

080052d4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	230a      	movs	r3, #10
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	1c0a      	adds	r2, r1, #0
 80052e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2241      	movs	r2, #65	; 0x41
 80052f0:	5c9b      	ldrb	r3, [r3, r2]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d000      	beq.n	80052fa <HAL_I2C_IsDeviceReady+0x26>
 80052f8:	e0fe      	b.n	80054f8 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699a      	ldr	r2, [r3, #24]
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	401a      	ands	r2, r3
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	429a      	cmp	r2, r3
 800530c:	d101      	bne.n	8005312 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
 8005310:	e0f3      	b.n	80054fa <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2240      	movs	r2, #64	; 0x40
 8005316:	5c9b      	ldrb	r3, [r3, r2]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_I2C_IsDeviceReady+0x4c>
 800531c:	2302      	movs	r3, #2
 800531e:	e0ec      	b.n	80054fa <HAL_I2C_IsDeviceReady+0x226>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2240      	movs	r2, #64	; 0x40
 8005324:	2101      	movs	r1, #1
 8005326:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2241      	movs	r2, #65	; 0x41
 800532c:	2124      	movs	r1, #36	; 0x24
 800532e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d107      	bne.n	800534e <HAL_I2C_IsDeviceReady+0x7a>
 800533e:	230a      	movs	r3, #10
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	059b      	lsls	r3, r3, #22
 8005346:	0d9b      	lsrs	r3, r3, #22
 8005348:	4a6e      	ldr	r2, [pc, #440]	; (8005504 <HAL_I2C_IsDeviceReady+0x230>)
 800534a:	431a      	orrs	r2, r3
 800534c:	e007      	b.n	800535e <HAL_I2C_IsDeviceReady+0x8a>
 800534e:	230a      	movs	r3, #10
 8005350:	18fb      	adds	r3, r7, r3
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	059b      	lsls	r3, r3, #22
 8005356:	0d9b      	lsrs	r3, r3, #22
 8005358:	22a0      	movs	r2, #160	; 0xa0
 800535a:	0192      	lsls	r2, r2, #6
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005364:	f7ff f910 	bl	8004588 <HAL_GetTick>
 8005368:	0003      	movs	r3, r0
 800536a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2220      	movs	r2, #32
 8005374:	4013      	ands	r3, r2
 8005376:	3b20      	subs	r3, #32
 8005378:	425a      	negs	r2, r3
 800537a:	4153      	adcs	r3, r2
 800537c:	b2da      	uxtb	r2, r3
 800537e:	231f      	movs	r3, #31
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	2210      	movs	r2, #16
 800538c:	4013      	ands	r3, r2
 800538e:	3b10      	subs	r3, #16
 8005390:	425a      	negs	r2, r3
 8005392:	4153      	adcs	r3, r2
 8005394:	b2da      	uxtb	r2, r3
 8005396:	231e      	movs	r3, #30
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800539c:	e035      	b.n	800540a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	d01a      	beq.n	80053da <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053a4:	f7ff f8f0 	bl	8004588 <HAL_GetTick>
 80053a8:	0002      	movs	r2, r0
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d302      	bcc.n	80053ba <HAL_I2C_IsDeviceReady+0xe6>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10f      	bne.n	80053da <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2241      	movs	r2, #65	; 0x41
 80053be:	2120      	movs	r1, #32
 80053c0:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	2220      	movs	r2, #32
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2240      	movs	r2, #64	; 0x40
 80053d2:	2100      	movs	r1, #0
 80053d4:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e08f      	b.n	80054fa <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	2220      	movs	r2, #32
 80053e2:	4013      	ands	r3, r2
 80053e4:	3b20      	subs	r3, #32
 80053e6:	425a      	negs	r2, r3
 80053e8:	4153      	adcs	r3, r2
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	231f      	movs	r3, #31
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2210      	movs	r2, #16
 80053fa:	4013      	ands	r3, r2
 80053fc:	3b10      	subs	r3, #16
 80053fe:	425a      	negs	r2, r3
 8005400:	4153      	adcs	r3, r2
 8005402:	b2da      	uxtb	r2, r3
 8005404:	231e      	movs	r3, #30
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800540a:	231f      	movs	r3, #31
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <HAL_I2C_IsDeviceReady+0x14a>
 8005414:	231e      	movs	r3, #30
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0bf      	beq.n	800539e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	2210      	movs	r2, #16
 8005426:	4013      	ands	r3, r2
 8005428:	2b10      	cmp	r3, #16
 800542a:	d01a      	beq.n	8005462 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	0013      	movs	r3, r2
 8005436:	2200      	movs	r2, #0
 8005438:	2120      	movs	r1, #32
 800543a:	f000 f94d 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 800543e:	1e03      	subs	r3, r0, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e059      	b.n	80054fa <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2220      	movs	r2, #32
 800544c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2241      	movs	r2, #65	; 0x41
 8005452:	2120      	movs	r1, #32
 8005454:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2240      	movs	r2, #64	; 0x40
 800545a:	2100      	movs	r1, #0
 800545c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	e04b      	b.n	80054fa <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	0013      	movs	r3, r2
 800546c:	2200      	movs	r2, #0
 800546e:	2120      	movs	r1, #32
 8005470:	f000 f932 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8005474:	1e03      	subs	r3, r0, #0
 8005476:	d001      	beq.n	800547c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e03e      	b.n	80054fa <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2210      	movs	r2, #16
 8005482:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2220      	movs	r2, #32
 800548a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d119      	bne.n	80054c8 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2180      	movs	r1, #128	; 0x80
 80054a0:	01c9      	lsls	r1, r1, #7
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	0013      	movs	r3, r2
 80054b0:	2200      	movs	r2, #0
 80054b2:	2120      	movs	r1, #32
 80054b4:	f000 f910 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 80054b8:	1e03      	subs	r3, r0, #0
 80054ba:	d001      	beq.n	80054c0 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e01c      	b.n	80054fa <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2220      	movs	r2, #32
 80054c6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	3301      	adds	r3, #1
 80054cc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d900      	bls.n	80054d8 <HAL_I2C_IsDeviceReady+0x204>
 80054d6:	e72e      	b.n	8005336 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2241      	movs	r2, #65	; 0x41
 80054dc:	2120      	movs	r1, #32
 80054de:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e4:	2220      	movs	r2, #32
 80054e6:	431a      	orrs	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2240      	movs	r2, #64	; 0x40
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	0018      	movs	r0, r3
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b008      	add	sp, #32
 8005500:	bd80      	pop	{r7, pc}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	02002000 	.word	0x02002000

08005508 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005508:	b5b0      	push	{r4, r5, r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	000c      	movs	r4, r1
 8005512:	0010      	movs	r0, r2
 8005514:	0019      	movs	r1, r3
 8005516:	250a      	movs	r5, #10
 8005518:	197b      	adds	r3, r7, r5
 800551a:	1c22      	adds	r2, r4, #0
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	2308      	movs	r3, #8
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	1c02      	adds	r2, r0, #0
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	1dbb      	adds	r3, r7, #6
 8005528:	1c0a      	adds	r2, r1, #0
 800552a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800552c:	1dbb      	adds	r3, r7, #6
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	2380      	movs	r3, #128	; 0x80
 8005534:	045c      	lsls	r4, r3, #17
 8005536:	197b      	adds	r3, r7, r5
 8005538:	8819      	ldrh	r1, [r3, #0]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	4b23      	ldr	r3, [pc, #140]	; (80055cc <I2C_RequestMemoryWrite+0xc4>)
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	0023      	movs	r3, r4
 8005542:	f000 f9fd 	bl	8005940 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005548:	6a39      	ldr	r1, [r7, #32]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	0018      	movs	r0, r3
 800554e:	f000 f902 	bl	8005756 <I2C_WaitOnTXISFlagUntilTimeout>
 8005552:	1e03      	subs	r3, r0, #0
 8005554:	d001      	beq.n	800555a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e033      	b.n	80055c2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800555a:	1dbb      	adds	r3, r7, #6
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d107      	bne.n	8005572 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005562:	2308      	movs	r3, #8
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b2da      	uxtb	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	629a      	str	r2, [r3, #40]	; 0x28
 8005570:	e019      	b.n	80055a6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005572:	2308      	movs	r3, #8
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	0a1b      	lsrs	r3, r3, #8
 800557a:	b29b      	uxth	r3, r3
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005586:	6a39      	ldr	r1, [r7, #32]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 f8e3 	bl	8005756 <I2C_WaitOnTXISFlagUntilTimeout>
 8005590:	1e03      	subs	r3, r0, #0
 8005592:	d001      	beq.n	8005598 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e014      	b.n	80055c2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005598:	2308      	movs	r3, #8
 800559a:	18fb      	adds	r3, r7, r3
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055a6:	6a3a      	ldr	r2, [r7, #32]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	0013      	movs	r3, r2
 80055b0:	2200      	movs	r2, #0
 80055b2:	2180      	movs	r1, #128	; 0x80
 80055b4:	f000 f890 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 80055b8:	1e03      	subs	r3, r0, #0
 80055ba:	d001      	beq.n	80055c0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	0018      	movs	r0, r3
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b004      	add	sp, #16
 80055c8:	bdb0      	pop	{r4, r5, r7, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	80002000 	.word	0x80002000

080055d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	000c      	movs	r4, r1
 80055da:	0010      	movs	r0, r2
 80055dc:	0019      	movs	r1, r3
 80055de:	250a      	movs	r5, #10
 80055e0:	197b      	adds	r3, r7, r5
 80055e2:	1c22      	adds	r2, r4, #0
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	2308      	movs	r3, #8
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	1c02      	adds	r2, r0, #0
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	1dbb      	adds	r3, r7, #6
 80055f0:	1c0a      	adds	r2, r1, #0
 80055f2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80055f4:	1dbb      	adds	r3, r7, #6
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	197b      	adds	r3, r7, r5
 80055fc:	8819      	ldrh	r1, [r3, #0]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	4b23      	ldr	r3, [pc, #140]	; (8005690 <I2C_RequestMemoryRead+0xc0>)
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	f000 f99b 	bl	8005940 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560c:	6a39      	ldr	r1, [r7, #32]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	0018      	movs	r0, r3
 8005612:	f000 f8a0 	bl	8005756 <I2C_WaitOnTXISFlagUntilTimeout>
 8005616:	1e03      	subs	r3, r0, #0
 8005618:	d001      	beq.n	800561e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e033      	b.n	8005686 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800561e:	1dbb      	adds	r3, r7, #6
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d107      	bne.n	8005636 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005626:	2308      	movs	r3, #8
 8005628:	18fb      	adds	r3, r7, r3
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b2da      	uxtb	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	629a      	str	r2, [r3, #40]	; 0x28
 8005634:	e019      	b.n	800566a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005636:	2308      	movs	r3, #8
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	b29b      	uxth	r3, r3
 8005640:	b2da      	uxtb	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564a:	6a39      	ldr	r1, [r7, #32]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	0018      	movs	r0, r3
 8005650:	f000 f881 	bl	8005756 <I2C_WaitOnTXISFlagUntilTimeout>
 8005654:	1e03      	subs	r3, r0, #0
 8005656:	d001      	beq.n	800565c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e014      	b.n	8005686 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800565c:	2308      	movs	r3, #8
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b2da      	uxtb	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800566a:	6a3a      	ldr	r2, [r7, #32]
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	0013      	movs	r3, r2
 8005674:	2200      	movs	r2, #0
 8005676:	2140      	movs	r1, #64	; 0x40
 8005678:	f000 f82e 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 800567c:	1e03      	subs	r3, r0, #0
 800567e:	d001      	beq.n	8005684 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	0018      	movs	r0, r3
 8005688:	46bd      	mov	sp, r7
 800568a:	b004      	add	sp, #16
 800568c:	bdb0      	pop	{r4, r5, r7, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	80002000 	.word	0x80002000

08005694 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	2202      	movs	r2, #2
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d103      	bne.n	80056b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2200      	movs	r2, #0
 80056b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2201      	movs	r2, #1
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d007      	beq.n	80056d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2101      	movs	r1, #1
 80056cc:	430a      	orrs	r2, r1
 80056ce:	619a      	str	r2, [r3, #24]
  }
}
 80056d0:	46c0      	nop			; (mov r8, r8)
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b002      	add	sp, #8
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	1dfb      	adds	r3, r7, #7
 80056e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056e8:	e021      	b.n	800572e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	d01e      	beq.n	800572e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f0:	f7fe ff4a 	bl	8004588 <HAL_GetTick>
 80056f4:	0002      	movs	r2, r0
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d302      	bcc.n	8005706 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d113      	bne.n	800572e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570a:	2220      	movs	r2, #32
 800570c:	431a      	orrs	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2241      	movs	r2, #65	; 0x41
 8005716:	2120      	movs	r1, #32
 8005718:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2242      	movs	r2, #66	; 0x42
 800571e:	2100      	movs	r1, #0
 8005720:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2240      	movs	r2, #64	; 0x40
 8005726:	2100      	movs	r1, #0
 8005728:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e00f      	b.n	800574e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	4013      	ands	r3, r2
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	425a      	negs	r2, r3
 800573e:	4153      	adcs	r3, r2
 8005740:	b2db      	uxtb	r3, r3
 8005742:	001a      	movs	r2, r3
 8005744:	1dfb      	adds	r3, r7, #7
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d0ce      	beq.n	80056ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	0018      	movs	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	b004      	add	sp, #16
 8005754:	bd80      	pop	{r7, pc}

08005756 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005762:	e02b      	b.n	80057bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	0018      	movs	r0, r3
 800576c:	f000 f86e 	bl	800584c <I2C_IsAcknowledgeFailed>
 8005770:	1e03      	subs	r3, r0, #0
 8005772:	d001      	beq.n	8005778 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e029      	b.n	80057cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	3301      	adds	r3, #1
 800577c:	d01e      	beq.n	80057bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577e:	f7fe ff03 	bl	8004588 <HAL_GetTick>
 8005782:	0002      	movs	r2, r0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	429a      	cmp	r2, r3
 800578c:	d302      	bcc.n	8005794 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d113      	bne.n	80057bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005798:	2220      	movs	r2, #32
 800579a:	431a      	orrs	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2241      	movs	r2, #65	; 0x41
 80057a4:	2120      	movs	r1, #32
 80057a6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2242      	movs	r2, #66	; 0x42
 80057ac:	2100      	movs	r1, #0
 80057ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2240      	movs	r2, #64	; 0x40
 80057b4:	2100      	movs	r1, #0
 80057b6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e007      	b.n	80057cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2202      	movs	r2, #2
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d1cc      	bne.n	8005764 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	0018      	movs	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b004      	add	sp, #16
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057e0:	e028      	b.n	8005834 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f000 f82f 	bl	800584c <I2C_IsAcknowledgeFailed>
 80057ee:	1e03      	subs	r3, r0, #0
 80057f0:	d001      	beq.n	80057f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e026      	b.n	8005844 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f6:	f7fe fec7 	bl	8004588 <HAL_GetTick>
 80057fa:	0002      	movs	r2, r0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d113      	bne.n	8005834 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005810:	2220      	movs	r2, #32
 8005812:	431a      	orrs	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2241      	movs	r2, #65	; 0x41
 800581c:	2120      	movs	r1, #32
 800581e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2242      	movs	r2, #66	; 0x42
 8005824:	2100      	movs	r1, #0
 8005826:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2240      	movs	r2, #64	; 0x40
 800582c:	2100      	movs	r1, #0
 800582e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e007      	b.n	8005844 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2220      	movs	r2, #32
 800583c:	4013      	ands	r3, r2
 800583e:	2b20      	cmp	r3, #32
 8005840:	d1cf      	bne.n	80057e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	b004      	add	sp, #16
 800584a:	bd80      	pop	{r7, pc}

0800584c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2210      	movs	r2, #16
 8005860:	4013      	ands	r3, r2
 8005862:	2b10      	cmp	r3, #16
 8005864:	d164      	bne.n	8005930 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	2380      	movs	r3, #128	; 0x80
 800586e:	049b      	lsls	r3, r3, #18
 8005870:	401a      	ands	r2, r3
 8005872:	2380      	movs	r3, #128	; 0x80
 8005874:	049b      	lsls	r3, r3, #18
 8005876:	429a      	cmp	r2, r3
 8005878:	d02b      	beq.n	80058d2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2180      	movs	r1, #128	; 0x80
 8005886:	01c9      	lsls	r1, r1, #7
 8005888:	430a      	orrs	r2, r1
 800588a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800588c:	e021      	b.n	80058d2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	3301      	adds	r3, #1
 8005892:	d01e      	beq.n	80058d2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005894:	f7fe fe78 	bl	8004588 <HAL_GetTick>
 8005898:	0002      	movs	r2, r0
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d302      	bcc.n	80058aa <I2C_IsAcknowledgeFailed+0x5e>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d113      	bne.n	80058d2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ae:	2220      	movs	r2, #32
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2241      	movs	r2, #65	; 0x41
 80058ba:	2120      	movs	r1, #32
 80058bc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2242      	movs	r2, #66	; 0x42
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2240      	movs	r2, #64	; 0x40
 80058ca:	2100      	movs	r1, #0
 80058cc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e02f      	b.n	8005932 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2220      	movs	r2, #32
 80058da:	4013      	ands	r3, r2
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d1d6      	bne.n	800588e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2210      	movs	r2, #16
 80058e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2220      	movs	r2, #32
 80058ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	0018      	movs	r0, r3
 80058f4:	f7ff fece 	bl	8005694 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	490e      	ldr	r1, [pc, #56]	; (800593c <I2C_IsAcknowledgeFailed+0xf0>)
 8005904:	400a      	ands	r2, r1
 8005906:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590c:	2204      	movs	r2, #4
 800590e:	431a      	orrs	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2241      	movs	r2, #65	; 0x41
 8005918:	2120      	movs	r1, #32
 800591a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2242      	movs	r2, #66	; 0x42
 8005920:	2100      	movs	r1, #0
 8005922:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2240      	movs	r2, #64	; 0x40
 8005928:	2100      	movs	r1, #0
 800592a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	0018      	movs	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	b004      	add	sp, #16
 8005938:	bd80      	pop	{r7, pc}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	fe00e800 	.word	0xfe00e800

08005940 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005940:	b590      	push	{r4, r7, lr}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	0008      	movs	r0, r1
 800594a:	0011      	movs	r1, r2
 800594c:	607b      	str	r3, [r7, #4]
 800594e:	240a      	movs	r4, #10
 8005950:	193b      	adds	r3, r7, r4
 8005952:	1c02      	adds	r2, r0, #0
 8005954:	801a      	strh	r2, [r3, #0]
 8005956:	2009      	movs	r0, #9
 8005958:	183b      	adds	r3, r7, r0
 800595a:	1c0a      	adds	r2, r1, #0
 800595c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	0d51      	lsrs	r1, r2, #21
 8005968:	2280      	movs	r2, #128	; 0x80
 800596a:	00d2      	lsls	r2, r2, #3
 800596c:	400a      	ands	r2, r1
 800596e:	490e      	ldr	r1, [pc, #56]	; (80059a8 <I2C_TransferConfig+0x68>)
 8005970:	430a      	orrs	r2, r1
 8005972:	43d2      	mvns	r2, r2
 8005974:	401a      	ands	r2, r3
 8005976:	0011      	movs	r1, r2
 8005978:	193b      	adds	r3, r7, r4
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	059b      	lsls	r3, r3, #22
 800597e:	0d9a      	lsrs	r2, r3, #22
 8005980:	183b      	adds	r3, r7, r0
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	0418      	lsls	r0, r3, #16
 8005986:	23ff      	movs	r3, #255	; 0xff
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	4003      	ands	r3, r0
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	431a      	orrs	r2, r3
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	431a      	orrs	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b005      	add	sp, #20
 80059a4:	bd90      	pop	{r4, r7, pc}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	03ff63ff 	.word	0x03ff63ff

080059ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2241      	movs	r2, #65	; 0x41
 80059ba:	5c9b      	ldrb	r3, [r3, r2]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d138      	bne.n	8005a34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2240      	movs	r2, #64	; 0x40
 80059c6:	5c9b      	ldrb	r3, [r3, r2]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e032      	b.n	8005a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2240      	movs	r2, #64	; 0x40
 80059d4:	2101      	movs	r1, #1
 80059d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2241      	movs	r2, #65	; 0x41
 80059dc:	2124      	movs	r1, #36	; 0x24
 80059de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2101      	movs	r1, #1
 80059ec:	438a      	bics	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4911      	ldr	r1, [pc, #68]	; (8005a40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80059fc:	400a      	ands	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6819      	ldr	r1, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2241      	movs	r2, #65	; 0x41
 8005a24:	2120      	movs	r1, #32
 8005a26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2240      	movs	r2, #64	; 0x40
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e000      	b.n	8005a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a34:	2302      	movs	r3, #2
  }
}
 8005a36:	0018      	movs	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b002      	add	sp, #8
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	ffffefff 	.word	0xffffefff

08005a44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2241      	movs	r2, #65	; 0x41
 8005a52:	5c9b      	ldrb	r3, [r3, r2]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d139      	bne.n	8005ace <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2240      	movs	r2, #64	; 0x40
 8005a5e:	5c9b      	ldrb	r3, [r3, r2]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e033      	b.n	8005ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2240      	movs	r2, #64	; 0x40
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2241      	movs	r2, #65	; 0x41
 8005a74:	2124      	movs	r1, #36	; 0x24
 8005a76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2101      	movs	r1, #1
 8005a84:	438a      	bics	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a11      	ldr	r2, [pc, #68]	; (8005ad8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2241      	movs	r2, #65	; 0x41
 8005abe:	2120      	movs	r1, #32
 8005ac0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2240      	movs	r2, #64	; 0x40
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e000      	b.n	8005ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ace:	2302      	movs	r3, #2
  }
}
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b004      	add	sp, #16
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	fffff0ff 	.word	0xfffff0ff

08005adc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005ae6:	2180      	movs	r1, #128	; 0x80
 8005ae8:	0049      	lsls	r1, r1, #1
 8005aea:	430a      	orrs	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]
}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40007000 	.word	0x40007000

08005af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af8:	b5b0      	push	{r4, r5, r7, lr}
 8005afa:	b08a      	sub	sp, #40	; 0x28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f000 fb70 	bl	80061ec <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b0c:	4bc9      	ldr	r3, [pc, #804]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	220c      	movs	r2, #12
 8005b12:	4013      	ands	r3, r2
 8005b14:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b16:	4bc7      	ldr	r3, [pc, #796]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	2380      	movs	r3, #128	; 0x80
 8005b1c:	025b      	lsls	r3, r3, #9
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2201      	movs	r2, #1
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d100      	bne.n	8005b2e <HAL_RCC_OscConfig+0x36>
 8005b2c:	e07d      	b.n	8005c2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d007      	beq.n	8005b44 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b0c      	cmp	r3, #12
 8005b38:	d112      	bne.n	8005b60 <HAL_RCC_OscConfig+0x68>
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	025b      	lsls	r3, r3, #9
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d10d      	bne.n	8005b60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b44:	4bbb      	ldr	r3, [pc, #748]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	029b      	lsls	r3, r3, #10
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d100      	bne.n	8005b52 <HAL_RCC_OscConfig+0x5a>
 8005b50:	e06a      	b.n	8005c28 <HAL_RCC_OscConfig+0x130>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d166      	bne.n	8005c28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f000 fb46 	bl	80061ec <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	025b      	lsls	r3, r3, #9
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_OscConfig+0x84>
 8005b6c:	4bb1      	ldr	r3, [pc, #708]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4bb0      	ldr	r3, [pc, #704]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005b72:	2180      	movs	r1, #128	; 0x80
 8005b74:	0249      	lsls	r1, r1, #9
 8005b76:	430a      	orrs	r2, r1
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e027      	b.n	8005bcc <HAL_RCC_OscConfig+0xd4>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	23a0      	movs	r3, #160	; 0xa0
 8005b82:	02db      	lsls	r3, r3, #11
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d10e      	bne.n	8005ba6 <HAL_RCC_OscConfig+0xae>
 8005b88:	4baa      	ldr	r3, [pc, #680]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	4ba9      	ldr	r3, [pc, #676]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005b8e:	2180      	movs	r1, #128	; 0x80
 8005b90:	02c9      	lsls	r1, r1, #11
 8005b92:	430a      	orrs	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	4ba7      	ldr	r3, [pc, #668]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4ba6      	ldr	r3, [pc, #664]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005b9c:	2180      	movs	r1, #128	; 0x80
 8005b9e:	0249      	lsls	r1, r1, #9
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	e012      	b.n	8005bcc <HAL_RCC_OscConfig+0xd4>
 8005ba6:	4ba3      	ldr	r3, [pc, #652]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4ba2      	ldr	r3, [pc, #648]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005bac:	49a2      	ldr	r1, [pc, #648]	; (8005e38 <HAL_RCC_OscConfig+0x340>)
 8005bae:	400a      	ands	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	4ba0      	ldr	r3, [pc, #640]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	025b      	lsls	r3, r3, #9
 8005bba:	4013      	ands	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4b9c      	ldr	r3, [pc, #624]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	4b9b      	ldr	r3, [pc, #620]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005bc6:	499d      	ldr	r1, [pc, #628]	; (8005e3c <HAL_RCC_OscConfig+0x344>)
 8005bc8:	400a      	ands	r2, r1
 8005bca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d014      	beq.n	8005bfe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd4:	f7fe fcd8 	bl	8004588 <HAL_GetTick>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bde:	f7fe fcd3 	bl	8004588 <HAL_GetTick>
 8005be2:	0002      	movs	r2, r0
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b64      	cmp	r3, #100	; 0x64
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e2fd      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bf0:	4b90      	ldr	r3, [pc, #576]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	2380      	movs	r3, #128	; 0x80
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d0f0      	beq.n	8005bde <HAL_RCC_OscConfig+0xe6>
 8005bfc:	e015      	b.n	8005c2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfe:	f7fe fcc3 	bl	8004588 <HAL_GetTick>
 8005c02:	0003      	movs	r3, r0
 8005c04:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c08:	f7fe fcbe 	bl	8004588 <HAL_GetTick>
 8005c0c:	0002      	movs	r2, r0
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b64      	cmp	r3, #100	; 0x64
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e2e8      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c1a:	4b86      	ldr	r3, [pc, #536]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	029b      	lsls	r3, r3, #10
 8005c22:	4013      	ands	r3, r2
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x110>
 8005c26:	e000      	b.n	8005c2a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	4013      	ands	r3, r2
 8005c32:	d100      	bne.n	8005c36 <HAL_RCC_OscConfig+0x13e>
 8005c34:	e09a      	b.n	8005d6c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	2220      	movs	r2, #32
 8005c40:	4013      	ands	r3, r2
 8005c42:	d009      	beq.n	8005c58 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005c44:	4b7b      	ldr	r3, [pc, #492]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	4b7a      	ldr	r3, [pc, #488]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005c4a:	2120      	movs	r1, #32
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	2220      	movs	r2, #32
 8005c54:	4393      	bics	r3, r2
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d005      	beq.n	8005c6a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b0c      	cmp	r3, #12
 8005c62:	d13f      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x1ec>
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d13c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005c6a:	4b72      	ldr	r3, [pc, #456]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	4013      	ands	r3, r2
 8005c72:	d004      	beq.n	8005c7e <HAL_RCC_OscConfig+0x186>
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e2b6      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7e:	4b6d      	ldr	r3, [pc, #436]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	4a6f      	ldr	r2, [pc, #444]	; (8005e40 <HAL_RCC_OscConfig+0x348>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	0019      	movs	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	021a      	lsls	r2, r3, #8
 8005c8e:	4b69      	ldr	r3, [pc, #420]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005c90:	430a      	orrs	r2, r1
 8005c92:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c94:	4b67      	ldr	r3, [pc, #412]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2209      	movs	r2, #9
 8005c9a:	4393      	bics	r3, r2
 8005c9c:	0019      	movs	r1, r3
 8005c9e:	4b65      	ldr	r3, [pc, #404]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ca6:	f000 fbef 	bl	8006488 <HAL_RCC_GetSysClockFreq>
 8005caa:	0001      	movs	r1, r0
 8005cac:	4b61      	ldr	r3, [pc, #388]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	220f      	movs	r2, #15
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	4a63      	ldr	r2, [pc, #396]	; (8005e44 <HAL_RCC_OscConfig+0x34c>)
 8005cb8:	5cd3      	ldrb	r3, [r2, r3]
 8005cba:	000a      	movs	r2, r1
 8005cbc:	40da      	lsrs	r2, r3
 8005cbe:	4b62      	ldr	r3, [pc, #392]	; (8005e48 <HAL_RCC_OscConfig+0x350>)
 8005cc0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005cc2:	4b62      	ldr	r3, [pc, #392]	; (8005e4c <HAL_RCC_OscConfig+0x354>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2513      	movs	r5, #19
 8005cc8:	197c      	adds	r4, r7, r5
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f7fe fc16 	bl	80044fc <HAL_InitTick>
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005cd4:	197b      	adds	r3, r7, r5
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d047      	beq.n	8005d6c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005cdc:	2313      	movs	r3, #19
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	e283      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d027      	beq.n	8005d3a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005cea:	4b52      	ldr	r3, [pc, #328]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2209      	movs	r2, #9
 8005cf0:	4393      	bics	r3, r2
 8005cf2:	0019      	movs	r1, r3
 8005cf4:	4b4f      	ldr	r3, [pc, #316]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfc:	f7fe fc44 	bl	8004588 <HAL_GetTick>
 8005d00:	0003      	movs	r3, r0
 8005d02:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d06:	f7fe fc3f 	bl	8004588 <HAL_GetTick>
 8005d0a:	0002      	movs	r2, r0
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e269      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d18:	4b46      	ldr	r3, [pc, #280]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d0f1      	beq.n	8005d06 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d22:	4b44      	ldr	r3, [pc, #272]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	4a46      	ldr	r2, [pc, #280]	; (8005e40 <HAL_RCC_OscConfig+0x348>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	021a      	lsls	r2, r3, #8
 8005d32:	4b40      	ldr	r3, [pc, #256]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005d34:	430a      	orrs	r2, r1
 8005d36:	605a      	str	r2, [r3, #4]
 8005d38:	e018      	b.n	8005d6c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d3a:	4b3e      	ldr	r3, [pc, #248]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b3d      	ldr	r3, [pc, #244]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005d40:	2101      	movs	r1, #1
 8005d42:	438a      	bics	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d46:	f7fe fc1f 	bl	8004588 <HAL_GetTick>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d50:	f7fe fc1a 	bl	8004588 <HAL_GetTick>
 8005d54:	0002      	movs	r2, r0
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e244      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d62:	4b34      	ldr	r3, [pc, #208]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2204      	movs	r2, #4
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d1f1      	bne.n	8005d50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2210      	movs	r2, #16
 8005d72:	4013      	ands	r3, r2
 8005d74:	d100      	bne.n	8005d78 <HAL_RCC_OscConfig+0x280>
 8005d76:	e0a2      	b.n	8005ebe <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d141      	bne.n	8005e02 <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d7e:	4b2d      	ldr	r3, [pc, #180]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	2380      	movs	r3, #128	; 0x80
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4013      	ands	r3, r2
 8005d88:	d005      	beq.n	8005d96 <HAL_RCC_OscConfig+0x29e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e22a      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d96:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <HAL_RCC_OscConfig+0x358>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	0019      	movs	r1, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	4b23      	ldr	r3, [pc, #140]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005daa:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	0a19      	lsrs	r1, r3, #8
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	061a      	lsls	r2, r3, #24
 8005db8:	4b1e      	ldr	r3, [pc, #120]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	0b5b      	lsrs	r3, r3, #13
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	2280      	movs	r2, #128	; 0x80
 8005dc8:	0212      	lsls	r2, r2, #8
 8005dca:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	091b      	lsrs	r3, r3, #4
 8005dd2:	210f      	movs	r1, #15
 8005dd4:	400b      	ands	r3, r1
 8005dd6:	491b      	ldr	r1, [pc, #108]	; (8005e44 <HAL_RCC_OscConfig+0x34c>)
 8005dd8:	5ccb      	ldrb	r3, [r1, r3]
 8005dda:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005ddc:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <HAL_RCC_OscConfig+0x350>)
 8005dde:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005de0:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <HAL_RCC_OscConfig+0x354>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2513      	movs	r5, #19
 8005de6:	197c      	adds	r4, r7, r5
 8005de8:	0018      	movs	r0, r3
 8005dea:	f7fe fb87 	bl	80044fc <HAL_InitTick>
 8005dee:	0003      	movs	r3, r0
 8005df0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005df2:	197b      	adds	r3, r7, r5
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d061      	beq.n	8005ebe <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005dfa:	2313      	movs	r3, #19
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	e1f4      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d03f      	beq.n	8005e8a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <HAL_RCC_OscConfig+0x33c>)
 8005e10:	2180      	movs	r1, #128	; 0x80
 8005e12:	0049      	lsls	r1, r1, #1
 8005e14:	430a      	orrs	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e18:	f7fe fbb6 	bl	8004588 <HAL_GetTick>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e20:	e018      	b.n	8005e54 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e22:	f7fe fbb1 	bl	8004588 <HAL_GetTick>
 8005e26:	0002      	movs	r2, r0
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d911      	bls.n	8005e54 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e1db      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
 8005e34:	40021000 	.word	0x40021000
 8005e38:	fffeffff 	.word	0xfffeffff
 8005e3c:	fffbffff 	.word	0xfffbffff
 8005e40:	ffffe0ff 	.word	0xffffe0ff
 8005e44:	0800af00 	.word	0x0800af00
 8005e48:	20000010 	.word	0x20000010
 8005e4c:	20000014 	.word	0x20000014
 8005e50:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e54:	4bca      	ldr	r3, [pc, #808]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	2380      	movs	r3, #128	; 0x80
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d0e0      	beq.n	8005e22 <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e60:	4bc7      	ldr	r3, [pc, #796]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4ac7      	ldr	r2, [pc, #796]	; (8006184 <HAL_RCC_OscConfig+0x68c>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	0019      	movs	r1, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1a      	ldr	r2, [r3, #32]
 8005e6e:	4bc4      	ldr	r3, [pc, #784]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005e70:	430a      	orrs	r2, r1
 8005e72:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e74:	4bc2      	ldr	r3, [pc, #776]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	0a19      	lsrs	r1, r3, #8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	061a      	lsls	r2, r3, #24
 8005e82:	4bbf      	ldr	r3, [pc, #764]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
 8005e88:	e019      	b.n	8005ebe <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e8a:	4bbd      	ldr	r3, [pc, #756]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4bbc      	ldr	r3, [pc, #752]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005e90:	49bd      	ldr	r1, [pc, #756]	; (8006188 <HAL_RCC_OscConfig+0x690>)
 8005e92:	400a      	ands	r2, r1
 8005e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e96:	f7fe fb77 	bl	8004588 <HAL_GetTick>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ea0:	f7fe fb72 	bl	8004588 <HAL_GetTick>
 8005ea4:	0002      	movs	r2, r0
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e19c      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005eb2:	4bb3      	ldr	r3, [pc, #716]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d036      	beq.n	8005f36 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d019      	beq.n	8005f04 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ed0:	4bab      	ldr	r3, [pc, #684]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005ed2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ed4:	4baa      	ldr	r3, [pc, #680]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005edc:	f7fe fb54 	bl	8004588 <HAL_GetTick>
 8005ee0:	0003      	movs	r3, r0
 8005ee2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ee6:	f7fe fb4f 	bl	8004588 <HAL_GetTick>
 8005eea:	0002      	movs	r2, r0
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e179      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ef8:	4ba1      	ldr	r3, [pc, #644]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efc:	2202      	movs	r2, #2
 8005efe:	4013      	ands	r3, r2
 8005f00:	d0f1      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x3ee>
 8005f02:	e018      	b.n	8005f36 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f04:	4b9e      	ldr	r3, [pc, #632]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005f06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f08:	4b9d      	ldr	r3, [pc, #628]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	438a      	bics	r2, r1
 8005f0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f10:	f7fe fb3a 	bl	8004588 <HAL_GetTick>
 8005f14:	0003      	movs	r3, r0
 8005f16:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f1a:	f7fe fb35 	bl	8004588 <HAL_GetTick>
 8005f1e:	0002      	movs	r2, r0
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e15f      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f2c:	4b94      	ldr	r3, [pc, #592]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f30:	2202      	movs	r2, #2
 8005f32:	4013      	ands	r3, r2
 8005f34:	d1f1      	bne.n	8005f1a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d100      	bne.n	8005f42 <HAL_RCC_OscConfig+0x44a>
 8005f40:	e0af      	b.n	80060a2 <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f42:	2323      	movs	r3, #35	; 0x23
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	2200      	movs	r2, #0
 8005f48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f4a:	4b8d      	ldr	r3, [pc, #564]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	055b      	lsls	r3, r3, #21
 8005f52:	4013      	ands	r3, r2
 8005f54:	d10a      	bne.n	8005f6c <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f56:	4b8a      	ldr	r3, [pc, #552]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5a:	4b89      	ldr	r3, [pc, #548]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005f5c:	2180      	movs	r1, #128	; 0x80
 8005f5e:	0549      	lsls	r1, r1, #21
 8005f60:	430a      	orrs	r2, r1
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f64:	2323      	movs	r3, #35	; 0x23
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	2201      	movs	r2, #1
 8005f6a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6c:	4b87      	ldr	r3, [pc, #540]	; (800618c <HAL_RCC_OscConfig+0x694>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	4013      	ands	r3, r2
 8005f76:	d11a      	bne.n	8005fae <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f78:	4b84      	ldr	r3, [pc, #528]	; (800618c <HAL_RCC_OscConfig+0x694>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b83      	ldr	r3, [pc, #524]	; (800618c <HAL_RCC_OscConfig+0x694>)
 8005f7e:	2180      	movs	r1, #128	; 0x80
 8005f80:	0049      	lsls	r1, r1, #1
 8005f82:	430a      	orrs	r2, r1
 8005f84:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f86:	f7fe faff 	bl	8004588 <HAL_GetTick>
 8005f8a:	0003      	movs	r3, r0
 8005f8c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f90:	f7fe fafa 	bl	8004588 <HAL_GetTick>
 8005f94:	0002      	movs	r2, r0
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b64      	cmp	r3, #100	; 0x64
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e124      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa2:	4b7a      	ldr	r3, [pc, #488]	; (800618c <HAL_RCC_OscConfig+0x694>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	2380      	movs	r3, #128	; 0x80
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	4013      	ands	r3, r2
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	2380      	movs	r3, #128	; 0x80
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d107      	bne.n	8005fca <HAL_RCC_OscConfig+0x4d2>
 8005fba:	4b71      	ldr	r3, [pc, #452]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fbe:	4b70      	ldr	r3, [pc, #448]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005fc0:	2180      	movs	r1, #128	; 0x80
 8005fc2:	0049      	lsls	r1, r1, #1
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	651a      	str	r2, [r3, #80]	; 0x50
 8005fc8:	e031      	b.n	800602e <HAL_RCC_OscConfig+0x536>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10c      	bne.n	8005fec <HAL_RCC_OscConfig+0x4f4>
 8005fd2:	4b6b      	ldr	r3, [pc, #428]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fd6:	4b6a      	ldr	r3, [pc, #424]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005fd8:	496b      	ldr	r1, [pc, #428]	; (8006188 <HAL_RCC_OscConfig+0x690>)
 8005fda:	400a      	ands	r2, r1
 8005fdc:	651a      	str	r2, [r3, #80]	; 0x50
 8005fde:	4b68      	ldr	r3, [pc, #416]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fe2:	4b67      	ldr	r3, [pc, #412]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005fe4:	496a      	ldr	r1, [pc, #424]	; (8006190 <HAL_RCC_OscConfig+0x698>)
 8005fe6:	400a      	ands	r2, r1
 8005fe8:	651a      	str	r2, [r3, #80]	; 0x50
 8005fea:	e020      	b.n	800602e <HAL_RCC_OscConfig+0x536>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	23a0      	movs	r3, #160	; 0xa0
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d10e      	bne.n	8006016 <HAL_RCC_OscConfig+0x51e>
 8005ff8:	4b61      	ldr	r3, [pc, #388]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ffc:	4b60      	ldr	r3, [pc, #384]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8005ffe:	2180      	movs	r1, #128	; 0x80
 8006000:	00c9      	lsls	r1, r1, #3
 8006002:	430a      	orrs	r2, r1
 8006004:	651a      	str	r2, [r3, #80]	; 0x50
 8006006:	4b5e      	ldr	r3, [pc, #376]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8006008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800600a:	4b5d      	ldr	r3, [pc, #372]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 800600c:	2180      	movs	r1, #128	; 0x80
 800600e:	0049      	lsls	r1, r1, #1
 8006010:	430a      	orrs	r2, r1
 8006012:	651a      	str	r2, [r3, #80]	; 0x50
 8006014:	e00b      	b.n	800602e <HAL_RCC_OscConfig+0x536>
 8006016:	4b5a      	ldr	r3, [pc, #360]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8006018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800601a:	4b59      	ldr	r3, [pc, #356]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 800601c:	495a      	ldr	r1, [pc, #360]	; (8006188 <HAL_RCC_OscConfig+0x690>)
 800601e:	400a      	ands	r2, r1
 8006020:	651a      	str	r2, [r3, #80]	; 0x50
 8006022:	4b57      	ldr	r3, [pc, #348]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8006024:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006026:	4b56      	ldr	r3, [pc, #344]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8006028:	4959      	ldr	r1, [pc, #356]	; (8006190 <HAL_RCC_OscConfig+0x698>)
 800602a:	400a      	ands	r2, r1
 800602c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d015      	beq.n	8006062 <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006036:	f7fe faa7 	bl	8004588 <HAL_GetTick>
 800603a:	0003      	movs	r3, r0
 800603c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800603e:	e009      	b.n	8006054 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006040:	f7fe faa2 	bl	8004588 <HAL_GetTick>
 8006044:	0002      	movs	r2, r0
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	4a52      	ldr	r2, [pc, #328]	; (8006194 <HAL_RCC_OscConfig+0x69c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e0cb      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006054:	4b4a      	ldr	r3, [pc, #296]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8006056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4013      	ands	r3, r2
 800605e:	d0ef      	beq.n	8006040 <HAL_RCC_OscConfig+0x548>
 8006060:	e014      	b.n	800608c <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006062:	f7fe fa91 	bl	8004588 <HAL_GetTick>
 8006066:	0003      	movs	r3, r0
 8006068:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800606a:	e009      	b.n	8006080 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800606c:	f7fe fa8c 	bl	8004588 <HAL_GetTick>
 8006070:	0002      	movs	r2, r0
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	4a47      	ldr	r2, [pc, #284]	; (8006194 <HAL_RCC_OscConfig+0x69c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e0b5      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006080:	4b3f      	ldr	r3, [pc, #252]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8006082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4013      	ands	r3, r2
 800608a:	d1ef      	bne.n	800606c <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800608c:	2323      	movs	r3, #35	; 0x23
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d105      	bne.n	80060a2 <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006096:	4b3a      	ldr	r3, [pc, #232]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8006098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800609a:	4b39      	ldr	r3, [pc, #228]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 800609c:	493e      	ldr	r1, [pc, #248]	; (8006198 <HAL_RCC_OscConfig+0x6a0>)
 800609e:	400a      	ands	r2, r1
 80060a0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d100      	bne.n	80060ac <HAL_RCC_OscConfig+0x5b4>
 80060aa:	e09e      	b.n	80061ea <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2b0c      	cmp	r3, #12
 80060b0:	d100      	bne.n	80060b4 <HAL_RCC_OscConfig+0x5bc>
 80060b2:	e077      	b.n	80061a4 <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d145      	bne.n	8006148 <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060bc:	4b30      	ldr	r3, [pc, #192]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4b2f      	ldr	r3, [pc, #188]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 80060c2:	4936      	ldr	r1, [pc, #216]	; (800619c <HAL_RCC_OscConfig+0x6a4>)
 80060c4:	400a      	ands	r2, r1
 80060c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c8:	f7fe fa5e 	bl	8004588 <HAL_GetTick>
 80060cc:	0003      	movs	r3, r0
 80060ce:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d2:	f7fe fa59 	bl	8004588 <HAL_GetTick>
 80060d6:	0002      	movs	r2, r0
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e083      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80060e4:	4b26      	ldr	r3, [pc, #152]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	2380      	movs	r3, #128	; 0x80
 80060ea:	049b      	lsls	r3, r3, #18
 80060ec:	4013      	ands	r3, r2
 80060ee:	d1f0      	bne.n	80060d2 <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f0:	4b23      	ldr	r3, [pc, #140]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a2a      	ldr	r2, [pc, #168]	; (80061a0 <HAL_RCC_OscConfig+0x6a8>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	0019      	movs	r1, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	431a      	orrs	r2, r3
 800610a:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 800610c:	430a      	orrs	r2, r1
 800610e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8006116:	2180      	movs	r1, #128	; 0x80
 8006118:	0449      	lsls	r1, r1, #17
 800611a:	430a      	orrs	r2, r1
 800611c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800611e:	f7fe fa33 	bl	8004588 <HAL_GetTick>
 8006122:	0003      	movs	r3, r0
 8006124:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006128:	f7fe fa2e 	bl	8004588 <HAL_GetTick>
 800612c:	0002      	movs	r2, r0
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e058      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	049b      	lsls	r3, r3, #18
 8006142:	4013      	ands	r3, r2
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0x630>
 8006146:	e050      	b.n	80061ea <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006148:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 800614e:	4913      	ldr	r1, [pc, #76]	; (800619c <HAL_RCC_OscConfig+0x6a4>)
 8006150:	400a      	ands	r2, r1
 8006152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006154:	f7fe fa18 	bl	8004588 <HAL_GetTick>
 8006158:	0003      	movs	r3, r0
 800615a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800615e:	f7fe fa13 	bl	8004588 <HAL_GetTick>
 8006162:	0002      	movs	r2, r0
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e03d      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006170:	4b03      	ldr	r3, [pc, #12]	; (8006180 <HAL_RCC_OscConfig+0x688>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	049b      	lsls	r3, r3, #18
 8006178:	4013      	ands	r3, r2
 800617a:	d1f0      	bne.n	800615e <HAL_RCC_OscConfig+0x666>
 800617c:	e035      	b.n	80061ea <HAL_RCC_OscConfig+0x6f2>
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	40021000 	.word	0x40021000
 8006184:	ffff1fff 	.word	0xffff1fff
 8006188:	fffffeff 	.word	0xfffffeff
 800618c:	40007000 	.word	0x40007000
 8006190:	fffffbff 	.word	0xfffffbff
 8006194:	00001388 	.word	0x00001388
 8006198:	efffffff 	.word	0xefffffff
 800619c:	feffffff 	.word	0xfeffffff
 80061a0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e01d      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061b0:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <HAL_RCC_OscConfig+0x6fc>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	025b      	lsls	r3, r3, #9
 80061bc:	401a      	ands	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d10f      	bne.n	80061e6 <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	23f0      	movs	r3, #240	; 0xf0
 80061ca:	039b      	lsls	r3, r3, #14
 80061cc:	401a      	ands	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d107      	bne.n	80061e6 <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	23c0      	movs	r3, #192	; 0xc0
 80061da:	041b      	lsls	r3, r3, #16
 80061dc:	401a      	ands	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d001      	beq.n	80061ea <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	0018      	movs	r0, r3
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b00a      	add	sp, #40	; 0x28
 80061f2:	bdb0      	pop	{r4, r5, r7, pc}
 80061f4:	40021000 	.word	0x40021000

080061f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f8:	b5b0      	push	{r4, r5, r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e129      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800620c:	4b96      	ldr	r3, [pc, #600]	; (8006468 <HAL_RCC_ClockConfig+0x270>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2201      	movs	r2, #1
 8006212:	4013      	ands	r3, r2
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d91e      	bls.n	8006258 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b93      	ldr	r3, [pc, #588]	; (8006468 <HAL_RCC_ClockConfig+0x270>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2201      	movs	r2, #1
 8006220:	4393      	bics	r3, r2
 8006222:	0019      	movs	r1, r3
 8006224:	4b90      	ldr	r3, [pc, #576]	; (8006468 <HAL_RCC_ClockConfig+0x270>)
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800622c:	f7fe f9ac 	bl	8004588 <HAL_GetTick>
 8006230:	0003      	movs	r3, r0
 8006232:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006234:	e009      	b.n	800624a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006236:	f7fe f9a7 	bl	8004588 <HAL_GetTick>
 800623a:	0002      	movs	r2, r0
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	4a8a      	ldr	r2, [pc, #552]	; (800646c <HAL_RCC_ClockConfig+0x274>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e10a      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800624a:	4b87      	ldr	r3, [pc, #540]	; (8006468 <HAL_RCC_ClockConfig+0x270>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2201      	movs	r2, #1
 8006250:	4013      	ands	r3, r2
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d1ee      	bne.n	8006236 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2202      	movs	r2, #2
 800625e:	4013      	ands	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006262:	4b83      	ldr	r3, [pc, #524]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	22f0      	movs	r2, #240	; 0xf0
 8006268:	4393      	bics	r3, r2
 800626a:	0019      	movs	r1, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	4b7f      	ldr	r3, [pc, #508]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 8006272:	430a      	orrs	r2, r1
 8006274:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2201      	movs	r2, #1
 800627c:	4013      	ands	r3, r2
 800627e:	d100      	bne.n	8006282 <HAL_RCC_ClockConfig+0x8a>
 8006280:	e089      	b.n	8006396 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b02      	cmp	r3, #2
 8006288:	d107      	bne.n	800629a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800628a:	4b79      	ldr	r3, [pc, #484]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	029b      	lsls	r3, r3, #10
 8006292:	4013      	ands	r3, r2
 8006294:	d120      	bne.n	80062d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e0e2      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d107      	bne.n	80062b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062a2:	4b73      	ldr	r3, [pc, #460]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	049b      	lsls	r3, r3, #18
 80062aa:	4013      	ands	r3, r2
 80062ac:	d114      	bne.n	80062d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e0d6      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d106      	bne.n	80062c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062ba:	4b6d      	ldr	r3, [pc, #436]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2204      	movs	r2, #4
 80062c0:	4013      	ands	r3, r2
 80062c2:	d109      	bne.n	80062d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0cb      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80062c8:	4b69      	ldr	r3, [pc, #420]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4013      	ands	r3, r2
 80062d2:	d101      	bne.n	80062d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0c3      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062d8:	4b65      	ldr	r3, [pc, #404]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2203      	movs	r2, #3
 80062de:	4393      	bics	r3, r2
 80062e0:	0019      	movs	r1, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	4b62      	ldr	r3, [pc, #392]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 80062e8:	430a      	orrs	r2, r1
 80062ea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062ec:	f7fe f94c 	bl	8004588 <HAL_GetTick>
 80062f0:	0003      	movs	r3, r0
 80062f2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d111      	bne.n	8006320 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062fc:	e009      	b.n	8006312 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062fe:	f7fe f943 	bl	8004588 <HAL_GetTick>
 8006302:	0002      	movs	r2, r0
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	4a58      	ldr	r2, [pc, #352]	; (800646c <HAL_RCC_ClockConfig+0x274>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e0a6      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006312:	4b57      	ldr	r3, [pc, #348]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	220c      	movs	r2, #12
 8006318:	4013      	ands	r3, r2
 800631a:	2b08      	cmp	r3, #8
 800631c:	d1ef      	bne.n	80062fe <HAL_RCC_ClockConfig+0x106>
 800631e:	e03a      	b.n	8006396 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2b03      	cmp	r3, #3
 8006326:	d111      	bne.n	800634c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006328:	e009      	b.n	800633e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800632a:	f7fe f92d 	bl	8004588 <HAL_GetTick>
 800632e:	0002      	movs	r2, r0
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	4a4d      	ldr	r2, [pc, #308]	; (800646c <HAL_RCC_ClockConfig+0x274>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d901      	bls.n	800633e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e090      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800633e:	4b4c      	ldr	r3, [pc, #304]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	220c      	movs	r2, #12
 8006344:	4013      	ands	r3, r2
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d1ef      	bne.n	800632a <HAL_RCC_ClockConfig+0x132>
 800634a:	e024      	b.n	8006396 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d11b      	bne.n	800638c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006354:	e009      	b.n	800636a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006356:	f7fe f917 	bl	8004588 <HAL_GetTick>
 800635a:	0002      	movs	r2, r0
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	4a42      	ldr	r2, [pc, #264]	; (800646c <HAL_RCC_ClockConfig+0x274>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e07a      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800636a:	4b41      	ldr	r3, [pc, #260]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	220c      	movs	r2, #12
 8006370:	4013      	ands	r3, r2
 8006372:	2b04      	cmp	r3, #4
 8006374:	d1ef      	bne.n	8006356 <HAL_RCC_ClockConfig+0x15e>
 8006376:	e00e      	b.n	8006396 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006378:	f7fe f906 	bl	8004588 <HAL_GetTick>
 800637c:	0002      	movs	r2, r0
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	4a3a      	ldr	r2, [pc, #232]	; (800646c <HAL_RCC_ClockConfig+0x274>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d901      	bls.n	800638c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e069      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800638c:	4b38      	ldr	r3, [pc, #224]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	220c      	movs	r2, #12
 8006392:	4013      	ands	r3, r2
 8006394:	d1f0      	bne.n	8006378 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006396:	4b34      	ldr	r3, [pc, #208]	; (8006468 <HAL_RCC_ClockConfig+0x270>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2201      	movs	r2, #1
 800639c:	4013      	ands	r3, r2
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d21e      	bcs.n	80063e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a4:	4b30      	ldr	r3, [pc, #192]	; (8006468 <HAL_RCC_ClockConfig+0x270>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2201      	movs	r2, #1
 80063aa:	4393      	bics	r3, r2
 80063ac:	0019      	movs	r1, r3
 80063ae:	4b2e      	ldr	r3, [pc, #184]	; (8006468 <HAL_RCC_ClockConfig+0x270>)
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80063b6:	f7fe f8e7 	bl	8004588 <HAL_GetTick>
 80063ba:	0003      	movs	r3, r0
 80063bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063be:	e009      	b.n	80063d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c0:	f7fe f8e2 	bl	8004588 <HAL_GetTick>
 80063c4:	0002      	movs	r2, r0
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	4a28      	ldr	r2, [pc, #160]	; (800646c <HAL_RCC_ClockConfig+0x274>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e045      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063d4:	4b24      	ldr	r3, [pc, #144]	; (8006468 <HAL_RCC_ClockConfig+0x270>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2201      	movs	r2, #1
 80063da:	4013      	ands	r3, r2
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d1ee      	bne.n	80063c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2204      	movs	r2, #4
 80063e8:	4013      	ands	r3, r2
 80063ea:	d009      	beq.n	8006400 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063ec:	4b20      	ldr	r3, [pc, #128]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4a20      	ldr	r2, [pc, #128]	; (8006474 <HAL_RCC_ClockConfig+0x27c>)
 80063f2:	4013      	ands	r3, r2
 80063f4:	0019      	movs	r1, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 80063fc:	430a      	orrs	r2, r1
 80063fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2208      	movs	r2, #8
 8006406:	4013      	ands	r3, r2
 8006408:	d00a      	beq.n	8006420 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800640a:	4b19      	ldr	r3, [pc, #100]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	4a1a      	ldr	r2, [pc, #104]	; (8006478 <HAL_RCC_ClockConfig+0x280>)
 8006410:	4013      	ands	r3, r2
 8006412:	0019      	movs	r1, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	00da      	lsls	r2, r3, #3
 800641a:	4b15      	ldr	r3, [pc, #84]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 800641c:	430a      	orrs	r2, r1
 800641e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006420:	f000 f832 	bl	8006488 <HAL_RCC_GetSysClockFreq>
 8006424:	0001      	movs	r1, r0
 8006426:	4b12      	ldr	r3, [pc, #72]	; (8006470 <HAL_RCC_ClockConfig+0x278>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	220f      	movs	r2, #15
 800642e:	4013      	ands	r3, r2
 8006430:	4a12      	ldr	r2, [pc, #72]	; (800647c <HAL_RCC_ClockConfig+0x284>)
 8006432:	5cd3      	ldrb	r3, [r2, r3]
 8006434:	000a      	movs	r2, r1
 8006436:	40da      	lsrs	r2, r3
 8006438:	4b11      	ldr	r3, [pc, #68]	; (8006480 <HAL_RCC_ClockConfig+0x288>)
 800643a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800643c:	4b11      	ldr	r3, [pc, #68]	; (8006484 <HAL_RCC_ClockConfig+0x28c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	250b      	movs	r5, #11
 8006442:	197c      	adds	r4, r7, r5
 8006444:	0018      	movs	r0, r3
 8006446:	f7fe f859 	bl	80044fc <HAL_InitTick>
 800644a:	0003      	movs	r3, r0
 800644c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800644e:	197b      	adds	r3, r7, r5
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8006456:	230b      	movs	r3, #11
 8006458:	18fb      	adds	r3, r7, r3
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	e000      	b.n	8006460 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	0018      	movs	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	b004      	add	sp, #16
 8006466:	bdb0      	pop	{r4, r5, r7, pc}
 8006468:	40022000 	.word	0x40022000
 800646c:	00001388 	.word	0x00001388
 8006470:	40021000 	.word	0x40021000
 8006474:	fffff8ff 	.word	0xfffff8ff
 8006478:	ffffc7ff 	.word	0xffffc7ff
 800647c:	0800af00 	.word	0x0800af00
 8006480:	20000010 	.word	0x20000010
 8006484:	20000014 	.word	0x20000014

08006488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648a:	b08f      	sub	sp, #60	; 0x3c
 800648c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800648e:	4b4a      	ldr	r3, [pc, #296]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x130>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006496:	230c      	movs	r3, #12
 8006498:	4013      	ands	r3, r2
 800649a:	2b08      	cmp	r3, #8
 800649c:	d00f      	beq.n	80064be <HAL_RCC_GetSysClockFreq+0x36>
 800649e:	2b0c      	cmp	r3, #12
 80064a0:	d010      	beq.n	80064c4 <HAL_RCC_GetSysClockFreq+0x3c>
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d000      	beq.n	80064a8 <HAL_RCC_GetSysClockFreq+0x20>
 80064a6:	e073      	b.n	8006590 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80064a8:	4b43      	ldr	r3, [pc, #268]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x130>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2210      	movs	r2, #16
 80064ae:	4013      	ands	r3, r2
 80064b0:	d002      	beq.n	80064b8 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80064b2:	4b42      	ldr	r3, [pc, #264]	; (80065bc <HAL_RCC_GetSysClockFreq+0x134>)
 80064b4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80064b6:	e079      	b.n	80065ac <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 80064b8:	4b41      	ldr	r3, [pc, #260]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80064ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80064bc:	e076      	b.n	80065ac <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064be:	4b41      	ldr	r3, [pc, #260]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80064c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80064c2:	e073      	b.n	80065ac <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	0c9a      	lsrs	r2, r3, #18
 80064c8:	230f      	movs	r3, #15
 80064ca:	401a      	ands	r2, r3
 80064cc:	4b3e      	ldr	r3, [pc, #248]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x140>)
 80064ce:	5c9b      	ldrb	r3, [r3, r2]
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	0d9a      	lsrs	r2, r3, #22
 80064d6:	2303      	movs	r3, #3
 80064d8:	4013      	ands	r3, r2
 80064da:	3301      	adds	r3, #1
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064de:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x130>)
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	2380      	movs	r3, #128	; 0x80
 80064e4:	025b      	lsls	r3, r3, #9
 80064e6:	4013      	ands	r3, r2
 80064e8:	d019      	beq.n	800651e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	2300      	movs	r3, #0
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	4a34      	ldr	r2, [pc, #208]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	69b8      	ldr	r0, [r7, #24]
 80064f8:	69f9      	ldr	r1, [r7, #28]
 80064fa:	f7fa f81d 	bl	8000538 <__aeabi_lmul>
 80064fe:	0003      	movs	r3, r0
 8006500:	000c      	movs	r4, r1
 8006502:	0018      	movs	r0, r3
 8006504:	0021      	movs	r1, r4
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f7f9 fff1 	bl	80004f8 <__aeabi_uldivmod>
 8006516:	0003      	movs	r3, r0
 8006518:	000c      	movs	r4, r1
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
 800651c:	e035      	b.n	800658a <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800651e:	4b26      	ldr	r3, [pc, #152]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x130>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2210      	movs	r2, #16
 8006524:	4013      	ands	r3, r2
 8006526:	d019      	beq.n	800655c <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	60bb      	str	r3, [r7, #8]
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	4a22      	ldr	r2, [pc, #136]	; (80065bc <HAL_RCC_GetSysClockFreq+0x134>)
 8006532:	2300      	movs	r3, #0
 8006534:	68b8      	ldr	r0, [r7, #8]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	f7f9 fffe 	bl	8000538 <__aeabi_lmul>
 800653c:	0003      	movs	r3, r0
 800653e:	000c      	movs	r4, r1
 8006540:	0018      	movs	r0, r3
 8006542:	0021      	movs	r1, r4
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	2300      	movs	r3, #0
 800654a:	607b      	str	r3, [r7, #4]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f7f9 ffd2 	bl	80004f8 <__aeabi_uldivmod>
 8006554:	0003      	movs	r3, r0
 8006556:	000c      	movs	r4, r1
 8006558:	637b      	str	r3, [r7, #52]	; 0x34
 800655a:	e016      	b.n	800658a <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	0018      	movs	r0, r3
 8006560:	2300      	movs	r3, #0
 8006562:	0019      	movs	r1, r3
 8006564:	4a16      	ldr	r2, [pc, #88]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006566:	2300      	movs	r3, #0
 8006568:	f7f9 ffe6 	bl	8000538 <__aeabi_lmul>
 800656c:	0003      	movs	r3, r0
 800656e:	000c      	movs	r4, r1
 8006570:	0018      	movs	r0, r3
 8006572:	0021      	movs	r1, r4
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	001d      	movs	r5, r3
 8006578:	2300      	movs	r3, #0
 800657a:	001e      	movs	r6, r3
 800657c:	002a      	movs	r2, r5
 800657e:	0033      	movs	r3, r6
 8006580:	f7f9 ffba 	bl	80004f8 <__aeabi_uldivmod>
 8006584:	0003      	movs	r3, r0
 8006586:	000c      	movs	r4, r1
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800658e:	e00d      	b.n	80065ac <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x130>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	0b5b      	lsrs	r3, r3, #13
 8006596:	2207      	movs	r2, #7
 8006598:	4013      	ands	r3, r2
 800659a:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	3301      	adds	r3, #1
 80065a0:	2280      	movs	r2, #128	; 0x80
 80065a2:	0212      	lsls	r2, r2, #8
 80065a4:	409a      	lsls	r2, r3
 80065a6:	0013      	movs	r3, r2
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80065aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80065ae:	0018      	movs	r0, r3
 80065b0:	46bd      	mov	sp, r7
 80065b2:	b00f      	add	sp, #60	; 0x3c
 80065b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	40021000 	.word	0x40021000
 80065bc:	003d0900 	.word	0x003d0900
 80065c0:	00f42400 	.word	0x00f42400
 80065c4:	007a1200 	.word	0x007a1200
 80065c8:	0800af10 	.word	0x0800af10

080065cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80065d4:	2317      	movs	r3, #23
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2220      	movs	r2, #32
 80065e2:	4013      	ands	r3, r2
 80065e4:	d100      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80065e6:	e0c3      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065e8:	4b91      	ldr	r3, [pc, #580]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	055b      	lsls	r3, r3, #21
 80065f0:	4013      	ands	r3, r2
 80065f2:	d10a      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065f4:	4b8e      	ldr	r3, [pc, #568]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f8:	4b8d      	ldr	r3, [pc, #564]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065fa:	2180      	movs	r1, #128	; 0x80
 80065fc:	0549      	lsls	r1, r1, #21
 80065fe:	430a      	orrs	r2, r1
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006602:	2317      	movs	r3, #23
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660a:	4b8a      	ldr	r3, [pc, #552]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	2380      	movs	r3, #128	; 0x80
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4013      	ands	r3, r2
 8006614:	d11a      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006616:	4b87      	ldr	r3, [pc, #540]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b86      	ldr	r3, [pc, #536]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800661c:	2180      	movs	r1, #128	; 0x80
 800661e:	0049      	lsls	r1, r1, #1
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006624:	f7fd ffb0 	bl	8004588 <HAL_GetTick>
 8006628:	0003      	movs	r3, r0
 800662a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800662c:	e008      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800662e:	f7fd ffab 	bl	8004588 <HAL_GetTick>
 8006632:	0002      	movs	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b64      	cmp	r3, #100	; 0x64
 800663a:	d901      	bls.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e0f3      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006640:	4b7c      	ldr	r3, [pc, #496]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	4013      	ands	r3, r2
 800664a:	d0f0      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800664c:	4b78      	ldr	r3, [pc, #480]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	23c0      	movs	r3, #192	; 0xc0
 8006652:	039b      	lsls	r3, r3, #14
 8006654:	4013      	ands	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	23c0      	movs	r3, #192	; 0xc0
 800665e:	039b      	lsls	r3, r3, #14
 8006660:	4013      	ands	r3, r2
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	429a      	cmp	r2, r3
 8006666:	d013      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	23c0      	movs	r3, #192	; 0xc0
 800666e:	029b      	lsls	r3, r3, #10
 8006670:	401a      	ands	r2, r3
 8006672:	23c0      	movs	r3, #192	; 0xc0
 8006674:	029b      	lsls	r3, r3, #10
 8006676:	429a      	cmp	r2, r3
 8006678:	d10a      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800667a:	4b6d      	ldr	r3, [pc, #436]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	2380      	movs	r3, #128	; 0x80
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	401a      	ands	r2, r3
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	429a      	cmp	r2, r3
 800668a:	d101      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0cb      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x25c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006690:	4b67      	ldr	r3, [pc, #412]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006694:	23c0      	movs	r3, #192	; 0xc0
 8006696:	029b      	lsls	r3, r3, #10
 8006698:	4013      	ands	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d03b      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	23c0      	movs	r3, #192	; 0xc0
 80066a8:	029b      	lsls	r3, r3, #10
 80066aa:	4013      	ands	r3, r2
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d033      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2220      	movs	r2, #32
 80066b8:	4013      	ands	r3, r2
 80066ba:	d02e      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80066bc:	4b5c      	ldr	r3, [pc, #368]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	4a5d      	ldr	r2, [pc, #372]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066c2:	4013      	ands	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066c6:	4b5a      	ldr	r3, [pc, #360]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ca:	4b59      	ldr	r3, [pc, #356]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066cc:	2180      	movs	r1, #128	; 0x80
 80066ce:	0309      	lsls	r1, r1, #12
 80066d0:	430a      	orrs	r2, r1
 80066d2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066d4:	4b56      	ldr	r3, [pc, #344]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066d8:	4b55      	ldr	r3, [pc, #340]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066da:	4958      	ldr	r1, [pc, #352]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80066dc:	400a      	ands	r2, r1
 80066de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80066e0:	4b53      	ldr	r3, [pc, #332]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	2380      	movs	r3, #128	; 0x80
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	4013      	ands	r3, r2
 80066ee:	d014      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f0:	f7fd ff4a 	bl	8004588 <HAL_GetTick>
 80066f4:	0003      	movs	r3, r0
 80066f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066f8:	e009      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fd ff45 	bl	8004588 <HAL_GetTick>
 80066fe:	0002      	movs	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	4a4e      	ldr	r2, [pc, #312]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d901      	bls.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e08c      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x25c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800670e:	4b48      	ldr	r3, [pc, #288]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4013      	ands	r3, r2
 8006718:	d0ef      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	23c0      	movs	r3, #192	; 0xc0
 8006720:	029b      	lsls	r3, r3, #10
 8006722:	401a      	ands	r2, r3
 8006724:	23c0      	movs	r3, #192	; 0xc0
 8006726:	029b      	lsls	r3, r3, #10
 8006728:	429a      	cmp	r2, r3
 800672a:	d10c      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800672c:	4b40      	ldr	r3, [pc, #256]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a44      	ldr	r2, [pc, #272]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006732:	4013      	ands	r3, r2
 8006734:	0019      	movs	r1, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	23c0      	movs	r3, #192	; 0xc0
 800673c:	039b      	lsls	r3, r3, #14
 800673e:	401a      	ands	r2, r3
 8006740:	4b3b      	ldr	r3, [pc, #236]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006742:	430a      	orrs	r2, r1
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	4b3a      	ldr	r3, [pc, #232]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006748:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	23c0      	movs	r3, #192	; 0xc0
 8006750:	029b      	lsls	r3, r3, #10
 8006752:	401a      	ands	r2, r3
 8006754:	4b36      	ldr	r3, [pc, #216]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006756:	430a      	orrs	r2, r1
 8006758:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800675a:	2317      	movs	r3, #23
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d105      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006764:	4b32      	ldr	r3, [pc, #200]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006768:	4b31      	ldr	r3, [pc, #196]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800676a:	4937      	ldr	r1, [pc, #220]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800676c:	400a      	ands	r2, r1
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2201      	movs	r2, #1
 8006776:	4013      	ands	r3, r2
 8006778:	d009      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800677a:	4b2d      	ldr	r3, [pc, #180]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	2203      	movs	r2, #3
 8006780:	4393      	bics	r3, r2
 8006782:	0019      	movs	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	4b29      	ldr	r3, [pc, #164]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800678a:	430a      	orrs	r2, r1
 800678c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2202      	movs	r2, #2
 8006794:	4013      	ands	r3, r2
 8006796:	d009      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006798:	4b25      	ldr	r3, [pc, #148]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	220c      	movs	r2, #12
 800679e:	4393      	bics	r3, r2
 80067a0:	0019      	movs	r1, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	4b22      	ldr	r3, [pc, #136]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067a8:	430a      	orrs	r2, r1
 80067aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2204      	movs	r2, #4
 80067b2:	4013      	ands	r3, r2
 80067b4:	d009      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067b6:	4b1e      	ldr	r3, [pc, #120]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	4a24      	ldr	r2, [pc, #144]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067bc:	4013      	ands	r3, r2
 80067be:	0019      	movs	r1, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067c6:	430a      	orrs	r2, r1
 80067c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2208      	movs	r2, #8
 80067d0:	4013      	ands	r3, r2
 80067d2:	d009      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067d4:	4b16      	ldr	r3, [pc, #88]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d8:	4a1d      	ldr	r2, [pc, #116]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067da:	4013      	ands	r3, r2
 80067dc:	0019      	movs	r1, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	4b13      	ldr	r3, [pc, #76]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067e4:	430a      	orrs	r2, r1
 80067e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	2380      	movs	r3, #128	; 0x80
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	4013      	ands	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f8:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	0019      	movs	r1, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006804:	430a      	orrs	r2, r1
 8006806:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2280      	movs	r2, #128	; 0x80
 800680e:	4013      	ands	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006812:	4b07      	ldr	r3, [pc, #28]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006816:	4a0f      	ldr	r2, [pc, #60]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006818:	4013      	ands	r3, r2
 800681a:	0019      	movs	r1, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	4b03      	ldr	r3, [pc, #12]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006822:	430a      	orrs	r2, r1
 8006824:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	0018      	movs	r0, r3
 800682a:	46bd      	mov	sp, r7
 800682c:	b006      	add	sp, #24
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40021000 	.word	0x40021000
 8006834:	40007000 	.word	0x40007000
 8006838:	fffcffff 	.word	0xfffcffff
 800683c:	fff7ffff 	.word	0xfff7ffff
 8006840:	00001388 	.word	0x00001388
 8006844:	ffcfffff 	.word	0xffcfffff
 8006848:	efffffff 	.word	0xefffffff
 800684c:	fffff3ff 	.word	0xfffff3ff
 8006850:	ffffcfff 	.word	0xffffcfff
 8006854:	fff3ffff 	.word	0xfff3ffff

08006858 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e08e      	b.n	8006988 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2221      	movs	r2, #33	; 0x21
 800686e:	5c9b      	ldrb	r3, [r3, r2]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d107      	bne.n	8006886 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	2100      	movs	r1, #0
 800687c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	0018      	movs	r0, r3
 8006882:	f7fd fcfb 	bl	800427c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2221      	movs	r2, #33	; 0x21
 800688a:	2102      	movs	r1, #2
 800688c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	22ca      	movs	r2, #202	; 0xca
 8006894:	625a      	str	r2, [r3, #36]	; 0x24
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2253      	movs	r2, #83	; 0x53
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	0018      	movs	r0, r3
 80068a2:	f000 faba 	bl	8006e1a <RTC_EnterInitMode>
 80068a6:	1e03      	subs	r3, r0, #0
 80068a8:	d009      	beq.n	80068be <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	22ff      	movs	r2, #255	; 0xff
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2221      	movs	r2, #33	; 0x21
 80068b6:	2104      	movs	r1, #4
 80068b8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e064      	b.n	8006988 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4931      	ldr	r1, [pc, #196]	; (8006990 <HAL_RTC_Init+0x138>)
 80068ca:	400a      	ands	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6899      	ldr	r1, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	68d2      	ldr	r2, [r2, #12]
 80068f4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6919      	ldr	r1, [r3, #16]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	041a      	lsls	r2, r3, #16
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2180      	movs	r1, #128	; 0x80
 8006916:	438a      	bics	r2, r1
 8006918:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2103      	movs	r1, #3
 8006926:	438a      	bics	r2, r1
 8006928:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69da      	ldr	r2, [r3, #28]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2220      	movs	r2, #32
 800694a:	4013      	ands	r3, r2
 800694c:	d113      	bne.n	8006976 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0018      	movs	r0, r3
 8006952:	f000 fa3b 	bl	8006dcc <HAL_RTC_WaitForSynchro>
 8006956:	1e03      	subs	r3, r0, #0
 8006958:	d00d      	beq.n	8006976 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	22ff      	movs	r2, #255	; 0xff
 8006960:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2221      	movs	r2, #33	; 0x21
 8006966:	2104      	movs	r1, #4
 8006968:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	2100      	movs	r1, #0
 8006970:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e008      	b.n	8006988 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	22ff      	movs	r2, #255	; 0xff
 800697c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2221      	movs	r2, #33	; 0x21
 8006982:	2101      	movs	r1, #1
 8006984:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006986:	2300      	movs	r3, #0
  }
}
 8006988:	0018      	movs	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	b002      	add	sp, #8
 800698e:	bd80      	pop	{r7, pc}
 8006990:	ff8fffbf 	.word	0xff8fffbf

08006994 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	5c9b      	ldrb	r3, [r3, r2]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <HAL_RTC_SetTime+0x1a>
 80069aa:	2302      	movs	r3, #2
 80069ac:	e0ad      	b.n	8006b0a <HAL_RTC_SetTime+0x176>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	2101      	movs	r1, #1
 80069b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2221      	movs	r2, #33	; 0x21
 80069ba:	2102      	movs	r1, #2
 80069bc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d125      	bne.n	8006a10 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2240      	movs	r2, #64	; 0x40
 80069cc:	4013      	ands	r3, r2
 80069ce:	d102      	bne.n	80069d6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2200      	movs	r2, #0
 80069d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	0018      	movs	r0, r3
 80069dc:	f000 fa47 	bl	8006e6e <RTC_ByteToBcd2>
 80069e0:	0003      	movs	r3, r0
 80069e2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	0018      	movs	r0, r3
 80069ea:	f000 fa40 	bl	8006e6e <RTC_ByteToBcd2>
 80069ee:	0003      	movs	r3, r0
 80069f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80069f2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	789b      	ldrb	r3, [r3, #2]
 80069f8:	0018      	movs	r0, r3
 80069fa:	f000 fa38 	bl	8006e6e <RTC_ByteToBcd2>
 80069fe:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006a00:	0022      	movs	r2, r4
 8006a02:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	78db      	ldrb	r3, [r3, #3]
 8006a08:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e017      	b.n	8006a40 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2240      	movs	r2, #64	; 0x40
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d102      	bne.n	8006a22 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006a2e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006a34:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	78db      	ldrb	r3, [r3, #3]
 8006a3a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	22ca      	movs	r2, #202	; 0xca
 8006a46:	625a      	str	r2, [r3, #36]	; 0x24
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2253      	movs	r2, #83	; 0x53
 8006a4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	0018      	movs	r0, r3
 8006a54:	f000 f9e1 	bl	8006e1a <RTC_EnterInitMode>
 8006a58:	1e03      	subs	r3, r0, #0
 8006a5a:	d00d      	beq.n	8006a78 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	22ff      	movs	r2, #255	; 0xff
 8006a62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2221      	movs	r2, #33	; 0x21
 8006a68:	2104      	movs	r1, #4
 8006a6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	2100      	movs	r1, #0
 8006a72:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e048      	b.n	8006b0a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4925      	ldr	r1, [pc, #148]	; (8006b14 <HAL_RTC_SetTime+0x180>)
 8006a80:	400a      	ands	r2, r1
 8006a82:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4922      	ldr	r1, [pc, #136]	; (8006b18 <HAL_RTC_SetTime+0x184>)
 8006a90:	400a      	ands	r2, r1
 8006a92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6899      	ldr	r1, [r3, #8]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2180      	movs	r1, #128	; 0x80
 8006ab8:	438a      	bics	r2, r1
 8006aba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	d113      	bne.n	8006af0 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	0018      	movs	r0, r3
 8006acc:	f000 f97e 	bl	8006dcc <HAL_RTC_WaitForSynchro>
 8006ad0:	1e03      	subs	r3, r0, #0
 8006ad2:	d00d      	beq.n	8006af0 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	22ff      	movs	r2, #255	; 0xff
 8006ada:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2221      	movs	r2, #33	; 0x21
 8006ae0:	2104      	movs	r1, #4
 8006ae2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	2100      	movs	r1, #0
 8006aea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e00c      	b.n	8006b0a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	22ff      	movs	r2, #255	; 0xff
 8006af6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2221      	movs	r2, #33	; 0x21
 8006afc:	2101      	movs	r1, #1
 8006afe:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2220      	movs	r2, #32
 8006b04:	2100      	movs	r1, #0
 8006b06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b08:	2300      	movs	r3, #0
  }
}
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b007      	add	sp, #28
 8006b10:	bd90      	pop	{r4, r7, pc}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	007f7f7f 	.word	0x007f7f7f
 8006b18:	fffbffff 	.word	0xfffbffff

08006b1c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	045b      	lsls	r3, r3, #17
 8006b3a:	0c5a      	lsrs	r2, r3, #17
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a22      	ldr	r2, [pc, #136]	; (8006bd0 <HAL_RTC_GetTime+0xb4>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	0c1b      	lsrs	r3, r3, #16
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	223f      	movs	r2, #63	; 0x3f
 8006b54:	4013      	ands	r3, r2
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	227f      	movs	r2, #127	; 0x7f
 8006b64:	4013      	ands	r3, r2
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	227f      	movs	r2, #127	; 0x7f
 8006b72:	4013      	ands	r3, r2
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	0c1b      	lsrs	r3, r3, #16
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2240      	movs	r2, #64	; 0x40
 8006b82:	4013      	ands	r3, r2
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d11a      	bne.n	8006bc6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	0018      	movs	r0, r3
 8006b96:	f000 f993 	bl	8006ec0 <RTC_Bcd2ToByte>
 8006b9a:	0003      	movs	r3, r0
 8006b9c:	001a      	movs	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f000 f98a 	bl	8006ec0 <RTC_Bcd2ToByte>
 8006bac:	0003      	movs	r3, r0
 8006bae:	001a      	movs	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	789b      	ldrb	r3, [r3, #2]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f000 f981 	bl	8006ec0 <RTC_Bcd2ToByte>
 8006bbe:	0003      	movs	r3, r0
 8006bc0:	001a      	movs	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	0018      	movs	r0, r3
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	b006      	add	sp, #24
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	007f7f7f 	.word	0x007f7f7f

08006bd4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006bd4:	b590      	push	{r4, r7, lr}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	5c9b      	ldrb	r3, [r3, r2]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_RTC_SetDate+0x1a>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e099      	b.n	8006d22 <HAL_RTC_SetDate+0x14e>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2221      	movs	r2, #33	; 0x21
 8006bfa:	2102      	movs	r1, #2
 8006bfc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10e      	bne.n	8006c22 <HAL_RTC_SetDate+0x4e>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	001a      	movs	r2, r3
 8006c0a:	2310      	movs	r3, #16
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d008      	beq.n	8006c22 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2210      	movs	r2, #16
 8006c16:	4393      	bics	r3, r2
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	330a      	adds	r3, #10
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d11c      	bne.n	8006c62 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	78db      	ldrb	r3, [r3, #3]
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f000 f91e 	bl	8006e6e <RTC_ByteToBcd2>
 8006c32:	0003      	movs	r3, r0
 8006c34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	785b      	ldrb	r3, [r3, #1]
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f000 f917 	bl	8006e6e <RTC_ByteToBcd2>
 8006c40:	0003      	movs	r3, r0
 8006c42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006c44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	789b      	ldrb	r3, [r3, #2]
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f000 f90f 	bl	8006e6e <RTC_ByteToBcd2>
 8006c50:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006c52:	0022      	movs	r2, r4
 8006c54:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e00e      	b.n	8006c80 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	78db      	ldrb	r3, [r3, #3]
 8006c66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c6e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006c74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	22ca      	movs	r2, #202	; 0xca
 8006c86:	625a      	str	r2, [r3, #36]	; 0x24
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2253      	movs	r2, #83	; 0x53
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 f8c1 	bl	8006e1a <RTC_EnterInitMode>
 8006c98:	1e03      	subs	r3, r0, #0
 8006c9a:	d00d      	beq.n	8006cb8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	22ff      	movs	r2, #255	; 0xff
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2221      	movs	r2, #33	; 0x21
 8006ca8:	2104      	movs	r1, #4
 8006caa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e034      	b.n	8006d22 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	491b      	ldr	r1, [pc, #108]	; (8006d2c <HAL_RTC_SetDate+0x158>)
 8006cc0:	400a      	ands	r2, r1
 8006cc2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2180      	movs	r1, #128	; 0x80
 8006cd0:	438a      	bics	r2, r1
 8006cd2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	4013      	ands	r3, r2
 8006cde:	d113      	bne.n	8006d08 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f000 f872 	bl	8006dcc <HAL_RTC_WaitForSynchro>
 8006ce8:	1e03      	subs	r3, r0, #0
 8006cea:	d00d      	beq.n	8006d08 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	22ff      	movs	r2, #255	; 0xff
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2221      	movs	r2, #33	; 0x21
 8006cf8:	2104      	movs	r1, #4
 8006cfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	2100      	movs	r1, #0
 8006d02:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e00c      	b.n	8006d22 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	22ff      	movs	r2, #255	; 0xff
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2221      	movs	r2, #33	; 0x21
 8006d14:	2101      	movs	r1, #1
 8006d16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d20:	2300      	movs	r3, #0
  }
}
 8006d22:	0018      	movs	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	b007      	add	sp, #28
 8006d28:	bd90      	pop	{r4, r7, pc}
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	00ffff3f 	.word	0x00ffff3f

08006d30 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <HAL_RTC_GetDate+0x98>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	0c1b      	lsrs	r3, r3, #16
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	0a1b      	lsrs	r3, r3, #8
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	221f      	movs	r2, #31
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	223f      	movs	r2, #63	; 0x3f
 8006d68:	4013      	ands	r3, r2
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	0b5b      	lsrs	r3, r3, #13
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2207      	movs	r2, #7
 8006d78:	4013      	ands	r3, r2
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d11a      	bne.n	8006dbc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	78db      	ldrb	r3, [r3, #3]
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f000 f898 	bl	8006ec0 <RTC_Bcd2ToByte>
 8006d90:	0003      	movs	r3, r0
 8006d92:	001a      	movs	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f000 f88f 	bl	8006ec0 <RTC_Bcd2ToByte>
 8006da2:	0003      	movs	r3, r0
 8006da4:	001a      	movs	r2, r3
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	789b      	ldrb	r3, [r3, #2]
 8006dae:	0018      	movs	r0, r3
 8006db0:	f000 f886 	bl	8006ec0 <RTC_Bcd2ToByte>
 8006db4:	0003      	movs	r3, r0
 8006db6:	001a      	movs	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	b006      	add	sp, #24
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	00ffff3f 	.word	0x00ffff3f

08006dcc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	21a0      	movs	r1, #160	; 0xa0
 8006de0:	438a      	bics	r2, r1
 8006de2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006de4:	f7fd fbd0 	bl	8004588 <HAL_GetTick>
 8006de8:	0003      	movs	r3, r0
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006dec:	e00a      	b.n	8006e04 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006dee:	f7fd fbcb 	bl	8004588 <HAL_GetTick>
 8006df2:	0002      	movs	r2, r0
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1ad2      	subs	r2, r2, r3
 8006df8:	23fa      	movs	r3, #250	; 0xfa
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d901      	bls.n	8006e04 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e006      	b.n	8006e12 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	d0ee      	beq.n	8006dee <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	0018      	movs	r0, r3
 8006e14:	46bd      	mov	sp, r7
 8006e16:	b004      	add	sp, #16
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2240      	movs	r2, #64	; 0x40
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d11a      	bne.n	8006e64 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2201      	movs	r2, #1
 8006e34:	4252      	negs	r2, r2
 8006e36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e38:	f7fd fba6 	bl	8004588 <HAL_GetTick>
 8006e3c:	0003      	movs	r3, r0
 8006e3e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e40:	e00a      	b.n	8006e58 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006e42:	f7fd fba1 	bl	8004588 <HAL_GetTick>
 8006e46:	0002      	movs	r2, r0
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	1ad2      	subs	r2, r2, r3
 8006e4c:	23fa      	movs	r3, #250	; 0xfa
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d901      	bls.n	8006e58 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e006      	b.n	8006e66 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	2240      	movs	r2, #64	; 0x40
 8006e60:	4013      	ands	r3, r2
 8006e62:	d0ee      	beq.n	8006e42 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	0018      	movs	r0, r3
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	b004      	add	sp, #16
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	0002      	movs	r2, r0
 8006e76:	1dfb      	adds	r3, r7, #7
 8006e78:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006e7e:	230b      	movs	r3, #11
 8006e80:	18fb      	adds	r3, r7, r3
 8006e82:	1dfa      	adds	r2, r7, #7
 8006e84:	7812      	ldrb	r2, [r2, #0]
 8006e86:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8006e88:	e008      	b.n	8006e9c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006e90:	220b      	movs	r2, #11
 8006e92:	18bb      	adds	r3, r7, r2
 8006e94:	18ba      	adds	r2, r7, r2
 8006e96:	7812      	ldrb	r2, [r2, #0]
 8006e98:	3a0a      	subs	r2, #10
 8006e9a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006e9c:	230b      	movs	r3, #11
 8006e9e:	18fb      	adds	r3, r7, r3
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b09      	cmp	r3, #9
 8006ea4:	d8f1      	bhi.n	8006e8a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	230b      	movs	r3, #11
 8006eb0:	18fb      	adds	r3, r7, r3
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b2db      	uxtb	r3, r3
}
 8006eb8:	0018      	movs	r0, r3
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	b004      	add	sp, #16
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	0002      	movs	r2, r0
 8006ec8:	1dfb      	adds	r3, r7, #7
 8006eca:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006ecc:	1dfb      	adds	r3, r7, #7
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	091b      	lsrs	r3, r3, #4
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	001a      	movs	r2, r3
 8006ed6:	0013      	movs	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	189b      	adds	r3, r3, r2
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	1dfb      	adds	r3, r7, #7
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	210f      	movs	r1, #15
 8006eea:	400b      	ands	r3, r1
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	18d3      	adds	r3, r2, r3
 8006ef0:	b2db      	uxtb	r3, r3
}
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	b004      	add	sp, #16
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b086      	sub	sp, #24
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3350      	adds	r3, #80	; 0x50
 8006f0c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	18d3      	adds	r3, r2, r3
 8006f16:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	601a      	str	r2, [r3, #0]
}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	46bd      	mov	sp, r7
 8006f22:	b006      	add	sp, #24
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3350      	adds	r3, #80	; 0x50
 8006f36:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	18d3      	adds	r3, r2, r3
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
}
 8006f46:	0018      	movs	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	b004      	add	sp, #16
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e03e      	b.n	8006fe0 <HAL_TIM_Base_Init+0x90>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2239      	movs	r2, #57	; 0x39
 8006f66:	5c9b      	ldrb	r3, [r3, r2]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d113      	bne.n	8006f96 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2238      	movs	r2, #56	; 0x38
 8006f72:	2100      	movs	r1, #0
 8006f74:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f000 fcf1 	bl	8007960 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d102      	bne.n	8006f8c <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <HAL_TIM_Base_Init+0x98>)
 8006f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	0010      	movs	r0, r2
 8006f94:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2239      	movs	r2, #57	; 0x39
 8006f9a:	2102      	movs	r1, #2
 8006f9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	0019      	movs	r1, r3
 8006fa8:	0010      	movs	r0, r2
 8006faa:	f000 fbe1 	bl	8007770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	223e      	movs	r2, #62	; 0x3e
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	223a      	movs	r2, #58	; 0x3a
 8006fba:	2101      	movs	r1, #1
 8006fbc:	5499      	strb	r1, [r3, r2]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	223b      	movs	r2, #59	; 0x3b
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	5499      	strb	r1, [r3, r2]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	223c      	movs	r2, #60	; 0x3c
 8006fca:	2101      	movs	r1, #1
 8006fcc:	5499      	strb	r1, [r3, r2]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	223d      	movs	r2, #61	; 0x3d
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2239      	movs	r2, #57	; 0x39
 8006fda:	2101      	movs	r1, #1
 8006fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	b002      	add	sp, #8
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	080042ad 	.word	0x080042ad

08006fec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2239      	movs	r2, #57	; 0x39
 8006ff8:	5c9b      	ldrb	r3, [r3, r2]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d001      	beq.n	8007004 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e033      	b.n	800706c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2239      	movs	r2, #57	; 0x39
 8007008:	2102      	movs	r1, #2
 800700a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	2380      	movs	r3, #128	; 0x80
 8007012:	05db      	lsls	r3, r3, #23
 8007014:	429a      	cmp	r2, r3
 8007016:	d00e      	beq.n	8007036 <HAL_TIM_Base_Start+0x4a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a15      	ldr	r2, [pc, #84]	; (8007074 <HAL_TIM_Base_Start+0x88>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d009      	beq.n	8007036 <HAL_TIM_Base_Start+0x4a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a14      	ldr	r2, [pc, #80]	; (8007078 <HAL_TIM_Base_Start+0x8c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d004      	beq.n	8007036 <HAL_TIM_Base_Start+0x4a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a12      	ldr	r2, [pc, #72]	; (800707c <HAL_TIM_Base_Start+0x90>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d111      	bne.n	800705a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2207      	movs	r2, #7
 800703e:	4013      	ands	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b06      	cmp	r3, #6
 8007046:	d010      	beq.n	800706a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2101      	movs	r1, #1
 8007054:	430a      	orrs	r2, r1
 8007056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007058:	e007      	b.n	800706a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2101      	movs	r1, #1
 8007066:	430a      	orrs	r2, r1
 8007068:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	0018      	movs	r0, r3
 800706e:	46bd      	mov	sp, r7
 8007070:	b004      	add	sp, #16
 8007072:	bd80      	pop	{r7, pc}
 8007074:	40000400 	.word	0x40000400
 8007078:	40010800 	.word	0x40010800
 800707c:	40011400 	.word	0x40011400

08007080 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <HAL_TIM_Base_Stop+0x38>)
 8007090:	4013      	ands	r3, r2
 8007092:	d107      	bne.n	80070a4 <HAL_TIM_Base_Stop+0x24>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2101      	movs	r1, #1
 80070a0:	438a      	bics	r2, r1
 80070a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2239      	movs	r2, #57	; 0x39
 80070a8:	2101      	movs	r1, #1
 80070aa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	0018      	movs	r0, r3
 80070b0:	46bd      	mov	sp, r7
 80070b2:	b002      	add	sp, #8
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	00001111 	.word	0x00001111

080070bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2239      	movs	r2, #57	; 0x39
 80070c8:	5c9b      	ldrb	r3, [r3, r2]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d001      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e03b      	b.n	800714c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2239      	movs	r2, #57	; 0x39
 80070d8:	2102      	movs	r1, #2
 80070da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2101      	movs	r1, #1
 80070e8:	430a      	orrs	r2, r1
 80070ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	2380      	movs	r3, #128	; 0x80
 80070f2:	05db      	lsls	r3, r3, #23
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d00e      	beq.n	8007116 <HAL_TIM_Base_Start_IT+0x5a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a15      	ldr	r2, [pc, #84]	; (8007154 <HAL_TIM_Base_Start_IT+0x98>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d009      	beq.n	8007116 <HAL_TIM_Base_Start_IT+0x5a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a14      	ldr	r2, [pc, #80]	; (8007158 <HAL_TIM_Base_Start_IT+0x9c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_TIM_Base_Start_IT+0x5a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a12      	ldr	r2, [pc, #72]	; (800715c <HAL_TIM_Base_Start_IT+0xa0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d111      	bne.n	800713a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2207      	movs	r2, #7
 800711e:	4013      	ands	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b06      	cmp	r3, #6
 8007126:	d010      	beq.n	800714a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2101      	movs	r1, #1
 8007134:	430a      	orrs	r2, r1
 8007136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007138:	e007      	b.n	800714a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2101      	movs	r1, #1
 8007146:	430a      	orrs	r2, r1
 8007148:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	0018      	movs	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	b004      	add	sp, #16
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40000400 	.word	0x40000400
 8007158:	40010800 	.word	0x40010800
 800715c:	40011400 	.word	0x40011400

08007160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2202      	movs	r2, #2
 8007170:	4013      	ands	r3, r2
 8007172:	2b02      	cmp	r3, #2
 8007174:	d12a      	bne.n	80071cc <HAL_TIM_IRQHandler+0x6c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2202      	movs	r2, #2
 800717e:	4013      	ands	r3, r2
 8007180:	2b02      	cmp	r3, #2
 8007182:	d123      	bne.n	80071cc <HAL_TIM_IRQHandler+0x6c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2203      	movs	r2, #3
 800718a:	4252      	negs	r2, r2
 800718c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2203      	movs	r2, #3
 800719c:	4013      	ands	r3, r2
 800719e:	d006      	beq.n	80071ae <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2280      	movs	r2, #128	; 0x80
 80071a4:	589b      	ldr	r3, [r3, r2]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	0010      	movs	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	e00b      	b.n	80071c6 <HAL_TIM_IRQHandler+0x66>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2288      	movs	r2, #136	; 0x88
 80071b2:	589b      	ldr	r3, [r3, r2]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	0010      	movs	r0, r2
 80071b8:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	228c      	movs	r2, #140	; 0x8c
 80071be:	589b      	ldr	r3, [r3, r2]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	0010      	movs	r0, r2
 80071c4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2204      	movs	r2, #4
 80071d4:	4013      	ands	r3, r2
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d12b      	bne.n	8007232 <HAL_TIM_IRQHandler+0xd2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	2204      	movs	r2, #4
 80071e2:	4013      	ands	r3, r2
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d124      	bne.n	8007232 <HAL_TIM_IRQHandler+0xd2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2205      	movs	r2, #5
 80071ee:	4252      	negs	r2, r2
 80071f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	23c0      	movs	r3, #192	; 0xc0
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4013      	ands	r3, r2
 8007204:	d006      	beq.n	8007214 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2280      	movs	r2, #128	; 0x80
 800720a:	589b      	ldr	r3, [r3, r2]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	0010      	movs	r0, r2
 8007210:	4798      	blx	r3
 8007212:	e00b      	b.n	800722c <HAL_TIM_IRQHandler+0xcc>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2288      	movs	r2, #136	; 0x88
 8007218:	589b      	ldr	r3, [r3, r2]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	0010      	movs	r0, r2
 800721e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	228c      	movs	r2, #140	; 0x8c
 8007224:	589b      	ldr	r3, [r3, r2]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	0010      	movs	r0, r2
 800722a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	2208      	movs	r2, #8
 800723a:	4013      	ands	r3, r2
 800723c:	2b08      	cmp	r3, #8
 800723e:	d12a      	bne.n	8007296 <HAL_TIM_IRQHandler+0x136>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	2208      	movs	r2, #8
 8007248:	4013      	ands	r3, r2
 800724a:	2b08      	cmp	r3, #8
 800724c:	d123      	bne.n	8007296 <HAL_TIM_IRQHandler+0x136>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2209      	movs	r2, #9
 8007254:	4252      	negs	r2, r2
 8007256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2204      	movs	r2, #4
 800725c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	2203      	movs	r2, #3
 8007266:	4013      	ands	r3, r2
 8007268:	d006      	beq.n	8007278 <HAL_TIM_IRQHandler+0x118>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2280      	movs	r2, #128	; 0x80
 800726e:	589b      	ldr	r3, [r3, r2]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	0010      	movs	r0, r2
 8007274:	4798      	blx	r3
 8007276:	e00b      	b.n	8007290 <HAL_TIM_IRQHandler+0x130>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2288      	movs	r2, #136	; 0x88
 800727c:	589b      	ldr	r3, [r3, r2]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	0010      	movs	r0, r2
 8007282:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	228c      	movs	r2, #140	; 0x8c
 8007288:	589b      	ldr	r3, [r3, r2]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	0010      	movs	r0, r2
 800728e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2210      	movs	r2, #16
 800729e:	4013      	ands	r3, r2
 80072a0:	2b10      	cmp	r3, #16
 80072a2:	d12b      	bne.n	80072fc <HAL_TIM_IRQHandler+0x19c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	2210      	movs	r2, #16
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b10      	cmp	r3, #16
 80072b0:	d124      	bne.n	80072fc <HAL_TIM_IRQHandler+0x19c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2211      	movs	r2, #17
 80072b8:	4252      	negs	r2, r2
 80072ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2208      	movs	r2, #8
 80072c0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69da      	ldr	r2, [r3, #28]
 80072c8:	23c0      	movs	r3, #192	; 0xc0
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4013      	ands	r3, r2
 80072ce:	d006      	beq.n	80072de <HAL_TIM_IRQHandler+0x17e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2280      	movs	r2, #128	; 0x80
 80072d4:	589b      	ldr	r3, [r3, r2]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	0010      	movs	r0, r2
 80072da:	4798      	blx	r3
 80072dc:	e00b      	b.n	80072f6 <HAL_TIM_IRQHandler+0x196>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2288      	movs	r2, #136	; 0x88
 80072e2:	589b      	ldr	r3, [r3, r2]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	0010      	movs	r0, r2
 80072e8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	228c      	movs	r2, #140	; 0x8c
 80072ee:	589b      	ldr	r3, [r3, r2]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	0010      	movs	r0, r2
 80072f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2201      	movs	r2, #1
 8007304:	4013      	ands	r3, r2
 8007306:	2b01      	cmp	r3, #1
 8007308:	d110      	bne.n	800732c <HAL_TIM_IRQHandler+0x1cc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	4013      	ands	r3, r2
 8007314:	2b01      	cmp	r3, #1
 8007316:	d109      	bne.n	800732c <HAL_TIM_IRQHandler+0x1cc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2202      	movs	r2, #2
 800731e:	4252      	negs	r2, r2
 8007320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	0010      	movs	r0, r2
 800732a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2240      	movs	r2, #64	; 0x40
 8007334:	4013      	ands	r3, r2
 8007336:	2b40      	cmp	r3, #64	; 0x40
 8007338:	d110      	bne.n	800735c <HAL_TIM_IRQHandler+0x1fc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	2240      	movs	r2, #64	; 0x40
 8007342:	4013      	ands	r3, r2
 8007344:	2b40      	cmp	r3, #64	; 0x40
 8007346:	d109      	bne.n	800735c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2241      	movs	r2, #65	; 0x41
 800734e:	4252      	negs	r2, r2
 8007350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	0010      	movs	r0, r2
 800735a:	4798      	blx	r3
#else
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800735c:	46c0      	nop			; (mov r8, r8)
 800735e:	46bd      	mov	sp, r7
 8007360:	b002      	add	sp, #8
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	230f      	movs	r3, #15
 8007370:	18fb      	adds	r3, r7, r3
 8007372:	2200      	movs	r2, #0
 8007374:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2238      	movs	r2, #56	; 0x38
 800737a:	5c9b      	ldrb	r3, [r3, r2]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_TIM_ConfigClockSource+0x20>
 8007380:	2302      	movs	r3, #2
 8007382:	e0b2      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x186>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2238      	movs	r2, #56	; 0x38
 8007388:	2101      	movs	r1, #1
 800738a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2239      	movs	r2, #57	; 0x39
 8007390:	2102      	movs	r1, #2
 8007392:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2277      	movs	r2, #119	; 0x77
 80073a0:	4393      	bics	r3, r2
 80073a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4a53      	ldr	r2, [pc, #332]	; (80074f4 <HAL_TIM_ConfigClockSource+0x190>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d100      	bne.n	80073be <HAL_TIM_ConfigClockSource+0x5a>
 80073bc:	e06b      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x132>
 80073be:	d80e      	bhi.n	80073de <HAL_TIM_ConfigClockSource+0x7a>
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	d100      	bne.n	80073c6 <HAL_TIM_ConfigClockSource+0x62>
 80073c4:	e077      	b.n	80074b6 <HAL_TIM_ConfigClockSource+0x152>
 80073c6:	d803      	bhi.n	80073d0 <HAL_TIM_ConfigClockSource+0x6c>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d100      	bne.n	80073ce <HAL_TIM_ConfigClockSource+0x6a>
 80073cc:	e073      	b.n	80074b6 <HAL_TIM_ConfigClockSource+0x152>
 80073ce:	e07b      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x164>
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d100      	bne.n	80073d6 <HAL_TIM_ConfigClockSource+0x72>
 80073d4:	e06f      	b.n	80074b6 <HAL_TIM_ConfigClockSource+0x152>
 80073d6:	2b30      	cmp	r3, #48	; 0x30
 80073d8:	d100      	bne.n	80073dc <HAL_TIM_ConfigClockSource+0x78>
 80073da:	e06c      	b.n	80074b6 <HAL_TIM_ConfigClockSource+0x152>
 80073dc:	e074      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x164>
 80073de:	2b70      	cmp	r3, #112	; 0x70
 80073e0:	d00e      	beq.n	8007400 <HAL_TIM_ConfigClockSource+0x9c>
 80073e2:	d804      	bhi.n	80073ee <HAL_TIM_ConfigClockSource+0x8a>
 80073e4:	2b50      	cmp	r3, #80	; 0x50
 80073e6:	d036      	beq.n	8007456 <HAL_TIM_ConfigClockSource+0xf2>
 80073e8:	2b60      	cmp	r3, #96	; 0x60
 80073ea:	d044      	beq.n	8007476 <HAL_TIM_ConfigClockSource+0x112>
 80073ec:	e06c      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x164>
 80073ee:	2280      	movs	r2, #128	; 0x80
 80073f0:	0152      	lsls	r2, r2, #5
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d06d      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x16e>
 80073f6:	2280      	movs	r2, #128	; 0x80
 80073f8:	0192      	lsls	r2, r2, #6
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d017      	beq.n	800742e <HAL_TIM_ConfigClockSource+0xca>
 80073fe:	e063      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	6899      	ldr	r1, [r3, #8]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f000 fa86 	bl	8007920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2277      	movs	r2, #119	; 0x77
 8007420:	4313      	orrs	r3, r2
 8007422:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	609a      	str	r2, [r3, #8]
      break;
 800742c:	e052      	b.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6899      	ldr	r1, [r3, #8]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f000 fa6f 	bl	8007920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2180      	movs	r1, #128	; 0x80
 800744e:	01c9      	lsls	r1, r1, #7
 8007450:	430a      	orrs	r2, r1
 8007452:	609a      	str	r2, [r3, #8]
      break;
 8007454:	e03e      	b.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	6859      	ldr	r1, [r3, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	001a      	movs	r2, r3
 8007464:	f000 f9e2 	bl	800782c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2150      	movs	r1, #80	; 0x50
 800746e:	0018      	movs	r0, r3
 8007470:	f000 fa3c 	bl	80078ec <TIM_ITRx_SetConfig>
      break;
 8007474:	e02e      	b.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6818      	ldr	r0, [r3, #0]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6859      	ldr	r1, [r3, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	001a      	movs	r2, r3
 8007484:	f000 fa00 	bl	8007888 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2160      	movs	r1, #96	; 0x60
 800748e:	0018      	movs	r0, r3
 8007490:	f000 fa2c 	bl	80078ec <TIM_ITRx_SetConfig>
      break;
 8007494:	e01e      	b.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6818      	ldr	r0, [r3, #0]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	6859      	ldr	r1, [r3, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	001a      	movs	r2, r3
 80074a4:	f000 f9c2 	bl	800782c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2140      	movs	r1, #64	; 0x40
 80074ae:	0018      	movs	r0, r3
 80074b0:	f000 fa1c 	bl	80078ec <TIM_ITRx_SetConfig>
      break;
 80074b4:	e00e      	b.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	0019      	movs	r1, r3
 80074c0:	0010      	movs	r0, r2
 80074c2:	f000 fa13 	bl	80078ec <TIM_ITRx_SetConfig>
      break;
 80074c6:	e005      	b.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 80074c8:	230f      	movs	r3, #15
 80074ca:	18fb      	adds	r3, r7, r3
 80074cc:	2201      	movs	r2, #1
 80074ce:	701a      	strb	r2, [r3, #0]
      break;
 80074d0:	e000      	b.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
      break;
 80074d2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2239      	movs	r2, #57	; 0x39
 80074d8:	2101      	movs	r1, #1
 80074da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2238      	movs	r2, #56	; 0x38
 80074e0:	2100      	movs	r1, #0
 80074e2:	5499      	strb	r1, [r3, r2]

  return status;
 80074e4:	230f      	movs	r3, #15
 80074e6:	18fb      	adds	r3, r7, r3
 80074e8:	781b      	ldrb	r3, [r3, #0]
}
 80074ea:	0018      	movs	r0, r3
 80074ec:	46bd      	mov	sp, r7
 80074ee:	b004      	add	sp, #16
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	ffff00ff 	.word	0xffff00ff

080074f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007500:	46c0      	nop			; (mov r8, r8)
 8007502:	46bd      	mov	sp, r7
 8007504:	b002      	add	sp, #8
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007510:	46c0      	nop			; (mov r8, r8)
 8007512:	46bd      	mov	sp, r7
 8007514:	b002      	add	sp, #8
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	46bd      	mov	sp, r7
 8007524:	b002      	add	sp, #8
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007530:	46c0      	nop			; (mov r8, r8)
 8007532:	46bd      	mov	sp, r7
 8007534:	b002      	add	sp, #8
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007540:	46c0      	nop			; (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	b002      	add	sp, #8
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007550:	46c0      	nop			; (mov r8, r8)
 8007552:	46bd      	mov	sp, r7
 8007554:	b002      	add	sp, #8
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007560:	46c0      	nop			; (mov r8, r8)
 8007562:	46bd      	mov	sp, r7
 8007564:	b002      	add	sp, #8
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007570:	46c0      	nop			; (mov r8, r8)
 8007572:	46bd      	mov	sp, r7
 8007574:	b002      	add	sp, #8
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007580:	46c0      	nop			; (mov r8, r8)
 8007582:	46bd      	mov	sp, r7
 8007584:	b002      	add	sp, #8
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007590:	46c0      	nop			; (mov r8, r8)
 8007592:	46bd      	mov	sp, r7
 8007594:	b002      	add	sp, #8
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	607a      	str	r2, [r7, #4]
 80075a2:	230b      	movs	r3, #11
 80075a4:	18fb      	adds	r3, r7, r3
 80075a6:	1c0a      	adds	r2, r1, #0
 80075a8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075aa:	2317      	movs	r3, #23
 80075ac:	18fb      	adds	r3, r7, r3
 80075ae:	2200      	movs	r2, #0
 80075b0:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e0d0      	b.n	800775e <HAL_TIM_RegisterCallback+0x1c6>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2238      	movs	r2, #56	; 0x38
 80075c0:	5c9b      	ldrb	r3, [r3, r2]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d101      	bne.n	80075ca <HAL_TIM_RegisterCallback+0x32>
 80075c6:	2302      	movs	r3, #2
 80075c8:	e0c9      	b.n	800775e <HAL_TIM_RegisterCallback+0x1c6>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2238      	movs	r2, #56	; 0x38
 80075ce:	2101      	movs	r1, #1
 80075d0:	5499      	strb	r1, [r3, r2]

  if (htim->State == HAL_TIM_STATE_READY)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2239      	movs	r2, #57	; 0x39
 80075d6:	5c9b      	ldrb	r3, [r3, r2]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d000      	beq.n	80075e0 <HAL_TIM_RegisterCallback+0x48>
 80075de:	e06d      	b.n	80076bc <HAL_TIM_RegisterCallback+0x124>
  {
    switch (CallbackID)
 80075e0:	230b      	movs	r3, #11
 80075e2:	18fb      	adds	r3, r7, r3
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b17      	cmp	r3, #23
 80075e8:	d862      	bhi.n	80076b0 <HAL_TIM_RegisterCallback+0x118>
 80075ea:	009a      	lsls	r2, r3, #2
 80075ec:	4b5e      	ldr	r3, [pc, #376]	; (8007768 <HAL_TIM_RegisterCallback+0x1d0>)
 80075ee:	18d3      	adds	r3, r2, r3
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 80075fa:	e0a9      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8007602:	e0a5      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800760a:	e0a1      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007612:	e09d      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800761a:	e099      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007622:	e095      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800762a:	e091      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007632:	e08d      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800763a:	e089      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007642:	e085      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800764a:	e081      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007652:	e07d      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800765a:	e079      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007662:	e075      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800766a:	e071      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007672:	e06d      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2180      	movs	r1, #128	; 0x80
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	505a      	str	r2, [r3, r1]
        break;
 800767c:	e068      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2184      	movs	r1, #132	; 0x84
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	505a      	str	r2, [r3, r1]
        break;
 8007686:	e063      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2188      	movs	r1, #136	; 0x88
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	505a      	str	r2, [r3, r1]
        break;
 8007690:	e05e      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	218c      	movs	r1, #140	; 0x8c
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	505a      	str	r2, [r3, r1]
        break;
 800769a:	e059      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2190      	movs	r1, #144	; 0x90
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	505a      	str	r2, [r3, r1]
        break;
 80076a4:	e054      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2194      	movs	r1, #148	; 0x94
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	505a      	str	r2, [r3, r1]
        break;
 80076ae:	e04f      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80076b0:	2317      	movs	r3, #23
 80076b2:	18fb      	adds	r3, r7, r3
 80076b4:	2201      	movs	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
        break;
 80076b8:	46c0      	nop			; (mov r8, r8)
 80076ba:	e049      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2239      	movs	r2, #57	; 0x39
 80076c0:	5c9b      	ldrb	r3, [r3, r2]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d13f      	bne.n	8007748 <HAL_TIM_RegisterCallback+0x1b0>
  {
    switch (CallbackID)
 80076c8:	230b      	movs	r3, #11
 80076ca:	18fb      	adds	r3, r7, r3
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2b0b      	cmp	r3, #11
 80076d0:	d834      	bhi.n	800773c <HAL_TIM_RegisterCallback+0x1a4>
 80076d2:	009a      	lsls	r2, r3, #2
 80076d4:	4b25      	ldr	r3, [pc, #148]	; (800776c <HAL_TIM_RegisterCallback+0x1d4>)
 80076d6:	18d3      	adds	r3, r2, r3
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 80076e2:	e035      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80076ea:	e031      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80076f2:	e02d      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80076fa:	e029      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007702:	e025      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800770a:	e021      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007712:	e01d      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800771a:	e019      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007722:	e015      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800772a:	e011      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007732:	e00d      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800773a:	e009      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800773c:	2317      	movs	r3, #23
 800773e:	18fb      	adds	r3, r7, r3
 8007740:	2201      	movs	r2, #1
 8007742:	701a      	strb	r2, [r3, #0]
        break;
 8007744:	46c0      	nop			; (mov r8, r8)
 8007746:	e003      	b.n	8007750 <HAL_TIM_RegisterCallback+0x1b8>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007748:	2317      	movs	r3, #23
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	2201      	movs	r2, #1
 800774e:	701a      	strb	r2, [r3, #0]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2238      	movs	r2, #56	; 0x38
 8007754:	2100      	movs	r1, #0
 8007756:	5499      	strb	r1, [r3, r2]

  return status;
 8007758:	2317      	movs	r3, #23
 800775a:	18fb      	adds	r3, r7, r3
 800775c:	781b      	ldrb	r3, [r3, #0]
}
 800775e:	0018      	movs	r0, r3
 8007760:	46bd      	mov	sp, r7
 8007762:	b006      	add	sp, #24
 8007764:	bd80      	pop	{r7, pc}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	0800af1c 	.word	0x0800af1c
 800776c:	0800af7c 	.word	0x0800af7c

08007770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	2380      	movs	r3, #128	; 0x80
 8007784:	05db      	lsls	r3, r3, #23
 8007786:	429a      	cmp	r2, r3
 8007788:	d00b      	beq.n	80077a2 <TIM_Base_SetConfig+0x32>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a23      	ldr	r2, [pc, #140]	; (800781c <TIM_Base_SetConfig+0xac>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d007      	beq.n	80077a2 <TIM_Base_SetConfig+0x32>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a22      	ldr	r2, [pc, #136]	; (8007820 <TIM_Base_SetConfig+0xb0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_Base_SetConfig+0x32>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a21      	ldr	r2, [pc, #132]	; (8007824 <TIM_Base_SetConfig+0xb4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d108      	bne.n	80077b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2270      	movs	r2, #112	; 0x70
 80077a6:	4393      	bics	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	2380      	movs	r3, #128	; 0x80
 80077b8:	05db      	lsls	r3, r3, #23
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d00b      	beq.n	80077d6 <TIM_Base_SetConfig+0x66>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a16      	ldr	r2, [pc, #88]	; (800781c <TIM_Base_SetConfig+0xac>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d007      	beq.n	80077d6 <TIM_Base_SetConfig+0x66>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a15      	ldr	r2, [pc, #84]	; (8007820 <TIM_Base_SetConfig+0xb0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d003      	beq.n	80077d6 <TIM_Base_SetConfig+0x66>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a14      	ldr	r2, [pc, #80]	; (8007824 <TIM_Base_SetConfig+0xb4>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d108      	bne.n	80077e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a13      	ldr	r2, [pc, #76]	; (8007828 <TIM_Base_SetConfig+0xb8>)
 80077da:	4013      	ands	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2280      	movs	r2, #128	; 0x80
 80077ec:	4393      	bics	r3, r2
 80077ee:	001a      	movs	r2, r3
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	615a      	str	r2, [r3, #20]
}
 8007814:	46c0      	nop			; (mov r8, r8)
 8007816:	46bd      	mov	sp, r7
 8007818:	b004      	add	sp, #16
 800781a:	bd80      	pop	{r7, pc}
 800781c:	40000400 	.word	0x40000400
 8007820:	40010800 	.word	0x40010800
 8007824:	40011400 	.word	0x40011400
 8007828:	fffffcff 	.word	0xfffffcff

0800782c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	2201      	movs	r2, #1
 8007844:	4393      	bics	r3, r2
 8007846:	001a      	movs	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	22f0      	movs	r2, #240	; 0xf0
 8007856:	4393      	bics	r3, r2
 8007858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4313      	orrs	r3, r2
 8007862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	220a      	movs	r2, #10
 8007868:	4393      	bics	r3, r2
 800786a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4313      	orrs	r3, r2
 8007872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	621a      	str	r2, [r3, #32]
}
 8007880:	46c0      	nop			; (mov r8, r8)
 8007882:	46bd      	mov	sp, r7
 8007884:	b006      	add	sp, #24
 8007886:	bd80      	pop	{r7, pc}

08007888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	2210      	movs	r2, #16
 800789a:	4393      	bics	r3, r2
 800789c:	001a      	movs	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	4a0d      	ldr	r2, [pc, #52]	; (80078e8 <TIM_TI2_ConfigInputStage+0x60>)
 80078b2:	4013      	ands	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	031b      	lsls	r3, r3, #12
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	4313      	orrs	r3, r2
 80078be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	22a0      	movs	r2, #160	; 0xa0
 80078c4:	4393      	bics	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	621a      	str	r2, [r3, #32]
}
 80078de:	46c0      	nop			; (mov r8, r8)
 80078e0:	46bd      	mov	sp, r7
 80078e2:	b006      	add	sp, #24
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	ffff0fff 	.word	0xffff0fff

080078ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2270      	movs	r2, #112	; 0x70
 8007900:	4393      	bics	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	2207      	movs	r2, #7
 800790c:	4313      	orrs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	609a      	str	r2, [r3, #8]
}
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	46bd      	mov	sp, r7
 800791a:	b004      	add	sp, #16
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	4a09      	ldr	r2, [pc, #36]	; (800795c <TIM_ETR_SetConfig+0x3c>)
 8007938:	4013      	ands	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	021a      	lsls	r2, r3, #8
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	431a      	orrs	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4313      	orrs	r3, r2
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	609a      	str	r2, [r3, #8]
}
 8007954:	46c0      	nop			; (mov r8, r8)
 8007956:	46bd      	mov	sp, r7
 8007958:	b006      	add	sp, #24
 800795a:	bd80      	pop	{r7, pc}
 800795c:	ffff00ff 	.word	0xffff00ff

08007960 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a13      	ldr	r2, [pc, #76]	; (80079b8 <TIM_ResetCallback+0x58>)
 800796c:	671a      	str	r2, [r3, #112]	; 0x70
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a12      	ldr	r2, [pc, #72]	; (80079bc <TIM_ResetCallback+0x5c>)
 8007972:	675a      	str	r2, [r3, #116]	; 0x74
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a12      	ldr	r2, [pc, #72]	; (80079c0 <TIM_ResetCallback+0x60>)
 8007978:	679a      	str	r2, [r3, #120]	; 0x78
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a11      	ldr	r2, [pc, #68]	; (80079c4 <TIM_ResetCallback+0x64>)
 800797e:	67da      	str	r2, [r3, #124]	; 0x7c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2180      	movs	r1, #128	; 0x80
 8007984:	4a10      	ldr	r2, [pc, #64]	; (80079c8 <TIM_ResetCallback+0x68>)
 8007986:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2184      	movs	r1, #132	; 0x84
 800798c:	4a0f      	ldr	r2, [pc, #60]	; (80079cc <TIM_ResetCallback+0x6c>)
 800798e:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2188      	movs	r1, #136	; 0x88
 8007994:	4a0e      	ldr	r2, [pc, #56]	; (80079d0 <TIM_ResetCallback+0x70>)
 8007996:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	218c      	movs	r1, #140	; 0x8c
 800799c:	4a0d      	ldr	r2, [pc, #52]	; (80079d4 <TIM_ResetCallback+0x74>)
 800799e:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2190      	movs	r1, #144	; 0x90
 80079a4:	4a0c      	ldr	r2, [pc, #48]	; (80079d8 <TIM_ResetCallback+0x78>)
 80079a6:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2194      	movs	r1, #148	; 0x94
 80079ac:	4a0b      	ldr	r2, [pc, #44]	; (80079dc <TIM_ResetCallback+0x7c>)
 80079ae:	505a      	str	r2, [r3, r1]
}
 80079b0:	46c0      	nop			; (mov r8, r8)
 80079b2:	46bd      	mov	sp, r7
 80079b4:	b002      	add	sp, #8
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	080074f9 	.word	0x080074f9
 80079bc:	08007509 	.word	0x08007509
 80079c0:	08007569 	.word	0x08007569
 80079c4:	08007579 	.word	0x08007579
 80079c8:	08007529 	.word	0x08007529
 80079cc:	08007539 	.word	0x08007539
 80079d0:	08007519 	.word	0x08007519
 80079d4:	08007549 	.word	0x08007549
 80079d8:	08007559 	.word	0x08007559
 80079dc:	08007589 	.word	0x08007589

080079e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2238      	movs	r2, #56	; 0x38
 80079ee:	5c9b      	ldrb	r3, [r3, r2]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d101      	bne.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079f4:	2302      	movs	r3, #2
 80079f6:	e047      	b.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2238      	movs	r2, #56	; 0x38
 80079fc:	2101      	movs	r1, #1
 80079fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2239      	movs	r2, #57	; 0x39
 8007a04:	2102      	movs	r1, #2
 8007a06:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2270      	movs	r2, #112	; 0x70
 8007a1c:	4393      	bics	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	2380      	movs	r3, #128	; 0x80
 8007a38:	05db      	lsls	r3, r3, #23
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d00e      	beq.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a13      	ldr	r2, [pc, #76]	; (8007a90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d009      	beq.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a11      	ldr	r2, [pc, #68]	; (8007a94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d004      	beq.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a10      	ldr	r2, [pc, #64]	; (8007a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d10c      	bne.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2280      	movs	r2, #128	; 0x80
 8007a60:	4393      	bics	r3, r2
 8007a62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2239      	movs	r2, #57	; 0x39
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2238      	movs	r2, #56	; 0x38
 8007a82:	2100      	movs	r1, #0
 8007a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	0018      	movs	r0, r3
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	b004      	add	sp, #16
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40000400 	.word	0x40000400
 8007a94:	40010800 	.word	0x40010800
 8007a98:	40011400 	.word	0x40011400

08007a9c <gcvt>:
 8007a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a9e:	001c      	movs	r4, r3
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	0015      	movs	r5, r2
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	0006      	movs	r6, r0
 8007aaa:	000f      	movs	r7, r1
 8007aac:	f7f8 fcc2 	bl	8000434 <__aeabi_dcmplt>
 8007ab0:	0023      	movs	r3, r4
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d003      	beq.n	8007abe <gcvt+0x22>
 8007ab6:	232d      	movs	r3, #45	; 0x2d
 8007ab8:	3d01      	subs	r5, #1
 8007aba:	7023      	strb	r3, [r4, #0]
 8007abc:	1c63      	adds	r3, r4, #1
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4908      	ldr	r1, [pc, #32]	; (8007ae4 <gcvt+0x48>)
 8007ac2:	9203      	str	r2, [sp, #12]
 8007ac4:	3267      	adds	r2, #103	; 0x67
 8007ac6:	9202      	str	r2, [sp, #8]
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	9500      	str	r5, [sp, #0]
 8007acc:	003b      	movs	r3, r7
 8007ace:	0032      	movs	r2, r6
 8007ad0:	6808      	ldr	r0, [r1, #0]
 8007ad2:	f000 f8d3 	bl	8007c7c <_gcvt>
 8007ad6:	1e43      	subs	r3, r0, #1
 8007ad8:	4198      	sbcs	r0, r3
 8007ada:	4240      	negs	r0, r0
 8007adc:	4004      	ands	r4, r0
 8007ade:	0020      	movs	r0, r4
 8007ae0:	b005      	add	sp, #20
 8007ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ae4:	2000001c 	.word	0x2000001c

08007ae8 <__errno>:
 8007ae8:	4b01      	ldr	r3, [pc, #4]	; (8007af0 <__errno+0x8>)
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	4770      	bx	lr
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	2000001c 	.word	0x2000001c

08007af4 <__libc_init_array>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	2600      	movs	r6, #0
 8007af8:	4d0c      	ldr	r5, [pc, #48]	; (8007b2c <__libc_init_array+0x38>)
 8007afa:	4c0d      	ldr	r4, [pc, #52]	; (8007b30 <__libc_init_array+0x3c>)
 8007afc:	1b64      	subs	r4, r4, r5
 8007afe:	10a4      	asrs	r4, r4, #2
 8007b00:	42a6      	cmp	r6, r4
 8007b02:	d109      	bne.n	8007b18 <__libc_init_array+0x24>
 8007b04:	2600      	movs	r6, #0
 8007b06:	f001 fef5 	bl	80098f4 <_init>
 8007b0a:	4d0a      	ldr	r5, [pc, #40]	; (8007b34 <__libc_init_array+0x40>)
 8007b0c:	4c0a      	ldr	r4, [pc, #40]	; (8007b38 <__libc_init_array+0x44>)
 8007b0e:	1b64      	subs	r4, r4, r5
 8007b10:	10a4      	asrs	r4, r4, #2
 8007b12:	42a6      	cmp	r6, r4
 8007b14:	d105      	bne.n	8007b22 <__libc_init_array+0x2e>
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	00b3      	lsls	r3, r6, #2
 8007b1a:	58eb      	ldr	r3, [r5, r3]
 8007b1c:	4798      	blx	r3
 8007b1e:	3601      	adds	r6, #1
 8007b20:	e7ee      	b.n	8007b00 <__libc_init_array+0xc>
 8007b22:	00b3      	lsls	r3, r6, #2
 8007b24:	58eb      	ldr	r3, [r5, r3]
 8007b26:	4798      	blx	r3
 8007b28:	3601      	adds	r6, #1
 8007b2a:	e7f2      	b.n	8007b12 <__libc_init_array+0x1e>
 8007b2c:	0800b0f8 	.word	0x0800b0f8
 8007b30:	0800b0f8 	.word	0x0800b0f8
 8007b34:	0800b0f8 	.word	0x0800b0f8
 8007b38:	0800b0fc 	.word	0x0800b0fc

08007b3c <memset>:
 8007b3c:	0003      	movs	r3, r0
 8007b3e:	1812      	adds	r2, r2, r0
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d100      	bne.n	8007b46 <memset+0xa>
 8007b44:	4770      	bx	lr
 8007b46:	7019      	strb	r1, [r3, #0]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	e7f9      	b.n	8007b40 <memset+0x4>

08007b4c <siprintf>:
 8007b4c:	b40e      	push	{r1, r2, r3}
 8007b4e:	b500      	push	{lr}
 8007b50:	490b      	ldr	r1, [pc, #44]	; (8007b80 <siprintf+0x34>)
 8007b52:	b09c      	sub	sp, #112	; 0x70
 8007b54:	ab1d      	add	r3, sp, #116	; 0x74
 8007b56:	9002      	str	r0, [sp, #8]
 8007b58:	9006      	str	r0, [sp, #24]
 8007b5a:	9107      	str	r1, [sp, #28]
 8007b5c:	9104      	str	r1, [sp, #16]
 8007b5e:	4809      	ldr	r0, [pc, #36]	; (8007b84 <siprintf+0x38>)
 8007b60:	4909      	ldr	r1, [pc, #36]	; (8007b88 <siprintf+0x3c>)
 8007b62:	cb04      	ldmia	r3!, {r2}
 8007b64:	9105      	str	r1, [sp, #20]
 8007b66:	6800      	ldr	r0, [r0, #0]
 8007b68:	a902      	add	r1, sp, #8
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	f000 fd48 	bl	8008600 <_svfiprintf_r>
 8007b70:	2300      	movs	r3, #0
 8007b72:	9a02      	ldr	r2, [sp, #8]
 8007b74:	7013      	strb	r3, [r2, #0]
 8007b76:	b01c      	add	sp, #112	; 0x70
 8007b78:	bc08      	pop	{r3}
 8007b7a:	b003      	add	sp, #12
 8007b7c:	4718      	bx	r3
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	7fffffff 	.word	0x7fffffff
 8007b84:	2000001c 	.word	0x2000001c
 8007b88:	ffff0208 	.word	0xffff0208

08007b8c <print_e>:
 8007b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b8e:	b08b      	sub	sp, #44	; 0x2c
 8007b90:	000c      	movs	r4, r1
 8007b92:	a910      	add	r1, sp, #64	; 0x40
 8007b94:	c940      	ldmia	r1!, {r6}
 8007b96:	780d      	ldrb	r5, [r1, #0]
 8007b98:	a908      	add	r1, sp, #32
 8007b9a:	9104      	str	r1, [sp, #16]
 8007b9c:	a907      	add	r1, sp, #28
 8007b9e:	9103      	str	r1, [sp, #12]
 8007ba0:	a909      	add	r1, sp, #36	; 0x24
 8007ba2:	9102      	str	r1, [sp, #8]
 8007ba4:	1c71      	adds	r1, r6, #1
 8007ba6:	9101      	str	r1, [sp, #4]
 8007ba8:	2102      	movs	r1, #2
 8007baa:	9100      	str	r1, [sp, #0]
 8007bac:	f001 f83c 	bl	8008c28 <_dtoa_r>
 8007bb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007bb2:	4b31      	ldr	r3, [pc, #196]	; (8007c78 <print_e+0xec>)
 8007bb4:	429f      	cmp	r7, r3
 8007bb6:	d105      	bne.n	8007bc4 <print_e+0x38>
 8007bb8:	0001      	movs	r1, r0
 8007bba:	0020      	movs	r0, r4
 8007bbc:	f000 ffa6 	bl	8008b0c <strcpy>
 8007bc0:	b00b      	add	sp, #44	; 0x2c
 8007bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc4:	7803      	ldrb	r3, [r0, #0]
 8007bc6:	1c41      	adds	r1, r0, #1
 8007bc8:	7023      	strb	r3, [r4, #0]
 8007bca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bcc:	1c62      	adds	r2, r4, #1
 8007bce:	4333      	orrs	r3, r6
 8007bd0:	d003      	beq.n	8007bda <print_e+0x4e>
 8007bd2:	232e      	movs	r3, #46	; 0x2e
 8007bd4:	7063      	strb	r3, [r4, #1]
 8007bd6:	0033      	movs	r3, r6
 8007bd8:	1ca2      	adds	r2, r4, #2
 8007bda:	7808      	ldrb	r0, [r1, #0]
 8007bdc:	0014      	movs	r4, r2
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d001      	beq.n	8007be6 <print_e+0x5a>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	dc38      	bgt.n	8007c58 <print_e+0xcc>
 8007be6:	2d67      	cmp	r5, #103	; 0x67
 8007be8:	d03f      	beq.n	8007c6a <print_e+0xde>
 8007bea:	2d47      	cmp	r5, #71	; 0x47
 8007bec:	d03f      	beq.n	8007c6e <print_e+0xe2>
 8007bee:	0019      	movs	r1, r3
 8007bf0:	2030      	movs	r0, #48	; 0x30
 8007bf2:	2900      	cmp	r1, #0
 8007bf4:	dc35      	bgt.n	8007c62 <print_e+0xd6>
 8007bf6:	43da      	mvns	r2, r3
 8007bf8:	17d2      	asrs	r2, r2, #31
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	18e4      	adds	r4, r4, r3
 8007bfe:	1e7b      	subs	r3, r7, #1
 8007c00:	7025      	strb	r5, [r4, #0]
 8007c02:	9309      	str	r3, [sp, #36]	; 0x24
 8007c04:	1ca5      	adds	r5, r4, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da33      	bge.n	8007c72 <print_e+0xe6>
 8007c0a:	232d      	movs	r3, #45	; 0x2d
 8007c0c:	7063      	strb	r3, [r4, #1]
 8007c0e:	3b2c      	subs	r3, #44	; 0x2c
 8007c10:	1bdb      	subs	r3, r3, r7
 8007c12:	9309      	str	r3, [sp, #36]	; 0x24
 8007c14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007c16:	2e63      	cmp	r6, #99	; 0x63
 8007c18:	dd0c      	ble.n	8007c34 <print_e+0xa8>
 8007c1a:	2164      	movs	r1, #100	; 0x64
 8007c1c:	0030      	movs	r0, r6
 8007c1e:	f7f8 fb07 	bl	8000230 <__divsi3>
 8007c22:	0003      	movs	r3, r0
 8007c24:	3330      	adds	r3, #48	; 0x30
 8007c26:	70a3      	strb	r3, [r4, #2]
 8007c28:	2364      	movs	r3, #100	; 0x64
 8007c2a:	425b      	negs	r3, r3
 8007c2c:	4358      	muls	r0, r3
 8007c2e:	1980      	adds	r0, r0, r6
 8007c30:	1ce5      	adds	r5, r4, #3
 8007c32:	9009      	str	r0, [sp, #36]	; 0x24
 8007c34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007c36:	210a      	movs	r1, #10
 8007c38:	0020      	movs	r0, r4
 8007c3a:	f7f8 faf9 	bl	8000230 <__divsi3>
 8007c3e:	0003      	movs	r3, r0
 8007c40:	0002      	movs	r2, r0
 8007c42:	200a      	movs	r0, #10
 8007c44:	4240      	negs	r0, r0
 8007c46:	4358      	muls	r0, r3
 8007c48:	2300      	movs	r3, #0
 8007c4a:	1900      	adds	r0, r0, r4
 8007c4c:	3230      	adds	r2, #48	; 0x30
 8007c4e:	3030      	adds	r0, #48	; 0x30
 8007c50:	702a      	strb	r2, [r5, #0]
 8007c52:	7068      	strb	r0, [r5, #1]
 8007c54:	70ab      	strb	r3, [r5, #2]
 8007c56:	e7b3      	b.n	8007bc0 <print_e+0x34>
 8007c58:	7010      	strb	r0, [r2, #0]
 8007c5a:	3101      	adds	r1, #1
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	3201      	adds	r2, #1
 8007c60:	e7bb      	b.n	8007bda <print_e+0x4e>
 8007c62:	7010      	strb	r0, [r2, #0]
 8007c64:	3901      	subs	r1, #1
 8007c66:	3201      	adds	r2, #1
 8007c68:	e7c3      	b.n	8007bf2 <print_e+0x66>
 8007c6a:	2565      	movs	r5, #101	; 0x65
 8007c6c:	e7c7      	b.n	8007bfe <print_e+0x72>
 8007c6e:	2545      	movs	r5, #69	; 0x45
 8007c70:	e7c5      	b.n	8007bfe <print_e+0x72>
 8007c72:	232b      	movs	r3, #43	; 0x2b
 8007c74:	7063      	strb	r3, [r4, #1]
 8007c76:	e7cd      	b.n	8007c14 <print_e+0x88>
 8007c78:	0000270f 	.word	0x0000270f

08007c7c <_gcvt>:
 8007c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c7e:	0015      	movs	r5, r2
 8007c80:	001c      	movs	r4, r3
 8007c82:	b08d      	sub	sp, #52	; 0x34
 8007c84:	ab14      	add	r3, sp, #80	; 0x50
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	0006      	movs	r6, r0
 8007c8a:	9307      	str	r3, [sp, #28]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2300      	movs	r3, #0
 8007c90:	0028      	movs	r0, r5
 8007c92:	0021      	movs	r1, r4
 8007c94:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8007c96:	f7f8 fbcd 	bl	8000434 <__aeabi_dcmplt>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d002      	beq.n	8007ca4 <_gcvt+0x28>
 8007c9e:	2380      	movs	r3, #128	; 0x80
 8007ca0:	061b      	lsls	r3, r3, #24
 8007ca2:	18e4      	adds	r4, r4, r3
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	0028      	movs	r0, r5
 8007caa:	0021      	movs	r1, r4
 8007cac:	f7f8 fbbc 	bl	8000428 <__aeabi_dcmpeq>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d007      	beq.n	8007cc4 <_gcvt+0x48>
 8007cb4:	2330      	movs	r3, #48	; 0x30
 8007cb6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cb8:	7013      	strb	r3, [r2, #0]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	7053      	strb	r3, [r2, #1]
 8007cbe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007cc0:	b00d      	add	sp, #52	; 0x34
 8007cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cc4:	4a50      	ldr	r2, [pc, #320]	; (8007e08 <_gcvt+0x18c>)
 8007cc6:	4b51      	ldr	r3, [pc, #324]	; (8007e0c <_gcvt+0x190>)
 8007cc8:	0028      	movs	r0, r5
 8007cca:	0021      	movs	r1, r4
 8007ccc:	f7f8 fbbc 	bl	8000448 <__aeabi_dcmple>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d00c      	beq.n	8007cee <_gcvt+0x72>
 8007cd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cd6:	3f01      	subs	r7, #1
 8007cd8:	9302      	str	r3, [sp, #8]
 8007cda:	9b07      	ldr	r3, [sp, #28]
 8007cdc:	9700      	str	r7, [sp, #0]
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	002a      	movs	r2, r5
 8007ce2:	0023      	movs	r3, r4
 8007ce4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ce6:	0030      	movs	r0, r6
 8007ce8:	f7ff ff50 	bl	8007b8c <print_e>
 8007cec:	e7e7      	b.n	8007cbe <_gcvt+0x42>
 8007cee:	0038      	movs	r0, r7
 8007cf0:	f000 fb78 	bl	80083e4 <_mprec_log10>
 8007cf4:	002a      	movs	r2, r5
 8007cf6:	0023      	movs	r3, r4
 8007cf8:	f7f8 fba6 	bl	8000448 <__aeabi_dcmple>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d1e9      	bne.n	8007cd4 <_gcvt+0x58>
 8007d00:	2200      	movs	r2, #0
 8007d02:	4b43      	ldr	r3, [pc, #268]	; (8007e10 <_gcvt+0x194>)
 8007d04:	0028      	movs	r0, r5
 8007d06:	0021      	movs	r1, r4
 8007d08:	f7f8 fb94 	bl	8000434 <__aeabi_dcmplt>
 8007d0c:	ab0a      	add	r3, sp, #40	; 0x28
 8007d0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d10:	9303      	str	r3, [sp, #12]
 8007d12:	ab09      	add	r3, sp, #36	; 0x24
 8007d14:	9302      	str	r3, [sp, #8]
 8007d16:	9204      	str	r2, [sp, #16]
 8007d18:	9701      	str	r7, [sp, #4]
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d100      	bne.n	8007d22 <_gcvt+0xa6>
 8007d20:	2302      	movs	r3, #2
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	002a      	movs	r2, r5
 8007d26:	0023      	movs	r3, r4
 8007d28:	0030      	movs	r0, r6
 8007d2a:	f000 ff7d 	bl	8008c28 <_dtoa_r>
 8007d2e:	4b39      	ldr	r3, [pc, #228]	; (8007e14 <_gcvt+0x198>)
 8007d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d024      	beq.n	8007d80 <_gcvt+0x104>
 8007d36:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007d38:	19e7      	adds	r7, r4, r7
 8007d3a:	7805      	ldrb	r5, [r0, #0]
 8007d3c:	1b3e      	subs	r6, r7, r4
 8007d3e:	0021      	movs	r1, r4
 8007d40:	0033      	movs	r3, r6
 8007d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d44:	2d00      	cmp	r5, #0
 8007d46:	d026      	beq.n	8007d96 <_gcvt+0x11a>
 8007d48:	2a00      	cmp	r2, #0
 8007d4a:	dc1e      	bgt.n	8007d8a <_gcvt+0x10e>
 8007d4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	d102      	bne.n	8007d58 <_gcvt+0xdc>
 8007d52:	7802      	ldrb	r2, [r0, #0]
 8007d54:	2a00      	cmp	r2, #0
 8007d56:	d046      	beq.n	8007de6 <_gcvt+0x16a>
 8007d58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d5a:	42a2      	cmp	r2, r4
 8007d5c:	d103      	bne.n	8007d66 <_gcvt+0xea>
 8007d5e:	1c51      	adds	r1, r2, #1
 8007d60:	2230      	movs	r2, #48	; 0x30
 8007d62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007d64:	7022      	strb	r2, [r4, #0]
 8007d66:	222e      	movs	r2, #46	; 0x2e
 8007d68:	2530      	movs	r5, #48	; 0x30
 8007d6a:	700a      	strb	r2, [r1, #0]
 8007d6c:	2601      	movs	r6, #1
 8007d6e:	1c4a      	adds	r2, r1, #1
 8007d70:	2100      	movs	r1, #0
 8007d72:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007d74:	2c00      	cmp	r4, #0
 8007d76:	db21      	blt.n	8007dbc <_gcvt+0x140>
 8007d78:	2900      	cmp	r1, #0
 8007d7a:	d02b      	beq.n	8007dd4 <_gcvt+0x158>
 8007d7c:	9409      	str	r4, [sp, #36]	; 0x24
 8007d7e:	e029      	b.n	8007dd4 <_gcvt+0x158>
 8007d80:	0001      	movs	r1, r0
 8007d82:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007d84:	f000 fec2 	bl	8008b0c <strcpy>
 8007d88:	e799      	b.n	8007cbe <_gcvt+0x42>
 8007d8a:	3a01      	subs	r2, #1
 8007d8c:	7025      	strb	r5, [r4, #0]
 8007d8e:	3001      	adds	r0, #1
 8007d90:	9209      	str	r2, [sp, #36]	; 0x24
 8007d92:	3401      	adds	r4, #1
 8007d94:	e7d1      	b.n	8007d3a <_gcvt+0xbe>
 8007d96:	2301      	movs	r3, #1
 8007d98:	1ab6      	subs	r6, r6, r2
 8007d9a:	2730      	movs	r7, #48	; 0x30
 8007d9c:	469c      	mov	ip, r3
 8007d9e:	e005      	b.n	8007dac <_gcvt+0x130>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dd07      	ble.n	8007db4 <_gcvt+0x138>
 8007da4:	4665      	mov	r5, ip
 8007da6:	7027      	strb	r7, [r4, #0]
 8007da8:	3a01      	subs	r2, #1
 8007daa:	3401      	adds	r4, #1
 8007dac:	0021      	movs	r1, r4
 8007dae:	18b3      	adds	r3, r6, r2
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	dcf5      	bgt.n	8007da0 <_gcvt+0x124>
 8007db4:	2d00      	cmp	r5, #0
 8007db6:	d0c9      	beq.n	8007d4c <_gcvt+0xd0>
 8007db8:	9209      	str	r2, [sp, #36]	; 0x24
 8007dba:	e7c7      	b.n	8007d4c <_gcvt+0xd0>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dddb      	ble.n	8007d78 <_gcvt+0xfc>
 8007dc0:	7015      	strb	r5, [r2, #0]
 8007dc2:	3401      	adds	r4, #1
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	3201      	adds	r2, #1
 8007dc8:	0031      	movs	r1, r6
 8007dca:	e7d3      	b.n	8007d74 <_gcvt+0xf8>
 8007dcc:	7014      	strb	r4, [r2, #0]
 8007dce:	3001      	adds	r0, #1
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	3201      	adds	r2, #1
 8007dd4:	7804      	ldrb	r4, [r0, #0]
 8007dd6:	0011      	movs	r1, r2
 8007dd8:	2c00      	cmp	r4, #0
 8007dda:	d001      	beq.n	8007de0 <_gcvt+0x164>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dcf5      	bgt.n	8007dcc <_gcvt+0x150>
 8007de0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d10c      	bne.n	8007e00 <_gcvt+0x184>
 8007de6:	2300      	movs	r3, #0
 8007de8:	700b      	strb	r3, [r1, #0]
 8007dea:	e768      	b.n	8007cbe <_gcvt+0x42>
 8007dec:	7014      	strb	r4, [r2, #0]
 8007dee:	3801      	subs	r0, #1
 8007df0:	3201      	adds	r2, #1
 8007df2:	2800      	cmp	r0, #0
 8007df4:	dcfa      	bgt.n	8007dec <_gcvt+0x170>
 8007df6:	43da      	mvns	r2, r3
 8007df8:	17d2      	asrs	r2, r2, #31
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	18c9      	adds	r1, r1, r3
 8007dfe:	e7f2      	b.n	8007de6 <_gcvt+0x16a>
 8007e00:	0018      	movs	r0, r3
 8007e02:	2430      	movs	r4, #48	; 0x30
 8007e04:	e7f5      	b.n	8007df2 <_gcvt+0x176>
 8007e06:	46c0      	nop			; (mov r8, r8)
 8007e08:	eb1c432d 	.word	0xeb1c432d
 8007e0c:	3f1a36e2 	.word	0x3f1a36e2
 8007e10:	3ff00000 	.word	0x3ff00000
 8007e14:	0000270f 	.word	0x0000270f

08007e18 <_Balloc>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e1c:	0004      	movs	r4, r0
 8007e1e:	000d      	movs	r5, r1
 8007e20:	2e00      	cmp	r6, #0
 8007e22:	d107      	bne.n	8007e34 <_Balloc+0x1c>
 8007e24:	2010      	movs	r0, #16
 8007e26:	f001 fcdf 	bl	80097e8 <malloc>
 8007e2a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e2c:	6046      	str	r6, [r0, #4]
 8007e2e:	6086      	str	r6, [r0, #8]
 8007e30:	6006      	str	r6, [r0, #0]
 8007e32:	60c6      	str	r6, [r0, #12]
 8007e34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e36:	68f3      	ldr	r3, [r6, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d013      	beq.n	8007e64 <_Balloc+0x4c>
 8007e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e3e:	00aa      	lsls	r2, r5, #2
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	189b      	adds	r3, r3, r2
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d118      	bne.n	8007e7c <_Balloc+0x64>
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	000e      	movs	r6, r1
 8007e4e:	40ae      	lsls	r6, r5
 8007e50:	1d72      	adds	r2, r6, #5
 8007e52:	0092      	lsls	r2, r2, #2
 8007e54:	0020      	movs	r0, r4
 8007e56:	f000 fadf 	bl	8008418 <_calloc_r>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d00c      	beq.n	8007e78 <_Balloc+0x60>
 8007e5e:	6045      	str	r5, [r0, #4]
 8007e60:	6086      	str	r6, [r0, #8]
 8007e62:	e00d      	b.n	8007e80 <_Balloc+0x68>
 8007e64:	2221      	movs	r2, #33	; 0x21
 8007e66:	2104      	movs	r1, #4
 8007e68:	0020      	movs	r0, r4
 8007e6a:	f000 fad5 	bl	8008418 <_calloc_r>
 8007e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e70:	60f0      	str	r0, [r6, #12]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e1      	bne.n	8007e3c <_Balloc+0x24>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}
 8007e7c:	6802      	ldr	r2, [r0, #0]
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	2300      	movs	r3, #0
 8007e82:	6103      	str	r3, [r0, #16]
 8007e84:	60c3      	str	r3, [r0, #12]
 8007e86:	e7f8      	b.n	8007e7a <_Balloc+0x62>

08007e88 <_Bfree>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e8c:	0006      	movs	r6, r0
 8007e8e:	000d      	movs	r5, r1
 8007e90:	2c00      	cmp	r4, #0
 8007e92:	d107      	bne.n	8007ea4 <_Bfree+0x1c>
 8007e94:	2010      	movs	r0, #16
 8007e96:	f001 fca7 	bl	80097e8 <malloc>
 8007e9a:	6270      	str	r0, [r6, #36]	; 0x24
 8007e9c:	6044      	str	r4, [r0, #4]
 8007e9e:	6084      	str	r4, [r0, #8]
 8007ea0:	6004      	str	r4, [r0, #0]
 8007ea2:	60c4      	str	r4, [r0, #12]
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	d007      	beq.n	8007eb8 <_Bfree+0x30>
 8007ea8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007eaa:	686a      	ldr	r2, [r5, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	0092      	lsls	r2, r2, #2
 8007eb0:	189b      	adds	r3, r3, r2
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	602a      	str	r2, [r5, #0]
 8007eb6:	601d      	str	r5, [r3, #0]
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}

08007eba <__multadd>:
 8007eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ebc:	001e      	movs	r6, r3
 8007ebe:	2314      	movs	r3, #20
 8007ec0:	469c      	mov	ip, r3
 8007ec2:	0007      	movs	r7, r0
 8007ec4:	000c      	movs	r4, r1
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	690d      	ldr	r5, [r1, #16]
 8007eca:	448c      	add	ip, r1
 8007ecc:	4663      	mov	r3, ip
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	b299      	uxth	r1, r3
 8007ed4:	4663      	mov	r3, ip
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4351      	muls	r1, r2
 8007eda:	0c1b      	lsrs	r3, r3, #16
 8007edc:	4353      	muls	r3, r2
 8007ede:	1989      	adds	r1, r1, r6
 8007ee0:	0c0e      	lsrs	r6, r1, #16
 8007ee2:	199b      	adds	r3, r3, r6
 8007ee4:	b289      	uxth	r1, r1
 8007ee6:	0c1e      	lsrs	r6, r3, #16
 8007ee8:	041b      	lsls	r3, r3, #16
 8007eea:	185b      	adds	r3, r3, r1
 8007eec:	4661      	mov	r1, ip
 8007eee:	c108      	stmia	r1!, {r3}
 8007ef0:	468c      	mov	ip, r1
 8007ef2:	4285      	cmp	r5, r0
 8007ef4:	dcea      	bgt.n	8007ecc <__multadd+0x12>
 8007ef6:	2e00      	cmp	r6, #0
 8007ef8:	d01b      	beq.n	8007f32 <__multadd+0x78>
 8007efa:	68a3      	ldr	r3, [r4, #8]
 8007efc:	42ab      	cmp	r3, r5
 8007efe:	dc12      	bgt.n	8007f26 <__multadd+0x6c>
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	0038      	movs	r0, r7
 8007f04:	1c59      	adds	r1, r3, #1
 8007f06:	f7ff ff87 	bl	8007e18 <_Balloc>
 8007f0a:	0021      	movs	r1, r4
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	9001      	str	r0, [sp, #4]
 8007f10:	1c9a      	adds	r2, r3, #2
 8007f12:	0092      	lsls	r2, r2, #2
 8007f14:	310c      	adds	r1, #12
 8007f16:	300c      	adds	r0, #12
 8007f18:	f001 fc7b 	bl	8009812 <memcpy>
 8007f1c:	0021      	movs	r1, r4
 8007f1e:	0038      	movs	r0, r7
 8007f20:	f7ff ffb2 	bl	8007e88 <_Bfree>
 8007f24:	9c01      	ldr	r4, [sp, #4]
 8007f26:	1d2b      	adds	r3, r5, #4
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	18e3      	adds	r3, r4, r3
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	605e      	str	r6, [r3, #4]
 8007f30:	6125      	str	r5, [r4, #16]
 8007f32:	0020      	movs	r0, r4
 8007f34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08007f36 <__hi0bits>:
 8007f36:	0003      	movs	r3, r0
 8007f38:	0c02      	lsrs	r2, r0, #16
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	4282      	cmp	r2, r0
 8007f3e:	d101      	bne.n	8007f44 <__hi0bits+0xe>
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	3010      	adds	r0, #16
 8007f44:	0e1a      	lsrs	r2, r3, #24
 8007f46:	d101      	bne.n	8007f4c <__hi0bits+0x16>
 8007f48:	3008      	adds	r0, #8
 8007f4a:	021b      	lsls	r3, r3, #8
 8007f4c:	0f1a      	lsrs	r2, r3, #28
 8007f4e:	d101      	bne.n	8007f54 <__hi0bits+0x1e>
 8007f50:	3004      	adds	r0, #4
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	0f9a      	lsrs	r2, r3, #30
 8007f56:	d101      	bne.n	8007f5c <__hi0bits+0x26>
 8007f58:	3002      	adds	r0, #2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	db03      	blt.n	8007f68 <__hi0bits+0x32>
 8007f60:	3001      	adds	r0, #1
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	d400      	bmi.n	8007f68 <__hi0bits+0x32>
 8007f66:	2020      	movs	r0, #32
 8007f68:	4770      	bx	lr

08007f6a <__lo0bits>:
 8007f6a:	2207      	movs	r2, #7
 8007f6c:	6803      	ldr	r3, [r0, #0]
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	0001      	movs	r1, r0
 8007f72:	401a      	ands	r2, r3
 8007f74:	d00d      	beq.n	8007f92 <__lo0bits+0x28>
 8007f76:	2401      	movs	r4, #1
 8007f78:	2000      	movs	r0, #0
 8007f7a:	4223      	tst	r3, r4
 8007f7c:	d105      	bne.n	8007f8a <__lo0bits+0x20>
 8007f7e:	3002      	adds	r0, #2
 8007f80:	4203      	tst	r3, r0
 8007f82:	d003      	beq.n	8007f8c <__lo0bits+0x22>
 8007f84:	40e3      	lsrs	r3, r4
 8007f86:	0020      	movs	r0, r4
 8007f88:	600b      	str	r3, [r1, #0]
 8007f8a:	bd10      	pop	{r4, pc}
 8007f8c:	089b      	lsrs	r3, r3, #2
 8007f8e:	600b      	str	r3, [r1, #0]
 8007f90:	e7fb      	b.n	8007f8a <__lo0bits+0x20>
 8007f92:	b29c      	uxth	r4, r3
 8007f94:	0010      	movs	r0, r2
 8007f96:	2c00      	cmp	r4, #0
 8007f98:	d101      	bne.n	8007f9e <__lo0bits+0x34>
 8007f9a:	2010      	movs	r0, #16
 8007f9c:	0c1b      	lsrs	r3, r3, #16
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	2a00      	cmp	r2, #0
 8007fa2:	d101      	bne.n	8007fa8 <__lo0bits+0x3e>
 8007fa4:	3008      	adds	r0, #8
 8007fa6:	0a1b      	lsrs	r3, r3, #8
 8007fa8:	071a      	lsls	r2, r3, #28
 8007faa:	d101      	bne.n	8007fb0 <__lo0bits+0x46>
 8007fac:	3004      	adds	r0, #4
 8007fae:	091b      	lsrs	r3, r3, #4
 8007fb0:	079a      	lsls	r2, r3, #30
 8007fb2:	d101      	bne.n	8007fb8 <__lo0bits+0x4e>
 8007fb4:	3002      	adds	r0, #2
 8007fb6:	089b      	lsrs	r3, r3, #2
 8007fb8:	07da      	lsls	r2, r3, #31
 8007fba:	d4e8      	bmi.n	8007f8e <__lo0bits+0x24>
 8007fbc:	085b      	lsrs	r3, r3, #1
 8007fbe:	d001      	beq.n	8007fc4 <__lo0bits+0x5a>
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	e7e4      	b.n	8007f8e <__lo0bits+0x24>
 8007fc4:	2020      	movs	r0, #32
 8007fc6:	e7e0      	b.n	8007f8a <__lo0bits+0x20>

08007fc8 <__i2b>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	000c      	movs	r4, r1
 8007fcc:	2101      	movs	r1, #1
 8007fce:	f7ff ff23 	bl	8007e18 <_Balloc>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	6144      	str	r4, [r0, #20]
 8007fd6:	6103      	str	r3, [r0, #16]
 8007fd8:	bd10      	pop	{r4, pc}

08007fda <__multiply>:
 8007fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fdc:	690b      	ldr	r3, [r1, #16]
 8007fde:	0014      	movs	r4, r2
 8007fe0:	6912      	ldr	r2, [r2, #16]
 8007fe2:	b089      	sub	sp, #36	; 0x24
 8007fe4:	000d      	movs	r5, r1
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	da01      	bge.n	8007fee <__multiply+0x14>
 8007fea:	0025      	movs	r5, r4
 8007fec:	000c      	movs	r4, r1
 8007fee:	692f      	ldr	r7, [r5, #16]
 8007ff0:	6926      	ldr	r6, [r4, #16]
 8007ff2:	6869      	ldr	r1, [r5, #4]
 8007ff4:	19bb      	adds	r3, r7, r6
 8007ff6:	9302      	str	r3, [sp, #8]
 8007ff8:	68ab      	ldr	r3, [r5, #8]
 8007ffa:	19ba      	adds	r2, r7, r6
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	da00      	bge.n	8008002 <__multiply+0x28>
 8008000:	3101      	adds	r1, #1
 8008002:	f7ff ff09 	bl	8007e18 <_Balloc>
 8008006:	0002      	movs	r2, r0
 8008008:	19bb      	adds	r3, r7, r6
 800800a:	3214      	adds	r2, #20
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	18d3      	adds	r3, r2, r3
 8008010:	469c      	mov	ip, r3
 8008012:	2100      	movs	r1, #0
 8008014:	0013      	movs	r3, r2
 8008016:	9004      	str	r0, [sp, #16]
 8008018:	4563      	cmp	r3, ip
 800801a:	d31d      	bcc.n	8008058 <__multiply+0x7e>
 800801c:	3514      	adds	r5, #20
 800801e:	00bf      	lsls	r7, r7, #2
 8008020:	19eb      	adds	r3, r5, r7
 8008022:	3414      	adds	r4, #20
 8008024:	00b6      	lsls	r6, r6, #2
 8008026:	9305      	str	r3, [sp, #20]
 8008028:	19a3      	adds	r3, r4, r6
 800802a:	9503      	str	r5, [sp, #12]
 800802c:	9401      	str	r4, [sp, #4]
 800802e:	9307      	str	r3, [sp, #28]
 8008030:	9b07      	ldr	r3, [sp, #28]
 8008032:	9901      	ldr	r1, [sp, #4]
 8008034:	4299      	cmp	r1, r3
 8008036:	d311      	bcc.n	800805c <__multiply+0x82>
 8008038:	9b02      	ldr	r3, [sp, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	dd06      	ble.n	800804c <__multiply+0x72>
 800803e:	2304      	movs	r3, #4
 8008040:	425b      	negs	r3, r3
 8008042:	449c      	add	ip, r3
 8008044:	4663      	mov	r3, ip
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d051      	beq.n	80080f0 <__multiply+0x116>
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	9a02      	ldr	r2, [sp, #8]
 8008050:	0018      	movs	r0, r3
 8008052:	611a      	str	r2, [r3, #16]
 8008054:	b009      	add	sp, #36	; 0x24
 8008056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008058:	c302      	stmia	r3!, {r1}
 800805a:	e7dd      	b.n	8008018 <__multiply+0x3e>
 800805c:	9b01      	ldr	r3, [sp, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	b298      	uxth	r0, r3
 8008062:	2800      	cmp	r0, #0
 8008064:	d01c      	beq.n	80080a0 <__multiply+0xc6>
 8008066:	0015      	movs	r5, r2
 8008068:	2600      	movs	r6, #0
 800806a:	9f03      	ldr	r7, [sp, #12]
 800806c:	cf02      	ldmia	r7!, {r1}
 800806e:	682c      	ldr	r4, [r5, #0]
 8008070:	b28b      	uxth	r3, r1
 8008072:	4343      	muls	r3, r0
 8008074:	0c09      	lsrs	r1, r1, #16
 8008076:	4341      	muls	r1, r0
 8008078:	b2a4      	uxth	r4, r4
 800807a:	191b      	adds	r3, r3, r4
 800807c:	199b      	adds	r3, r3, r6
 800807e:	000e      	movs	r6, r1
 8008080:	6829      	ldr	r1, [r5, #0]
 8008082:	9506      	str	r5, [sp, #24]
 8008084:	0c09      	lsrs	r1, r1, #16
 8008086:	1871      	adds	r1, r6, r1
 8008088:	0c1e      	lsrs	r6, r3, #16
 800808a:	1989      	adds	r1, r1, r6
 800808c:	0c0e      	lsrs	r6, r1, #16
 800808e:	b29b      	uxth	r3, r3
 8008090:	0409      	lsls	r1, r1, #16
 8008092:	430b      	orrs	r3, r1
 8008094:	c508      	stmia	r5!, {r3}
 8008096:	9b05      	ldr	r3, [sp, #20]
 8008098:	42bb      	cmp	r3, r7
 800809a:	d8e7      	bhi.n	800806c <__multiply+0x92>
 800809c:	9b06      	ldr	r3, [sp, #24]
 800809e:	605e      	str	r6, [r3, #4]
 80080a0:	9b01      	ldr	r3, [sp, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	0c1d      	lsrs	r5, r3, #16
 80080a6:	d01e      	beq.n	80080e6 <__multiply+0x10c>
 80080a8:	0010      	movs	r0, r2
 80080aa:	2700      	movs	r7, #0
 80080ac:	6813      	ldr	r3, [r2, #0]
 80080ae:	9e03      	ldr	r6, [sp, #12]
 80080b0:	6831      	ldr	r1, [r6, #0]
 80080b2:	6804      	ldr	r4, [r0, #0]
 80080b4:	b289      	uxth	r1, r1
 80080b6:	4369      	muls	r1, r5
 80080b8:	0c24      	lsrs	r4, r4, #16
 80080ba:	1909      	adds	r1, r1, r4
 80080bc:	19c9      	adds	r1, r1, r7
 80080be:	040f      	lsls	r7, r1, #16
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	433b      	orrs	r3, r7
 80080c4:	6003      	str	r3, [r0, #0]
 80080c6:	ce80      	ldmia	r6!, {r7}
 80080c8:	6843      	ldr	r3, [r0, #4]
 80080ca:	0c3f      	lsrs	r7, r7, #16
 80080cc:	436f      	muls	r7, r5
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	0c09      	lsrs	r1, r1, #16
 80080d4:	185b      	adds	r3, r3, r1
 80080d6:	9905      	ldr	r1, [sp, #20]
 80080d8:	9006      	str	r0, [sp, #24]
 80080da:	0c1f      	lsrs	r7, r3, #16
 80080dc:	3004      	adds	r0, #4
 80080de:	42b1      	cmp	r1, r6
 80080e0:	d8e6      	bhi.n	80080b0 <__multiply+0xd6>
 80080e2:	9906      	ldr	r1, [sp, #24]
 80080e4:	604b      	str	r3, [r1, #4]
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	3204      	adds	r2, #4
 80080ea:	3304      	adds	r3, #4
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	e79f      	b.n	8008030 <__multiply+0x56>
 80080f0:	9b02      	ldr	r3, [sp, #8]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	9302      	str	r3, [sp, #8]
 80080f6:	e79f      	b.n	8008038 <__multiply+0x5e>

080080f8 <__pow5mult>:
 80080f8:	2303      	movs	r3, #3
 80080fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080fc:	4013      	ands	r3, r2
 80080fe:	0005      	movs	r5, r0
 8008100:	000e      	movs	r6, r1
 8008102:	0014      	movs	r4, r2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d008      	beq.n	800811a <__pow5mult+0x22>
 8008108:	4922      	ldr	r1, [pc, #136]	; (8008194 <__pow5mult+0x9c>)
 800810a:	3b01      	subs	r3, #1
 800810c:	009a      	lsls	r2, r3, #2
 800810e:	5852      	ldr	r2, [r2, r1]
 8008110:	2300      	movs	r3, #0
 8008112:	0031      	movs	r1, r6
 8008114:	f7ff fed1 	bl	8007eba <__multadd>
 8008118:	0006      	movs	r6, r0
 800811a:	10a3      	asrs	r3, r4, #2
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	d036      	beq.n	800818e <__pow5mult+0x96>
 8008120:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8008122:	2c00      	cmp	r4, #0
 8008124:	d107      	bne.n	8008136 <__pow5mult+0x3e>
 8008126:	2010      	movs	r0, #16
 8008128:	f001 fb5e 	bl	80097e8 <malloc>
 800812c:	6268      	str	r0, [r5, #36]	; 0x24
 800812e:	6044      	str	r4, [r0, #4]
 8008130:	6084      	str	r4, [r0, #8]
 8008132:	6004      	str	r4, [r0, #0]
 8008134:	60c4      	str	r4, [r0, #12]
 8008136:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008138:	68bc      	ldr	r4, [r7, #8]
 800813a:	2c00      	cmp	r4, #0
 800813c:	d107      	bne.n	800814e <__pow5mult+0x56>
 800813e:	4916      	ldr	r1, [pc, #88]	; (8008198 <__pow5mult+0xa0>)
 8008140:	0028      	movs	r0, r5
 8008142:	f7ff ff41 	bl	8007fc8 <__i2b>
 8008146:	2300      	movs	r3, #0
 8008148:	0004      	movs	r4, r0
 800814a:	60b8      	str	r0, [r7, #8]
 800814c:	6003      	str	r3, [r0, #0]
 800814e:	2201      	movs	r2, #1
 8008150:	9b01      	ldr	r3, [sp, #4]
 8008152:	4213      	tst	r3, r2
 8008154:	d00a      	beq.n	800816c <__pow5mult+0x74>
 8008156:	0031      	movs	r1, r6
 8008158:	0022      	movs	r2, r4
 800815a:	0028      	movs	r0, r5
 800815c:	f7ff ff3d 	bl	8007fda <__multiply>
 8008160:	0007      	movs	r7, r0
 8008162:	0031      	movs	r1, r6
 8008164:	0028      	movs	r0, r5
 8008166:	f7ff fe8f 	bl	8007e88 <_Bfree>
 800816a:	003e      	movs	r6, r7
 800816c:	9b01      	ldr	r3, [sp, #4]
 800816e:	105b      	asrs	r3, r3, #1
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	d00c      	beq.n	800818e <__pow5mult+0x96>
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	2800      	cmp	r0, #0
 8008178:	d107      	bne.n	800818a <__pow5mult+0x92>
 800817a:	0022      	movs	r2, r4
 800817c:	0021      	movs	r1, r4
 800817e:	0028      	movs	r0, r5
 8008180:	f7ff ff2b 	bl	8007fda <__multiply>
 8008184:	2300      	movs	r3, #0
 8008186:	6020      	str	r0, [r4, #0]
 8008188:	6003      	str	r3, [r0, #0]
 800818a:	0004      	movs	r4, r0
 800818c:	e7df      	b.n	800814e <__pow5mult+0x56>
 800818e:	0030      	movs	r0, r6
 8008190:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	0800b0a0 	.word	0x0800b0a0
 8008198:	00000271 	.word	0x00000271

0800819c <__lshift>:
 800819c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800819e:	000d      	movs	r5, r1
 80081a0:	0017      	movs	r7, r2
 80081a2:	692b      	ldr	r3, [r5, #16]
 80081a4:	1154      	asrs	r4, r2, #5
 80081a6:	b085      	sub	sp, #20
 80081a8:	18e3      	adds	r3, r4, r3
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	3301      	adds	r3, #1
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	6849      	ldr	r1, [r1, #4]
 80081b2:	68ab      	ldr	r3, [r5, #8]
 80081b4:	9002      	str	r0, [sp, #8]
 80081b6:	9a00      	ldr	r2, [sp, #0]
 80081b8:	4293      	cmp	r3, r2
 80081ba:	db35      	blt.n	8008228 <__lshift+0x8c>
 80081bc:	9802      	ldr	r0, [sp, #8]
 80081be:	f7ff fe2b 	bl	8007e18 <_Balloc>
 80081c2:	2300      	movs	r3, #0
 80081c4:	0002      	movs	r2, r0
 80081c6:	0006      	movs	r6, r0
 80081c8:	0019      	movs	r1, r3
 80081ca:	3214      	adds	r2, #20
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	db2e      	blt.n	800822e <__lshift+0x92>
 80081d0:	43e3      	mvns	r3, r4
 80081d2:	17db      	asrs	r3, r3, #31
 80081d4:	401c      	ands	r4, r3
 80081d6:	002b      	movs	r3, r5
 80081d8:	00a4      	lsls	r4, r4, #2
 80081da:	1914      	adds	r4, r2, r4
 80081dc:	692a      	ldr	r2, [r5, #16]
 80081de:	3314      	adds	r3, #20
 80081e0:	0092      	lsls	r2, r2, #2
 80081e2:	189a      	adds	r2, r3, r2
 80081e4:	4694      	mov	ip, r2
 80081e6:	221f      	movs	r2, #31
 80081e8:	4017      	ands	r7, r2
 80081ea:	d024      	beq.n	8008236 <__lshift+0x9a>
 80081ec:	3201      	adds	r2, #1
 80081ee:	1bd2      	subs	r2, r2, r7
 80081f0:	9203      	str	r2, [sp, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	6819      	ldr	r1, [r3, #0]
 80081f6:	0020      	movs	r0, r4
 80081f8:	40b9      	lsls	r1, r7
 80081fa:	430a      	orrs	r2, r1
 80081fc:	c404      	stmia	r4!, {r2}
 80081fe:	cb04      	ldmia	r3!, {r2}
 8008200:	9903      	ldr	r1, [sp, #12]
 8008202:	40ca      	lsrs	r2, r1
 8008204:	459c      	cmp	ip, r3
 8008206:	d8f5      	bhi.n	80081f4 <__lshift+0x58>
 8008208:	6042      	str	r2, [r0, #4]
 800820a:	2a00      	cmp	r2, #0
 800820c:	d002      	beq.n	8008214 <__lshift+0x78>
 800820e:	9b01      	ldr	r3, [sp, #4]
 8008210:	3302      	adds	r3, #2
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	9b00      	ldr	r3, [sp, #0]
 8008216:	9802      	ldr	r0, [sp, #8]
 8008218:	3b01      	subs	r3, #1
 800821a:	6133      	str	r3, [r6, #16]
 800821c:	0029      	movs	r1, r5
 800821e:	f7ff fe33 	bl	8007e88 <_Bfree>
 8008222:	0030      	movs	r0, r6
 8008224:	b005      	add	sp, #20
 8008226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008228:	3101      	adds	r1, #1
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	e7c3      	b.n	80081b6 <__lshift+0x1a>
 800822e:	0098      	lsls	r0, r3, #2
 8008230:	5011      	str	r1, [r2, r0]
 8008232:	3301      	adds	r3, #1
 8008234:	e7ca      	b.n	80081cc <__lshift+0x30>
 8008236:	cb04      	ldmia	r3!, {r2}
 8008238:	c404      	stmia	r4!, {r2}
 800823a:	459c      	cmp	ip, r3
 800823c:	d8fb      	bhi.n	8008236 <__lshift+0x9a>
 800823e:	e7e9      	b.n	8008214 <__lshift+0x78>

08008240 <__mcmp>:
 8008240:	690a      	ldr	r2, [r1, #16]
 8008242:	6903      	ldr	r3, [r0, #16]
 8008244:	b530      	push	{r4, r5, lr}
 8008246:	1a9b      	subs	r3, r3, r2
 8008248:	d10d      	bne.n	8008266 <__mcmp+0x26>
 800824a:	0092      	lsls	r2, r2, #2
 800824c:	3014      	adds	r0, #20
 800824e:	3114      	adds	r1, #20
 8008250:	1884      	adds	r4, r0, r2
 8008252:	1889      	adds	r1, r1, r2
 8008254:	3c04      	subs	r4, #4
 8008256:	3904      	subs	r1, #4
 8008258:	6825      	ldr	r5, [r4, #0]
 800825a:	680a      	ldr	r2, [r1, #0]
 800825c:	4295      	cmp	r5, r2
 800825e:	d004      	beq.n	800826a <__mcmp+0x2a>
 8008260:	2301      	movs	r3, #1
 8008262:	4295      	cmp	r5, r2
 8008264:	d304      	bcc.n	8008270 <__mcmp+0x30>
 8008266:	0018      	movs	r0, r3
 8008268:	bd30      	pop	{r4, r5, pc}
 800826a:	42a0      	cmp	r0, r4
 800826c:	d3f2      	bcc.n	8008254 <__mcmp+0x14>
 800826e:	e7fa      	b.n	8008266 <__mcmp+0x26>
 8008270:	425b      	negs	r3, r3
 8008272:	e7f8      	b.n	8008266 <__mcmp+0x26>

08008274 <__mdiff>:
 8008274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008276:	000d      	movs	r5, r1
 8008278:	b085      	sub	sp, #20
 800827a:	0007      	movs	r7, r0
 800827c:	0011      	movs	r1, r2
 800827e:	0028      	movs	r0, r5
 8008280:	0014      	movs	r4, r2
 8008282:	f7ff ffdd 	bl	8008240 <__mcmp>
 8008286:	1e06      	subs	r6, r0, #0
 8008288:	d108      	bne.n	800829c <__mdiff+0x28>
 800828a:	0001      	movs	r1, r0
 800828c:	0038      	movs	r0, r7
 800828e:	f7ff fdc3 	bl	8007e18 <_Balloc>
 8008292:	2301      	movs	r3, #1
 8008294:	6146      	str	r6, [r0, #20]
 8008296:	6103      	str	r3, [r0, #16]
 8008298:	b005      	add	sp, #20
 800829a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829c:	2301      	movs	r3, #1
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	2800      	cmp	r0, #0
 80082a2:	db04      	blt.n	80082ae <__mdiff+0x3a>
 80082a4:	0023      	movs	r3, r4
 80082a6:	002c      	movs	r4, r5
 80082a8:	001d      	movs	r5, r3
 80082aa:	2300      	movs	r3, #0
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	6861      	ldr	r1, [r4, #4]
 80082b0:	0038      	movs	r0, r7
 80082b2:	f7ff fdb1 	bl	8007e18 <_Balloc>
 80082b6:	002f      	movs	r7, r5
 80082b8:	2200      	movs	r2, #0
 80082ba:	9b01      	ldr	r3, [sp, #4]
 80082bc:	6926      	ldr	r6, [r4, #16]
 80082be:	60c3      	str	r3, [r0, #12]
 80082c0:	3414      	adds	r4, #20
 80082c2:	00b3      	lsls	r3, r6, #2
 80082c4:	18e3      	adds	r3, r4, r3
 80082c6:	9302      	str	r3, [sp, #8]
 80082c8:	692b      	ldr	r3, [r5, #16]
 80082ca:	3714      	adds	r7, #20
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	18fb      	adds	r3, r7, r3
 80082d0:	9303      	str	r3, [sp, #12]
 80082d2:	0003      	movs	r3, r0
 80082d4:	4694      	mov	ip, r2
 80082d6:	3314      	adds	r3, #20
 80082d8:	cc20      	ldmia	r4!, {r5}
 80082da:	cf04      	ldmia	r7!, {r2}
 80082dc:	9201      	str	r2, [sp, #4]
 80082de:	b2aa      	uxth	r2, r5
 80082e0:	4494      	add	ip, r2
 80082e2:	466a      	mov	r2, sp
 80082e4:	4661      	mov	r1, ip
 80082e6:	8892      	ldrh	r2, [r2, #4]
 80082e8:	0c2d      	lsrs	r5, r5, #16
 80082ea:	1a8a      	subs	r2, r1, r2
 80082ec:	9901      	ldr	r1, [sp, #4]
 80082ee:	0c09      	lsrs	r1, r1, #16
 80082f0:	1a69      	subs	r1, r5, r1
 80082f2:	1415      	asrs	r5, r2, #16
 80082f4:	1949      	adds	r1, r1, r5
 80082f6:	140d      	asrs	r5, r1, #16
 80082f8:	b292      	uxth	r2, r2
 80082fa:	0409      	lsls	r1, r1, #16
 80082fc:	430a      	orrs	r2, r1
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	9a03      	ldr	r2, [sp, #12]
 8008302:	46ac      	mov	ip, r5
 8008304:	3304      	adds	r3, #4
 8008306:	42ba      	cmp	r2, r7
 8008308:	d8e6      	bhi.n	80082d8 <__mdiff+0x64>
 800830a:	9902      	ldr	r1, [sp, #8]
 800830c:	001a      	movs	r2, r3
 800830e:	428c      	cmp	r4, r1
 8008310:	d305      	bcc.n	800831e <__mdiff+0xaa>
 8008312:	3a04      	subs	r2, #4
 8008314:	6813      	ldr	r3, [r2, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00e      	beq.n	8008338 <__mdiff+0xc4>
 800831a:	6106      	str	r6, [r0, #16]
 800831c:	e7bc      	b.n	8008298 <__mdiff+0x24>
 800831e:	cc04      	ldmia	r4!, {r2}
 8008320:	b291      	uxth	r1, r2
 8008322:	4461      	add	r1, ip
 8008324:	140d      	asrs	r5, r1, #16
 8008326:	0c12      	lsrs	r2, r2, #16
 8008328:	1952      	adds	r2, r2, r5
 800832a:	1415      	asrs	r5, r2, #16
 800832c:	b289      	uxth	r1, r1
 800832e:	0412      	lsls	r2, r2, #16
 8008330:	430a      	orrs	r2, r1
 8008332:	46ac      	mov	ip, r5
 8008334:	c304      	stmia	r3!, {r2}
 8008336:	e7e8      	b.n	800830a <__mdiff+0x96>
 8008338:	3e01      	subs	r6, #1
 800833a:	e7ea      	b.n	8008312 <__mdiff+0x9e>

0800833c <__d2b>:
 800833c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800833e:	001d      	movs	r5, r3
 8008340:	2101      	movs	r1, #1
 8008342:	0014      	movs	r4, r2
 8008344:	9f08      	ldr	r7, [sp, #32]
 8008346:	f7ff fd67 	bl	8007e18 <_Balloc>
 800834a:	032b      	lsls	r3, r5, #12
 800834c:	006d      	lsls	r5, r5, #1
 800834e:	0006      	movs	r6, r0
 8008350:	0b1b      	lsrs	r3, r3, #12
 8008352:	0d6d      	lsrs	r5, r5, #21
 8008354:	d124      	bne.n	80083a0 <__d2b+0x64>
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	2c00      	cmp	r4, #0
 800835a:	d027      	beq.n	80083ac <__d2b+0x70>
 800835c:	4668      	mov	r0, sp
 800835e:	9400      	str	r4, [sp, #0]
 8008360:	f7ff fe03 	bl	8007f6a <__lo0bits>
 8008364:	9c00      	ldr	r4, [sp, #0]
 8008366:	2800      	cmp	r0, #0
 8008368:	d01e      	beq.n	80083a8 <__d2b+0x6c>
 800836a:	9b01      	ldr	r3, [sp, #4]
 800836c:	2120      	movs	r1, #32
 800836e:	001a      	movs	r2, r3
 8008370:	1a09      	subs	r1, r1, r0
 8008372:	408a      	lsls	r2, r1
 8008374:	40c3      	lsrs	r3, r0
 8008376:	4322      	orrs	r2, r4
 8008378:	6172      	str	r2, [r6, #20]
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	9c01      	ldr	r4, [sp, #4]
 800837e:	61b4      	str	r4, [r6, #24]
 8008380:	1e63      	subs	r3, r4, #1
 8008382:	419c      	sbcs	r4, r3
 8008384:	3401      	adds	r4, #1
 8008386:	6134      	str	r4, [r6, #16]
 8008388:	2d00      	cmp	r5, #0
 800838a:	d018      	beq.n	80083be <__d2b+0x82>
 800838c:	4b12      	ldr	r3, [pc, #72]	; (80083d8 <__d2b+0x9c>)
 800838e:	18ed      	adds	r5, r5, r3
 8008390:	2335      	movs	r3, #53	; 0x35
 8008392:	182d      	adds	r5, r5, r0
 8008394:	603d      	str	r5, [r7, #0]
 8008396:	1a18      	subs	r0, r3, r0
 8008398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839a:	6018      	str	r0, [r3, #0]
 800839c:	0030      	movs	r0, r6
 800839e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083a0:	2280      	movs	r2, #128	; 0x80
 80083a2:	0352      	lsls	r2, r2, #13
 80083a4:	4313      	orrs	r3, r2
 80083a6:	e7d6      	b.n	8008356 <__d2b+0x1a>
 80083a8:	6174      	str	r4, [r6, #20]
 80083aa:	e7e7      	b.n	800837c <__d2b+0x40>
 80083ac:	a801      	add	r0, sp, #4
 80083ae:	f7ff fddc 	bl	8007f6a <__lo0bits>
 80083b2:	2401      	movs	r4, #1
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	6134      	str	r4, [r6, #16]
 80083b8:	6173      	str	r3, [r6, #20]
 80083ba:	3020      	adds	r0, #32
 80083bc:	e7e4      	b.n	8008388 <__d2b+0x4c>
 80083be:	4b07      	ldr	r3, [pc, #28]	; (80083dc <__d2b+0xa0>)
 80083c0:	18c0      	adds	r0, r0, r3
 80083c2:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <__d2b+0xa4>)
 80083c4:	6038      	str	r0, [r7, #0]
 80083c6:	18e3      	adds	r3, r4, r3
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	18f3      	adds	r3, r6, r3
 80083cc:	6958      	ldr	r0, [r3, #20]
 80083ce:	f7ff fdb2 	bl	8007f36 <__hi0bits>
 80083d2:	0164      	lsls	r4, r4, #5
 80083d4:	1a20      	subs	r0, r4, r0
 80083d6:	e7df      	b.n	8008398 <__d2b+0x5c>
 80083d8:	fffffbcd 	.word	0xfffffbcd
 80083dc:	fffffbce 	.word	0xfffffbce
 80083e0:	3fffffff 	.word	0x3fffffff

080083e4 <_mprec_log10>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	0004      	movs	r4, r0
 80083e8:	2817      	cmp	r0, #23
 80083ea:	dc05      	bgt.n	80083f8 <_mprec_log10+0x14>
 80083ec:	4b07      	ldr	r3, [pc, #28]	; (800840c <_mprec_log10+0x28>)
 80083ee:	00c4      	lsls	r4, r0, #3
 80083f0:	191c      	adds	r4, r3, r4
 80083f2:	6820      	ldr	r0, [r4, #0]
 80083f4:	6861      	ldr	r1, [r4, #4]
 80083f6:	bd10      	pop	{r4, pc}
 80083f8:	2000      	movs	r0, #0
 80083fa:	4905      	ldr	r1, [pc, #20]	; (8008410 <_mprec_log10+0x2c>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	4b05      	ldr	r3, [pc, #20]	; (8008414 <_mprec_log10+0x30>)
 8008400:	3c01      	subs	r4, #1
 8008402:	f7f9 fb75 	bl	8001af0 <__aeabi_dmul>
 8008406:	2c00      	cmp	r4, #0
 8008408:	d1f8      	bne.n	80083fc <_mprec_log10+0x18>
 800840a:	e7f4      	b.n	80083f6 <_mprec_log10+0x12>
 800840c:	0800afd8 	.word	0x0800afd8
 8008410:	3ff00000 	.word	0x3ff00000
 8008414:	40240000 	.word	0x40240000

08008418 <_calloc_r>:
 8008418:	434a      	muls	r2, r1
 800841a:	b570      	push	{r4, r5, r6, lr}
 800841c:	0011      	movs	r1, r2
 800841e:	0014      	movs	r4, r2
 8008420:	f000 f808 	bl	8008434 <_malloc_r>
 8008424:	1e05      	subs	r5, r0, #0
 8008426:	d003      	beq.n	8008430 <_calloc_r+0x18>
 8008428:	0022      	movs	r2, r4
 800842a:	2100      	movs	r1, #0
 800842c:	f7ff fb86 	bl	8007b3c <memset>
 8008430:	0028      	movs	r0, r5
 8008432:	bd70      	pop	{r4, r5, r6, pc}

08008434 <_malloc_r>:
 8008434:	2303      	movs	r3, #3
 8008436:	b570      	push	{r4, r5, r6, lr}
 8008438:	1ccd      	adds	r5, r1, #3
 800843a:	439d      	bics	r5, r3
 800843c:	3508      	adds	r5, #8
 800843e:	0006      	movs	r6, r0
 8008440:	2d0c      	cmp	r5, #12
 8008442:	d21e      	bcs.n	8008482 <_malloc_r+0x4e>
 8008444:	250c      	movs	r5, #12
 8008446:	42a9      	cmp	r1, r5
 8008448:	d81d      	bhi.n	8008486 <_malloc_r+0x52>
 800844a:	0030      	movs	r0, r6
 800844c:	f001 f9fd 	bl	800984a <__malloc_lock>
 8008450:	4a25      	ldr	r2, [pc, #148]	; (80084e8 <_malloc_r+0xb4>)
 8008452:	6814      	ldr	r4, [r2, #0]
 8008454:	0021      	movs	r1, r4
 8008456:	2900      	cmp	r1, #0
 8008458:	d119      	bne.n	800848e <_malloc_r+0x5a>
 800845a:	4c24      	ldr	r4, [pc, #144]	; (80084ec <_malloc_r+0xb8>)
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d103      	bne.n	800846a <_malloc_r+0x36>
 8008462:	0030      	movs	r0, r6
 8008464:	f000 fb40 	bl	8008ae8 <_sbrk_r>
 8008468:	6020      	str	r0, [r4, #0]
 800846a:	0029      	movs	r1, r5
 800846c:	0030      	movs	r0, r6
 800846e:	f000 fb3b 	bl	8008ae8 <_sbrk_r>
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	d12b      	bne.n	80084ce <_malloc_r+0x9a>
 8008476:	230c      	movs	r3, #12
 8008478:	0030      	movs	r0, r6
 800847a:	6033      	str	r3, [r6, #0]
 800847c:	f001 f9e6 	bl	800984c <__malloc_unlock>
 8008480:	e003      	b.n	800848a <_malloc_r+0x56>
 8008482:	2d00      	cmp	r5, #0
 8008484:	dadf      	bge.n	8008446 <_malloc_r+0x12>
 8008486:	230c      	movs	r3, #12
 8008488:	6033      	str	r3, [r6, #0]
 800848a:	2000      	movs	r0, #0
 800848c:	bd70      	pop	{r4, r5, r6, pc}
 800848e:	680b      	ldr	r3, [r1, #0]
 8008490:	1b5b      	subs	r3, r3, r5
 8008492:	d419      	bmi.n	80084c8 <_malloc_r+0x94>
 8008494:	2b0b      	cmp	r3, #11
 8008496:	d903      	bls.n	80084a0 <_malloc_r+0x6c>
 8008498:	600b      	str	r3, [r1, #0]
 800849a:	18cc      	adds	r4, r1, r3
 800849c:	6025      	str	r5, [r4, #0]
 800849e:	e003      	b.n	80084a8 <_malloc_r+0x74>
 80084a0:	684b      	ldr	r3, [r1, #4]
 80084a2:	428c      	cmp	r4, r1
 80084a4:	d10d      	bne.n	80084c2 <_malloc_r+0x8e>
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	0030      	movs	r0, r6
 80084aa:	f001 f9cf 	bl	800984c <__malloc_unlock>
 80084ae:	0020      	movs	r0, r4
 80084b0:	2207      	movs	r2, #7
 80084b2:	300b      	adds	r0, #11
 80084b4:	1d23      	adds	r3, r4, #4
 80084b6:	4390      	bics	r0, r2
 80084b8:	1ac3      	subs	r3, r0, r3
 80084ba:	d0e7      	beq.n	800848c <_malloc_r+0x58>
 80084bc:	425a      	negs	r2, r3
 80084be:	50e2      	str	r2, [r4, r3]
 80084c0:	e7e4      	b.n	800848c <_malloc_r+0x58>
 80084c2:	6063      	str	r3, [r4, #4]
 80084c4:	000c      	movs	r4, r1
 80084c6:	e7ef      	b.n	80084a8 <_malloc_r+0x74>
 80084c8:	000c      	movs	r4, r1
 80084ca:	6849      	ldr	r1, [r1, #4]
 80084cc:	e7c3      	b.n	8008456 <_malloc_r+0x22>
 80084ce:	2303      	movs	r3, #3
 80084d0:	1cc4      	adds	r4, r0, #3
 80084d2:	439c      	bics	r4, r3
 80084d4:	42a0      	cmp	r0, r4
 80084d6:	d0e1      	beq.n	800849c <_malloc_r+0x68>
 80084d8:	1a21      	subs	r1, r4, r0
 80084da:	0030      	movs	r0, r6
 80084dc:	f000 fb04 	bl	8008ae8 <_sbrk_r>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d1db      	bne.n	800849c <_malloc_r+0x68>
 80084e4:	e7c7      	b.n	8008476 <_malloc_r+0x42>
 80084e6:	46c0      	nop			; (mov r8, r8)
 80084e8:	200004d4 	.word	0x200004d4
 80084ec:	200004d8 	.word	0x200004d8

080084f0 <_realloc_r>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	0007      	movs	r7, r0
 80084f4:	000d      	movs	r5, r1
 80084f6:	0016      	movs	r6, r2
 80084f8:	2900      	cmp	r1, #0
 80084fa:	d105      	bne.n	8008508 <_realloc_r+0x18>
 80084fc:	0011      	movs	r1, r2
 80084fe:	f7ff ff99 	bl	8008434 <_malloc_r>
 8008502:	0004      	movs	r4, r0
 8008504:	0020      	movs	r0, r4
 8008506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008508:	2a00      	cmp	r2, #0
 800850a:	d103      	bne.n	8008514 <_realloc_r+0x24>
 800850c:	f001 f9a0 	bl	8009850 <_free_r>
 8008510:	0034      	movs	r4, r6
 8008512:	e7f7      	b.n	8008504 <_realloc_r+0x14>
 8008514:	f001 f9e6 	bl	80098e4 <_malloc_usable_size_r>
 8008518:	002c      	movs	r4, r5
 800851a:	42b0      	cmp	r0, r6
 800851c:	d2f2      	bcs.n	8008504 <_realloc_r+0x14>
 800851e:	0031      	movs	r1, r6
 8008520:	0038      	movs	r0, r7
 8008522:	f7ff ff87 	bl	8008434 <_malloc_r>
 8008526:	1e04      	subs	r4, r0, #0
 8008528:	d0ec      	beq.n	8008504 <_realloc_r+0x14>
 800852a:	0029      	movs	r1, r5
 800852c:	0032      	movs	r2, r6
 800852e:	f001 f970 	bl	8009812 <memcpy>
 8008532:	0029      	movs	r1, r5
 8008534:	0038      	movs	r0, r7
 8008536:	f001 f98b 	bl	8009850 <_free_r>
 800853a:	e7e3      	b.n	8008504 <_realloc_r+0x14>

0800853c <__ssputs_r>:
 800853c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853e:	688e      	ldr	r6, [r1, #8]
 8008540:	b085      	sub	sp, #20
 8008542:	0007      	movs	r7, r0
 8008544:	000c      	movs	r4, r1
 8008546:	9203      	str	r2, [sp, #12]
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	429e      	cmp	r6, r3
 800854c:	d83c      	bhi.n	80085c8 <__ssputs_r+0x8c>
 800854e:	2390      	movs	r3, #144	; 0x90
 8008550:	898a      	ldrh	r2, [r1, #12]
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	421a      	tst	r2, r3
 8008556:	d034      	beq.n	80085c2 <__ssputs_r+0x86>
 8008558:	2503      	movs	r5, #3
 800855a:	6909      	ldr	r1, [r1, #16]
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	1a5b      	subs	r3, r3, r1
 8008560:	9302      	str	r3, [sp, #8]
 8008562:	6963      	ldr	r3, [r4, #20]
 8008564:	9802      	ldr	r0, [sp, #8]
 8008566:	435d      	muls	r5, r3
 8008568:	0feb      	lsrs	r3, r5, #31
 800856a:	195d      	adds	r5, r3, r5
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	106d      	asrs	r5, r5, #1
 8008570:	3301      	adds	r3, #1
 8008572:	181b      	adds	r3, r3, r0
 8008574:	42ab      	cmp	r3, r5
 8008576:	d900      	bls.n	800857a <__ssputs_r+0x3e>
 8008578:	001d      	movs	r5, r3
 800857a:	0553      	lsls	r3, r2, #21
 800857c:	d532      	bpl.n	80085e4 <__ssputs_r+0xa8>
 800857e:	0029      	movs	r1, r5
 8008580:	0038      	movs	r0, r7
 8008582:	f7ff ff57 	bl	8008434 <_malloc_r>
 8008586:	1e06      	subs	r6, r0, #0
 8008588:	d109      	bne.n	800859e <__ssputs_r+0x62>
 800858a:	230c      	movs	r3, #12
 800858c:	603b      	str	r3, [r7, #0]
 800858e:	2340      	movs	r3, #64	; 0x40
 8008590:	2001      	movs	r0, #1
 8008592:	89a2      	ldrh	r2, [r4, #12]
 8008594:	4240      	negs	r0, r0
 8008596:	4313      	orrs	r3, r2
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	b005      	add	sp, #20
 800859c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800859e:	9a02      	ldr	r2, [sp, #8]
 80085a0:	6921      	ldr	r1, [r4, #16]
 80085a2:	f001 f936 	bl	8009812 <memcpy>
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	4a14      	ldr	r2, [pc, #80]	; (80085fc <__ssputs_r+0xc0>)
 80085aa:	401a      	ands	r2, r3
 80085ac:	2380      	movs	r3, #128	; 0x80
 80085ae:	4313      	orrs	r3, r2
 80085b0:	81a3      	strh	r3, [r4, #12]
 80085b2:	9b02      	ldr	r3, [sp, #8]
 80085b4:	6126      	str	r6, [r4, #16]
 80085b6:	18f6      	adds	r6, r6, r3
 80085b8:	6026      	str	r6, [r4, #0]
 80085ba:	6165      	str	r5, [r4, #20]
 80085bc:	9e01      	ldr	r6, [sp, #4]
 80085be:	1aed      	subs	r5, r5, r3
 80085c0:	60a5      	str	r5, [r4, #8]
 80085c2:	9b01      	ldr	r3, [sp, #4]
 80085c4:	429e      	cmp	r6, r3
 80085c6:	d900      	bls.n	80085ca <__ssputs_r+0x8e>
 80085c8:	9e01      	ldr	r6, [sp, #4]
 80085ca:	0032      	movs	r2, r6
 80085cc:	9903      	ldr	r1, [sp, #12]
 80085ce:	6820      	ldr	r0, [r4, #0]
 80085d0:	f001 f928 	bl	8009824 <memmove>
 80085d4:	68a3      	ldr	r3, [r4, #8]
 80085d6:	2000      	movs	r0, #0
 80085d8:	1b9b      	subs	r3, r3, r6
 80085da:	60a3      	str	r3, [r4, #8]
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	199e      	adds	r6, r3, r6
 80085e0:	6026      	str	r6, [r4, #0]
 80085e2:	e7da      	b.n	800859a <__ssputs_r+0x5e>
 80085e4:	002a      	movs	r2, r5
 80085e6:	0038      	movs	r0, r7
 80085e8:	f7ff ff82 	bl	80084f0 <_realloc_r>
 80085ec:	1e06      	subs	r6, r0, #0
 80085ee:	d1e0      	bne.n	80085b2 <__ssputs_r+0x76>
 80085f0:	6921      	ldr	r1, [r4, #16]
 80085f2:	0038      	movs	r0, r7
 80085f4:	f001 f92c 	bl	8009850 <_free_r>
 80085f8:	e7c7      	b.n	800858a <__ssputs_r+0x4e>
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	fffffb7f 	.word	0xfffffb7f

08008600 <_svfiprintf_r>:
 8008600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008602:	b0a1      	sub	sp, #132	; 0x84
 8008604:	9003      	str	r0, [sp, #12]
 8008606:	001d      	movs	r5, r3
 8008608:	898b      	ldrh	r3, [r1, #12]
 800860a:	000f      	movs	r7, r1
 800860c:	0016      	movs	r6, r2
 800860e:	061b      	lsls	r3, r3, #24
 8008610:	d511      	bpl.n	8008636 <_svfiprintf_r+0x36>
 8008612:	690b      	ldr	r3, [r1, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10e      	bne.n	8008636 <_svfiprintf_r+0x36>
 8008618:	2140      	movs	r1, #64	; 0x40
 800861a:	f7ff ff0b 	bl	8008434 <_malloc_r>
 800861e:	6038      	str	r0, [r7, #0]
 8008620:	6138      	str	r0, [r7, #16]
 8008622:	2800      	cmp	r0, #0
 8008624:	d105      	bne.n	8008632 <_svfiprintf_r+0x32>
 8008626:	230c      	movs	r3, #12
 8008628:	9a03      	ldr	r2, [sp, #12]
 800862a:	3801      	subs	r0, #1
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	b021      	add	sp, #132	; 0x84
 8008630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008632:	2340      	movs	r3, #64	; 0x40
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	2300      	movs	r3, #0
 8008638:	ac08      	add	r4, sp, #32
 800863a:	6163      	str	r3, [r4, #20]
 800863c:	3320      	adds	r3, #32
 800863e:	7663      	strb	r3, [r4, #25]
 8008640:	3310      	adds	r3, #16
 8008642:	76a3      	strb	r3, [r4, #26]
 8008644:	9507      	str	r5, [sp, #28]
 8008646:	0035      	movs	r5, r6
 8008648:	782b      	ldrb	r3, [r5, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <_svfiprintf_r+0x52>
 800864e:	2b25      	cmp	r3, #37	; 0x25
 8008650:	d146      	bne.n	80086e0 <_svfiprintf_r+0xe0>
 8008652:	1bab      	subs	r3, r5, r6
 8008654:	9305      	str	r3, [sp, #20]
 8008656:	d00c      	beq.n	8008672 <_svfiprintf_r+0x72>
 8008658:	0032      	movs	r2, r6
 800865a:	0039      	movs	r1, r7
 800865c:	9803      	ldr	r0, [sp, #12]
 800865e:	f7ff ff6d 	bl	800853c <__ssputs_r>
 8008662:	1c43      	adds	r3, r0, #1
 8008664:	d100      	bne.n	8008668 <_svfiprintf_r+0x68>
 8008666:	e0ae      	b.n	80087c6 <_svfiprintf_r+0x1c6>
 8008668:	6962      	ldr	r2, [r4, #20]
 800866a:	9b05      	ldr	r3, [sp, #20]
 800866c:	4694      	mov	ip, r2
 800866e:	4463      	add	r3, ip
 8008670:	6163      	str	r3, [r4, #20]
 8008672:	782b      	ldrb	r3, [r5, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d100      	bne.n	800867a <_svfiprintf_r+0x7a>
 8008678:	e0a5      	b.n	80087c6 <_svfiprintf_r+0x1c6>
 800867a:	2201      	movs	r2, #1
 800867c:	2300      	movs	r3, #0
 800867e:	4252      	negs	r2, r2
 8008680:	6062      	str	r2, [r4, #4]
 8008682:	a904      	add	r1, sp, #16
 8008684:	3254      	adds	r2, #84	; 0x54
 8008686:	1852      	adds	r2, r2, r1
 8008688:	1c6e      	adds	r6, r5, #1
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	60e3      	str	r3, [r4, #12]
 800868e:	60a3      	str	r3, [r4, #8]
 8008690:	7013      	strb	r3, [r2, #0]
 8008692:	65a3      	str	r3, [r4, #88]	; 0x58
 8008694:	7831      	ldrb	r1, [r6, #0]
 8008696:	2205      	movs	r2, #5
 8008698:	4853      	ldr	r0, [pc, #332]	; (80087e8 <_svfiprintf_r+0x1e8>)
 800869a:	f001 f8af 	bl	80097fc <memchr>
 800869e:	1c75      	adds	r5, r6, #1
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d11f      	bne.n	80086e4 <_svfiprintf_r+0xe4>
 80086a4:	6822      	ldr	r2, [r4, #0]
 80086a6:	06d3      	lsls	r3, r2, #27
 80086a8:	d504      	bpl.n	80086b4 <_svfiprintf_r+0xb4>
 80086aa:	2353      	movs	r3, #83	; 0x53
 80086ac:	a904      	add	r1, sp, #16
 80086ae:	185b      	adds	r3, r3, r1
 80086b0:	2120      	movs	r1, #32
 80086b2:	7019      	strb	r1, [r3, #0]
 80086b4:	0713      	lsls	r3, r2, #28
 80086b6:	d504      	bpl.n	80086c2 <_svfiprintf_r+0xc2>
 80086b8:	2353      	movs	r3, #83	; 0x53
 80086ba:	a904      	add	r1, sp, #16
 80086bc:	185b      	adds	r3, r3, r1
 80086be:	212b      	movs	r1, #43	; 0x2b
 80086c0:	7019      	strb	r1, [r3, #0]
 80086c2:	7833      	ldrb	r3, [r6, #0]
 80086c4:	2b2a      	cmp	r3, #42	; 0x2a
 80086c6:	d016      	beq.n	80086f6 <_svfiprintf_r+0xf6>
 80086c8:	0035      	movs	r5, r6
 80086ca:	2100      	movs	r1, #0
 80086cc:	200a      	movs	r0, #10
 80086ce:	68e3      	ldr	r3, [r4, #12]
 80086d0:	782a      	ldrb	r2, [r5, #0]
 80086d2:	1c6e      	adds	r6, r5, #1
 80086d4:	3a30      	subs	r2, #48	; 0x30
 80086d6:	2a09      	cmp	r2, #9
 80086d8:	d94e      	bls.n	8008778 <_svfiprintf_r+0x178>
 80086da:	2900      	cmp	r1, #0
 80086dc:	d018      	beq.n	8008710 <_svfiprintf_r+0x110>
 80086de:	e010      	b.n	8008702 <_svfiprintf_r+0x102>
 80086e0:	3501      	adds	r5, #1
 80086e2:	e7b1      	b.n	8008648 <_svfiprintf_r+0x48>
 80086e4:	4b40      	ldr	r3, [pc, #256]	; (80087e8 <_svfiprintf_r+0x1e8>)
 80086e6:	6822      	ldr	r2, [r4, #0]
 80086e8:	1ac0      	subs	r0, r0, r3
 80086ea:	2301      	movs	r3, #1
 80086ec:	4083      	lsls	r3, r0
 80086ee:	4313      	orrs	r3, r2
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	002e      	movs	r6, r5
 80086f4:	e7ce      	b.n	8008694 <_svfiprintf_r+0x94>
 80086f6:	9b07      	ldr	r3, [sp, #28]
 80086f8:	1d19      	adds	r1, r3, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	9107      	str	r1, [sp, #28]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	db01      	blt.n	8008706 <_svfiprintf_r+0x106>
 8008702:	930b      	str	r3, [sp, #44]	; 0x2c
 8008704:	e004      	b.n	8008710 <_svfiprintf_r+0x110>
 8008706:	425b      	negs	r3, r3
 8008708:	60e3      	str	r3, [r4, #12]
 800870a:	2302      	movs	r3, #2
 800870c:	4313      	orrs	r3, r2
 800870e:	6023      	str	r3, [r4, #0]
 8008710:	782b      	ldrb	r3, [r5, #0]
 8008712:	2b2e      	cmp	r3, #46	; 0x2e
 8008714:	d10a      	bne.n	800872c <_svfiprintf_r+0x12c>
 8008716:	786b      	ldrb	r3, [r5, #1]
 8008718:	2b2a      	cmp	r3, #42	; 0x2a
 800871a:	d135      	bne.n	8008788 <_svfiprintf_r+0x188>
 800871c:	9b07      	ldr	r3, [sp, #28]
 800871e:	3502      	adds	r5, #2
 8008720:	1d1a      	adds	r2, r3, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	9207      	str	r2, [sp, #28]
 8008726:	2b00      	cmp	r3, #0
 8008728:	db2b      	blt.n	8008782 <_svfiprintf_r+0x182>
 800872a:	9309      	str	r3, [sp, #36]	; 0x24
 800872c:	4e2f      	ldr	r6, [pc, #188]	; (80087ec <_svfiprintf_r+0x1ec>)
 800872e:	7829      	ldrb	r1, [r5, #0]
 8008730:	2203      	movs	r2, #3
 8008732:	0030      	movs	r0, r6
 8008734:	f001 f862 	bl	80097fc <memchr>
 8008738:	2800      	cmp	r0, #0
 800873a:	d006      	beq.n	800874a <_svfiprintf_r+0x14a>
 800873c:	2340      	movs	r3, #64	; 0x40
 800873e:	1b80      	subs	r0, r0, r6
 8008740:	4083      	lsls	r3, r0
 8008742:	6822      	ldr	r2, [r4, #0]
 8008744:	3501      	adds	r5, #1
 8008746:	4313      	orrs	r3, r2
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	7829      	ldrb	r1, [r5, #0]
 800874c:	2206      	movs	r2, #6
 800874e:	4828      	ldr	r0, [pc, #160]	; (80087f0 <_svfiprintf_r+0x1f0>)
 8008750:	1c6e      	adds	r6, r5, #1
 8008752:	7621      	strb	r1, [r4, #24]
 8008754:	f001 f852 	bl	80097fc <memchr>
 8008758:	2800      	cmp	r0, #0
 800875a:	d03c      	beq.n	80087d6 <_svfiprintf_r+0x1d6>
 800875c:	4b25      	ldr	r3, [pc, #148]	; (80087f4 <_svfiprintf_r+0x1f4>)
 800875e:	2b00      	cmp	r3, #0
 8008760:	d125      	bne.n	80087ae <_svfiprintf_r+0x1ae>
 8008762:	2207      	movs	r2, #7
 8008764:	9b07      	ldr	r3, [sp, #28]
 8008766:	3307      	adds	r3, #7
 8008768:	4393      	bics	r3, r2
 800876a:	3308      	adds	r3, #8
 800876c:	9307      	str	r3, [sp, #28]
 800876e:	6963      	ldr	r3, [r4, #20]
 8008770:	9a04      	ldr	r2, [sp, #16]
 8008772:	189b      	adds	r3, r3, r2
 8008774:	6163      	str	r3, [r4, #20]
 8008776:	e766      	b.n	8008646 <_svfiprintf_r+0x46>
 8008778:	4343      	muls	r3, r0
 800877a:	2101      	movs	r1, #1
 800877c:	189b      	adds	r3, r3, r2
 800877e:	0035      	movs	r5, r6
 8008780:	e7a6      	b.n	80086d0 <_svfiprintf_r+0xd0>
 8008782:	2301      	movs	r3, #1
 8008784:	425b      	negs	r3, r3
 8008786:	e7d0      	b.n	800872a <_svfiprintf_r+0x12a>
 8008788:	2300      	movs	r3, #0
 800878a:	200a      	movs	r0, #10
 800878c:	001a      	movs	r2, r3
 800878e:	3501      	adds	r5, #1
 8008790:	6063      	str	r3, [r4, #4]
 8008792:	7829      	ldrb	r1, [r5, #0]
 8008794:	1c6e      	adds	r6, r5, #1
 8008796:	3930      	subs	r1, #48	; 0x30
 8008798:	2909      	cmp	r1, #9
 800879a:	d903      	bls.n	80087a4 <_svfiprintf_r+0x1a4>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0c5      	beq.n	800872c <_svfiprintf_r+0x12c>
 80087a0:	9209      	str	r2, [sp, #36]	; 0x24
 80087a2:	e7c3      	b.n	800872c <_svfiprintf_r+0x12c>
 80087a4:	4342      	muls	r2, r0
 80087a6:	2301      	movs	r3, #1
 80087a8:	1852      	adds	r2, r2, r1
 80087aa:	0035      	movs	r5, r6
 80087ac:	e7f1      	b.n	8008792 <_svfiprintf_r+0x192>
 80087ae:	ab07      	add	r3, sp, #28
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	003a      	movs	r2, r7
 80087b4:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <_svfiprintf_r+0x1f8>)
 80087b6:	0021      	movs	r1, r4
 80087b8:	9803      	ldr	r0, [sp, #12]
 80087ba:	e000      	b.n	80087be <_svfiprintf_r+0x1be>
 80087bc:	bf00      	nop
 80087be:	9004      	str	r0, [sp, #16]
 80087c0:	9b04      	ldr	r3, [sp, #16]
 80087c2:	3301      	adds	r3, #1
 80087c4:	d1d3      	bne.n	800876e <_svfiprintf_r+0x16e>
 80087c6:	89bb      	ldrh	r3, [r7, #12]
 80087c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80087ca:	065b      	lsls	r3, r3, #25
 80087cc:	d400      	bmi.n	80087d0 <_svfiprintf_r+0x1d0>
 80087ce:	e72e      	b.n	800862e <_svfiprintf_r+0x2e>
 80087d0:	2001      	movs	r0, #1
 80087d2:	4240      	negs	r0, r0
 80087d4:	e72b      	b.n	800862e <_svfiprintf_r+0x2e>
 80087d6:	ab07      	add	r3, sp, #28
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	003a      	movs	r2, r7
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <_svfiprintf_r+0x1f8>)
 80087de:	0021      	movs	r1, r4
 80087e0:	9803      	ldr	r0, [sp, #12]
 80087e2:	f000 f879 	bl	80088d8 <_printf_i>
 80087e6:	e7ea      	b.n	80087be <_svfiprintf_r+0x1be>
 80087e8:	0800b0ac 	.word	0x0800b0ac
 80087ec:	0800b0b2 	.word	0x0800b0b2
 80087f0:	0800b0b6 	.word	0x0800b0b6
 80087f4:	00000000 	.word	0x00000000
 80087f8:	0800853d 	.word	0x0800853d

080087fc <_printf_common>:
 80087fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087fe:	0015      	movs	r5, r2
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	688a      	ldr	r2, [r1, #8]
 8008804:	690b      	ldr	r3, [r1, #16]
 8008806:	9000      	str	r0, [sp, #0]
 8008808:	000c      	movs	r4, r1
 800880a:	4293      	cmp	r3, r2
 800880c:	da00      	bge.n	8008810 <_printf_common+0x14>
 800880e:	0013      	movs	r3, r2
 8008810:	0022      	movs	r2, r4
 8008812:	602b      	str	r3, [r5, #0]
 8008814:	3243      	adds	r2, #67	; 0x43
 8008816:	7812      	ldrb	r2, [r2, #0]
 8008818:	2a00      	cmp	r2, #0
 800881a:	d001      	beq.n	8008820 <_printf_common+0x24>
 800881c:	3301      	adds	r3, #1
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	069b      	lsls	r3, r3, #26
 8008824:	d502      	bpl.n	800882c <_printf_common+0x30>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	3302      	adds	r3, #2
 800882a:	602b      	str	r3, [r5, #0]
 800882c:	2706      	movs	r7, #6
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	401f      	ands	r7, r3
 8008832:	d027      	beq.n	8008884 <_printf_common+0x88>
 8008834:	0023      	movs	r3, r4
 8008836:	3343      	adds	r3, #67	; 0x43
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	1e5a      	subs	r2, r3, #1
 800883c:	4193      	sbcs	r3, r2
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	0692      	lsls	r2, r2, #26
 8008842:	d430      	bmi.n	80088a6 <_printf_common+0xaa>
 8008844:	0022      	movs	r2, r4
 8008846:	9901      	ldr	r1, [sp, #4]
 8008848:	3243      	adds	r2, #67	; 0x43
 800884a:	9800      	ldr	r0, [sp, #0]
 800884c:	9e08      	ldr	r6, [sp, #32]
 800884e:	47b0      	blx	r6
 8008850:	1c43      	adds	r3, r0, #1
 8008852:	d025      	beq.n	80088a0 <_printf_common+0xa4>
 8008854:	2306      	movs	r3, #6
 8008856:	6820      	ldr	r0, [r4, #0]
 8008858:	682a      	ldr	r2, [r5, #0]
 800885a:	68e1      	ldr	r1, [r4, #12]
 800885c:	4003      	ands	r3, r0
 800885e:	2500      	movs	r5, #0
 8008860:	2b04      	cmp	r3, #4
 8008862:	d103      	bne.n	800886c <_printf_common+0x70>
 8008864:	1a8d      	subs	r5, r1, r2
 8008866:	43eb      	mvns	r3, r5
 8008868:	17db      	asrs	r3, r3, #31
 800886a:	401d      	ands	r5, r3
 800886c:	68a3      	ldr	r3, [r4, #8]
 800886e:	6922      	ldr	r2, [r4, #16]
 8008870:	4293      	cmp	r3, r2
 8008872:	dd01      	ble.n	8008878 <_printf_common+0x7c>
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	18ed      	adds	r5, r5, r3
 8008878:	2700      	movs	r7, #0
 800887a:	42bd      	cmp	r5, r7
 800887c:	d120      	bne.n	80088c0 <_printf_common+0xc4>
 800887e:	2000      	movs	r0, #0
 8008880:	e010      	b.n	80088a4 <_printf_common+0xa8>
 8008882:	3701      	adds	r7, #1
 8008884:	68e3      	ldr	r3, [r4, #12]
 8008886:	682a      	ldr	r2, [r5, #0]
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	42bb      	cmp	r3, r7
 800888c:	ddd2      	ble.n	8008834 <_printf_common+0x38>
 800888e:	0022      	movs	r2, r4
 8008890:	2301      	movs	r3, #1
 8008892:	3219      	adds	r2, #25
 8008894:	9901      	ldr	r1, [sp, #4]
 8008896:	9800      	ldr	r0, [sp, #0]
 8008898:	9e08      	ldr	r6, [sp, #32]
 800889a:	47b0      	blx	r6
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d1f0      	bne.n	8008882 <_printf_common+0x86>
 80088a0:	2001      	movs	r0, #1
 80088a2:	4240      	negs	r0, r0
 80088a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088a6:	2030      	movs	r0, #48	; 0x30
 80088a8:	18e1      	adds	r1, r4, r3
 80088aa:	3143      	adds	r1, #67	; 0x43
 80088ac:	7008      	strb	r0, [r1, #0]
 80088ae:	0021      	movs	r1, r4
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	3145      	adds	r1, #69	; 0x45
 80088b4:	7809      	ldrb	r1, [r1, #0]
 80088b6:	18a2      	adds	r2, r4, r2
 80088b8:	3243      	adds	r2, #67	; 0x43
 80088ba:	3302      	adds	r3, #2
 80088bc:	7011      	strb	r1, [r2, #0]
 80088be:	e7c1      	b.n	8008844 <_printf_common+0x48>
 80088c0:	0022      	movs	r2, r4
 80088c2:	2301      	movs	r3, #1
 80088c4:	321a      	adds	r2, #26
 80088c6:	9901      	ldr	r1, [sp, #4]
 80088c8:	9800      	ldr	r0, [sp, #0]
 80088ca:	9e08      	ldr	r6, [sp, #32]
 80088cc:	47b0      	blx	r6
 80088ce:	1c43      	adds	r3, r0, #1
 80088d0:	d0e6      	beq.n	80088a0 <_printf_common+0xa4>
 80088d2:	3701      	adds	r7, #1
 80088d4:	e7d1      	b.n	800887a <_printf_common+0x7e>
	...

080088d8 <_printf_i>:
 80088d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088da:	b089      	sub	sp, #36	; 0x24
 80088dc:	9204      	str	r2, [sp, #16]
 80088de:	000a      	movs	r2, r1
 80088e0:	3243      	adds	r2, #67	; 0x43
 80088e2:	9305      	str	r3, [sp, #20]
 80088e4:	9003      	str	r0, [sp, #12]
 80088e6:	9202      	str	r2, [sp, #8]
 80088e8:	7e0a      	ldrb	r2, [r1, #24]
 80088ea:	000c      	movs	r4, r1
 80088ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ee:	2a6e      	cmp	r2, #110	; 0x6e
 80088f0:	d100      	bne.n	80088f4 <_printf_i+0x1c>
 80088f2:	e086      	b.n	8008a02 <_printf_i+0x12a>
 80088f4:	d81f      	bhi.n	8008936 <_printf_i+0x5e>
 80088f6:	2a63      	cmp	r2, #99	; 0x63
 80088f8:	d033      	beq.n	8008962 <_printf_i+0x8a>
 80088fa:	d808      	bhi.n	800890e <_printf_i+0x36>
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	d100      	bne.n	8008902 <_printf_i+0x2a>
 8008900:	e08c      	b.n	8008a1c <_printf_i+0x144>
 8008902:	2a58      	cmp	r2, #88	; 0x58
 8008904:	d04d      	beq.n	80089a2 <_printf_i+0xca>
 8008906:	0025      	movs	r5, r4
 8008908:	3542      	adds	r5, #66	; 0x42
 800890a:	702a      	strb	r2, [r5, #0]
 800890c:	e030      	b.n	8008970 <_printf_i+0x98>
 800890e:	2a64      	cmp	r2, #100	; 0x64
 8008910:	d001      	beq.n	8008916 <_printf_i+0x3e>
 8008912:	2a69      	cmp	r2, #105	; 0x69
 8008914:	d1f7      	bne.n	8008906 <_printf_i+0x2e>
 8008916:	6819      	ldr	r1, [r3, #0]
 8008918:	6825      	ldr	r5, [r4, #0]
 800891a:	1d0a      	adds	r2, r1, #4
 800891c:	0628      	lsls	r0, r5, #24
 800891e:	d529      	bpl.n	8008974 <_printf_i+0x9c>
 8008920:	6808      	ldr	r0, [r1, #0]
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	2800      	cmp	r0, #0
 8008926:	da03      	bge.n	8008930 <_printf_i+0x58>
 8008928:	232d      	movs	r3, #45	; 0x2d
 800892a:	9a02      	ldr	r2, [sp, #8]
 800892c:	4240      	negs	r0, r0
 800892e:	7013      	strb	r3, [r2, #0]
 8008930:	4e6b      	ldr	r6, [pc, #428]	; (8008ae0 <_printf_i+0x208>)
 8008932:	270a      	movs	r7, #10
 8008934:	e04f      	b.n	80089d6 <_printf_i+0xfe>
 8008936:	2a73      	cmp	r2, #115	; 0x73
 8008938:	d074      	beq.n	8008a24 <_printf_i+0x14c>
 800893a:	d808      	bhi.n	800894e <_printf_i+0x76>
 800893c:	2a6f      	cmp	r2, #111	; 0x6f
 800893e:	d01f      	beq.n	8008980 <_printf_i+0xa8>
 8008940:	2a70      	cmp	r2, #112	; 0x70
 8008942:	d1e0      	bne.n	8008906 <_printf_i+0x2e>
 8008944:	2220      	movs	r2, #32
 8008946:	6809      	ldr	r1, [r1, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	6022      	str	r2, [r4, #0]
 800894c:	e003      	b.n	8008956 <_printf_i+0x7e>
 800894e:	2a75      	cmp	r2, #117	; 0x75
 8008950:	d016      	beq.n	8008980 <_printf_i+0xa8>
 8008952:	2a78      	cmp	r2, #120	; 0x78
 8008954:	d1d7      	bne.n	8008906 <_printf_i+0x2e>
 8008956:	0022      	movs	r2, r4
 8008958:	2178      	movs	r1, #120	; 0x78
 800895a:	3245      	adds	r2, #69	; 0x45
 800895c:	7011      	strb	r1, [r2, #0]
 800895e:	4e61      	ldr	r6, [pc, #388]	; (8008ae4 <_printf_i+0x20c>)
 8008960:	e022      	b.n	80089a8 <_printf_i+0xd0>
 8008962:	0025      	movs	r5, r4
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	3542      	adds	r5, #66	; 0x42
 8008968:	1d11      	adds	r1, r2, #4
 800896a:	6019      	str	r1, [r3, #0]
 800896c:	6813      	ldr	r3, [r2, #0]
 800896e:	702b      	strb	r3, [r5, #0]
 8008970:	2301      	movs	r3, #1
 8008972:	e065      	b.n	8008a40 <_printf_i+0x168>
 8008974:	6808      	ldr	r0, [r1, #0]
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	0669      	lsls	r1, r5, #25
 800897a:	d5d3      	bpl.n	8008924 <_printf_i+0x4c>
 800897c:	b200      	sxth	r0, r0
 800897e:	e7d1      	b.n	8008924 <_printf_i+0x4c>
 8008980:	6819      	ldr	r1, [r3, #0]
 8008982:	6825      	ldr	r5, [r4, #0]
 8008984:	1d08      	adds	r0, r1, #4
 8008986:	6018      	str	r0, [r3, #0]
 8008988:	6808      	ldr	r0, [r1, #0]
 800898a:	062e      	lsls	r6, r5, #24
 800898c:	d505      	bpl.n	800899a <_printf_i+0xc2>
 800898e:	4e54      	ldr	r6, [pc, #336]	; (8008ae0 <_printf_i+0x208>)
 8008990:	2708      	movs	r7, #8
 8008992:	2a6f      	cmp	r2, #111	; 0x6f
 8008994:	d01b      	beq.n	80089ce <_printf_i+0xf6>
 8008996:	270a      	movs	r7, #10
 8008998:	e019      	b.n	80089ce <_printf_i+0xf6>
 800899a:	066d      	lsls	r5, r5, #25
 800899c:	d5f7      	bpl.n	800898e <_printf_i+0xb6>
 800899e:	b280      	uxth	r0, r0
 80089a0:	e7f5      	b.n	800898e <_printf_i+0xb6>
 80089a2:	3145      	adds	r1, #69	; 0x45
 80089a4:	4e4e      	ldr	r6, [pc, #312]	; (8008ae0 <_printf_i+0x208>)
 80089a6:	700a      	strb	r2, [r1, #0]
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	6822      	ldr	r2, [r4, #0]
 80089ac:	1d01      	adds	r1, r0, #4
 80089ae:	6800      	ldr	r0, [r0, #0]
 80089b0:	6019      	str	r1, [r3, #0]
 80089b2:	0615      	lsls	r5, r2, #24
 80089b4:	d521      	bpl.n	80089fa <_printf_i+0x122>
 80089b6:	07d3      	lsls	r3, r2, #31
 80089b8:	d502      	bpl.n	80089c0 <_printf_i+0xe8>
 80089ba:	2320      	movs	r3, #32
 80089bc:	431a      	orrs	r2, r3
 80089be:	6022      	str	r2, [r4, #0]
 80089c0:	2710      	movs	r7, #16
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d103      	bne.n	80089ce <_printf_i+0xf6>
 80089c6:	2320      	movs	r3, #32
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	439a      	bics	r2, r3
 80089cc:	6022      	str	r2, [r4, #0]
 80089ce:	0023      	movs	r3, r4
 80089d0:	2200      	movs	r2, #0
 80089d2:	3343      	adds	r3, #67	; 0x43
 80089d4:	701a      	strb	r2, [r3, #0]
 80089d6:	6863      	ldr	r3, [r4, #4]
 80089d8:	60a3      	str	r3, [r4, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	db58      	blt.n	8008a90 <_printf_i+0x1b8>
 80089de:	2204      	movs	r2, #4
 80089e0:	6821      	ldr	r1, [r4, #0]
 80089e2:	4391      	bics	r1, r2
 80089e4:	6021      	str	r1, [r4, #0]
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d154      	bne.n	8008a94 <_printf_i+0x1bc>
 80089ea:	9d02      	ldr	r5, [sp, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d05a      	beq.n	8008aa6 <_printf_i+0x1ce>
 80089f0:	0025      	movs	r5, r4
 80089f2:	7833      	ldrb	r3, [r6, #0]
 80089f4:	3542      	adds	r5, #66	; 0x42
 80089f6:	702b      	strb	r3, [r5, #0]
 80089f8:	e055      	b.n	8008aa6 <_printf_i+0x1ce>
 80089fa:	0655      	lsls	r5, r2, #25
 80089fc:	d5db      	bpl.n	80089b6 <_printf_i+0xde>
 80089fe:	b280      	uxth	r0, r0
 8008a00:	e7d9      	b.n	80089b6 <_printf_i+0xde>
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	680d      	ldr	r5, [r1, #0]
 8008a06:	1d10      	adds	r0, r2, #4
 8008a08:	6949      	ldr	r1, [r1, #20]
 8008a0a:	6018      	str	r0, [r3, #0]
 8008a0c:	6813      	ldr	r3, [r2, #0]
 8008a0e:	062e      	lsls	r6, r5, #24
 8008a10:	d501      	bpl.n	8008a16 <_printf_i+0x13e>
 8008a12:	6019      	str	r1, [r3, #0]
 8008a14:	e002      	b.n	8008a1c <_printf_i+0x144>
 8008a16:	066d      	lsls	r5, r5, #25
 8008a18:	d5fb      	bpl.n	8008a12 <_printf_i+0x13a>
 8008a1a:	8019      	strh	r1, [r3, #0]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	9d02      	ldr	r5, [sp, #8]
 8008a20:	6123      	str	r3, [r4, #16]
 8008a22:	e04f      	b.n	8008ac4 <_printf_i+0x1ec>
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	1d11      	adds	r1, r2, #4
 8008a28:	6019      	str	r1, [r3, #0]
 8008a2a:	6815      	ldr	r5, [r2, #0]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	6862      	ldr	r2, [r4, #4]
 8008a30:	0028      	movs	r0, r5
 8008a32:	f000 fee3 	bl	80097fc <memchr>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d001      	beq.n	8008a3e <_printf_i+0x166>
 8008a3a:	1b40      	subs	r0, r0, r5
 8008a3c:	6060      	str	r0, [r4, #4]
 8008a3e:	6863      	ldr	r3, [r4, #4]
 8008a40:	6123      	str	r3, [r4, #16]
 8008a42:	2300      	movs	r3, #0
 8008a44:	9a02      	ldr	r2, [sp, #8]
 8008a46:	7013      	strb	r3, [r2, #0]
 8008a48:	e03c      	b.n	8008ac4 <_printf_i+0x1ec>
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	002a      	movs	r2, r5
 8008a4e:	9904      	ldr	r1, [sp, #16]
 8008a50:	9803      	ldr	r0, [sp, #12]
 8008a52:	9d05      	ldr	r5, [sp, #20]
 8008a54:	47a8      	blx	r5
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	d03e      	beq.n	8008ad8 <_printf_i+0x200>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	079b      	lsls	r3, r3, #30
 8008a5e:	d415      	bmi.n	8008a8c <_printf_i+0x1b4>
 8008a60:	9b07      	ldr	r3, [sp, #28]
 8008a62:	68e0      	ldr	r0, [r4, #12]
 8008a64:	4298      	cmp	r0, r3
 8008a66:	da39      	bge.n	8008adc <_printf_i+0x204>
 8008a68:	0018      	movs	r0, r3
 8008a6a:	e037      	b.n	8008adc <_printf_i+0x204>
 8008a6c:	0022      	movs	r2, r4
 8008a6e:	2301      	movs	r3, #1
 8008a70:	3219      	adds	r2, #25
 8008a72:	9904      	ldr	r1, [sp, #16]
 8008a74:	9803      	ldr	r0, [sp, #12]
 8008a76:	9e05      	ldr	r6, [sp, #20]
 8008a78:	47b0      	blx	r6
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	d02c      	beq.n	8008ad8 <_printf_i+0x200>
 8008a7e:	3501      	adds	r5, #1
 8008a80:	68e3      	ldr	r3, [r4, #12]
 8008a82:	9a07      	ldr	r2, [sp, #28]
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	42ab      	cmp	r3, r5
 8008a88:	dcf0      	bgt.n	8008a6c <_printf_i+0x194>
 8008a8a:	e7e9      	b.n	8008a60 <_printf_i+0x188>
 8008a8c:	2500      	movs	r5, #0
 8008a8e:	e7f7      	b.n	8008a80 <_printf_i+0x1a8>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d0ad      	beq.n	80089f0 <_printf_i+0x118>
 8008a94:	9d02      	ldr	r5, [sp, #8]
 8008a96:	0039      	movs	r1, r7
 8008a98:	f7f7 fbc6 	bl	8000228 <__aeabi_uidivmod>
 8008a9c:	5c73      	ldrb	r3, [r6, r1]
 8008a9e:	3d01      	subs	r5, #1
 8008aa0:	702b      	strb	r3, [r5, #0]
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d1f7      	bne.n	8008a96 <_printf_i+0x1be>
 8008aa6:	2f08      	cmp	r7, #8
 8008aa8:	d109      	bne.n	8008abe <_printf_i+0x1e6>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	07db      	lsls	r3, r3, #31
 8008aae:	d506      	bpl.n	8008abe <_printf_i+0x1e6>
 8008ab0:	6863      	ldr	r3, [r4, #4]
 8008ab2:	6922      	ldr	r2, [r4, #16]
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	dc02      	bgt.n	8008abe <_printf_i+0x1e6>
 8008ab8:	2330      	movs	r3, #48	; 0x30
 8008aba:	3d01      	subs	r5, #1
 8008abc:	702b      	strb	r3, [r5, #0]
 8008abe:	9b02      	ldr	r3, [sp, #8]
 8008ac0:	1b5b      	subs	r3, r3, r5
 8008ac2:	6123      	str	r3, [r4, #16]
 8008ac4:	9b05      	ldr	r3, [sp, #20]
 8008ac6:	aa07      	add	r2, sp, #28
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	0021      	movs	r1, r4
 8008acc:	9b04      	ldr	r3, [sp, #16]
 8008ace:	9803      	ldr	r0, [sp, #12]
 8008ad0:	f7ff fe94 	bl	80087fc <_printf_common>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d1b8      	bne.n	8008a4a <_printf_i+0x172>
 8008ad8:	2001      	movs	r0, #1
 8008ada:	4240      	negs	r0, r0
 8008adc:	b009      	add	sp, #36	; 0x24
 8008ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae0:	0800b0bd 	.word	0x0800b0bd
 8008ae4:	0800b0ce 	.word	0x0800b0ce

08008ae8 <_sbrk_r>:
 8008ae8:	2300      	movs	r3, #0
 8008aea:	b570      	push	{r4, r5, r6, lr}
 8008aec:	4c06      	ldr	r4, [pc, #24]	; (8008b08 <_sbrk_r+0x20>)
 8008aee:	0005      	movs	r5, r0
 8008af0:	0008      	movs	r0, r1
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	f7fb fc7c 	bl	80043f0 <_sbrk>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d103      	bne.n	8008b04 <_sbrk_r+0x1c>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d000      	beq.n	8008b04 <_sbrk_r+0x1c>
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	bd70      	pop	{r4, r5, r6, pc}
 8008b06:	46c0      	nop			; (mov r8, r8)
 8008b08:	200008ec 	.word	0x200008ec

08008b0c <strcpy>:
 8008b0c:	0003      	movs	r3, r0
 8008b0e:	780a      	ldrb	r2, [r1, #0]
 8008b10:	3101      	adds	r1, #1
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	3301      	adds	r3, #1
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	d1f9      	bne.n	8008b0e <strcpy+0x2>
 8008b1a:	4770      	bx	lr

08008b1c <quorem>:
 8008b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b1e:	6903      	ldr	r3, [r0, #16]
 8008b20:	690c      	ldr	r4, [r1, #16]
 8008b22:	b089      	sub	sp, #36	; 0x24
 8008b24:	0007      	movs	r7, r0
 8008b26:	9105      	str	r1, [sp, #20]
 8008b28:	2600      	movs	r6, #0
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	db65      	blt.n	8008bfa <quorem+0xde>
 8008b2e:	000b      	movs	r3, r1
 8008b30:	3c01      	subs	r4, #1
 8008b32:	3314      	adds	r3, #20
 8008b34:	00a5      	lsls	r5, r4, #2
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	195b      	adds	r3, r3, r5
 8008b3a:	9304      	str	r3, [sp, #16]
 8008b3c:	0003      	movs	r3, r0
 8008b3e:	3314      	adds	r3, #20
 8008b40:	9302      	str	r3, [sp, #8]
 8008b42:	195d      	adds	r5, r3, r5
 8008b44:	9b04      	ldr	r3, [sp, #16]
 8008b46:	6828      	ldr	r0, [r5, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	1c59      	adds	r1, r3, #1
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	f7f7 fae5 	bl	800011c <__udivsi3>
 8008b52:	9001      	str	r0, [sp, #4]
 8008b54:	42b0      	cmp	r0, r6
 8008b56:	d029      	beq.n	8008bac <quorem+0x90>
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	9802      	ldr	r0, [sp, #8]
 8008b5c:	469c      	mov	ip, r3
 8008b5e:	9606      	str	r6, [sp, #24]
 8008b60:	4662      	mov	r2, ip
 8008b62:	ca08      	ldmia	r2!, {r3}
 8008b64:	4694      	mov	ip, r2
 8008b66:	9a01      	ldr	r2, [sp, #4]
 8008b68:	b299      	uxth	r1, r3
 8008b6a:	4351      	muls	r1, r2
 8008b6c:	0c1b      	lsrs	r3, r3, #16
 8008b6e:	4353      	muls	r3, r2
 8008b70:	1989      	adds	r1, r1, r6
 8008b72:	0c0a      	lsrs	r2, r1, #16
 8008b74:	189b      	adds	r3, r3, r2
 8008b76:	9307      	str	r3, [sp, #28]
 8008b78:	0c1e      	lsrs	r6, r3, #16
 8008b7a:	6803      	ldr	r3, [r0, #0]
 8008b7c:	b289      	uxth	r1, r1
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	9b06      	ldr	r3, [sp, #24]
 8008b82:	18d2      	adds	r2, r2, r3
 8008b84:	6803      	ldr	r3, [r0, #0]
 8008b86:	1a52      	subs	r2, r2, r1
 8008b88:	0c19      	lsrs	r1, r3, #16
 8008b8a:	466b      	mov	r3, sp
 8008b8c:	8b9b      	ldrh	r3, [r3, #28]
 8008b8e:	1acb      	subs	r3, r1, r3
 8008b90:	1411      	asrs	r1, r2, #16
 8008b92:	185b      	adds	r3, r3, r1
 8008b94:	1419      	asrs	r1, r3, #16
 8008b96:	b292      	uxth	r2, r2
 8008b98:	041b      	lsls	r3, r3, #16
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	9b04      	ldr	r3, [sp, #16]
 8008b9e:	9106      	str	r1, [sp, #24]
 8008ba0:	c004      	stmia	r0!, {r2}
 8008ba2:	4563      	cmp	r3, ip
 8008ba4:	d2dc      	bcs.n	8008b60 <quorem+0x44>
 8008ba6:	682b      	ldr	r3, [r5, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d02d      	beq.n	8008c08 <quorem+0xec>
 8008bac:	9905      	ldr	r1, [sp, #20]
 8008bae:	0038      	movs	r0, r7
 8008bb0:	f7ff fb46 	bl	8008240 <__mcmp>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	db1f      	blt.n	8008bf8 <quorem+0xdc>
 8008bb8:	2500      	movs	r5, #0
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	9802      	ldr	r0, [sp, #8]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	9903      	ldr	r1, [sp, #12]
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	6802      	ldr	r2, [r0, #0]
 8008bc6:	c908      	ldmia	r1!, {r3}
 8008bc8:	b292      	uxth	r2, r2
 8008bca:	1955      	adds	r5, r2, r5
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	1aaa      	subs	r2, r5, r2
 8008bd0:	6805      	ldr	r5, [r0, #0]
 8008bd2:	0c1b      	lsrs	r3, r3, #16
 8008bd4:	0c2d      	lsrs	r5, r5, #16
 8008bd6:	1aeb      	subs	r3, r5, r3
 8008bd8:	1415      	asrs	r5, r2, #16
 8008bda:	195b      	adds	r3, r3, r5
 8008bdc:	141d      	asrs	r5, r3, #16
 8008bde:	b292      	uxth	r2, r2
 8008be0:	041b      	lsls	r3, r3, #16
 8008be2:	4313      	orrs	r3, r2
 8008be4:	c008      	stmia	r0!, {r3}
 8008be6:	9b04      	ldr	r3, [sp, #16]
 8008be8:	428b      	cmp	r3, r1
 8008bea:	d2eb      	bcs.n	8008bc4 <quorem+0xa8>
 8008bec:	9a02      	ldr	r2, [sp, #8]
 8008bee:	00a3      	lsls	r3, r4, #2
 8008bf0:	18d3      	adds	r3, r2, r3
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	2a00      	cmp	r2, #0
 8008bf6:	d011      	beq.n	8008c1c <quorem+0x100>
 8008bf8:	9e01      	ldr	r6, [sp, #4]
 8008bfa:	0030      	movs	r0, r6
 8008bfc:	b009      	add	sp, #36	; 0x24
 8008bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <quorem+0xf4>
 8008c06:	3c01      	subs	r4, #1
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	3d04      	subs	r5, #4
 8008c0c:	42ab      	cmp	r3, r5
 8008c0e:	d3f7      	bcc.n	8008c00 <quorem+0xe4>
 8008c10:	613c      	str	r4, [r7, #16]
 8008c12:	e7cb      	b.n	8008bac <quorem+0x90>
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	2a00      	cmp	r2, #0
 8008c18:	d104      	bne.n	8008c24 <quorem+0x108>
 8008c1a:	3c01      	subs	r4, #1
 8008c1c:	9a02      	ldr	r2, [sp, #8]
 8008c1e:	3b04      	subs	r3, #4
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d3f7      	bcc.n	8008c14 <quorem+0xf8>
 8008c24:	613c      	str	r4, [r7, #16]
 8008c26:	e7e7      	b.n	8008bf8 <quorem+0xdc>

08008c28 <_dtoa_r>:
 8008c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c2a:	0016      	movs	r6, r2
 8008c2c:	001f      	movs	r7, r3
 8008c2e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008c30:	b09b      	sub	sp, #108	; 0x6c
 8008c32:	9002      	str	r0, [sp, #8]
 8008c34:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8008c36:	9606      	str	r6, [sp, #24]
 8008c38:	9707      	str	r7, [sp, #28]
 8008c3a:	2c00      	cmp	r4, #0
 8008c3c:	d108      	bne.n	8008c50 <_dtoa_r+0x28>
 8008c3e:	2010      	movs	r0, #16
 8008c40:	f000 fdd2 	bl	80097e8 <malloc>
 8008c44:	9b02      	ldr	r3, [sp, #8]
 8008c46:	6258      	str	r0, [r3, #36]	; 0x24
 8008c48:	6044      	str	r4, [r0, #4]
 8008c4a:	6084      	str	r4, [r0, #8]
 8008c4c:	6004      	str	r4, [r0, #0]
 8008c4e:	60c4      	str	r4, [r0, #12]
 8008c50:	9b02      	ldr	r3, [sp, #8]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	6819      	ldr	r1, [r3, #0]
 8008c56:	2900      	cmp	r1, #0
 8008c58:	d00b      	beq.n	8008c72 <_dtoa_r+0x4a>
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	4093      	lsls	r3, r2
 8008c60:	604a      	str	r2, [r1, #4]
 8008c62:	608b      	str	r3, [r1, #8]
 8008c64:	9802      	ldr	r0, [sp, #8]
 8008c66:	f7ff f90f 	bl	8007e88 <_Bfree>
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	9b02      	ldr	r3, [sp, #8]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	2f00      	cmp	r7, #0
 8008c74:	da20      	bge.n	8008cb8 <_dtoa_r+0x90>
 8008c76:	2301      	movs	r3, #1
 8008c78:	602b      	str	r3, [r5, #0]
 8008c7a:	007b      	lsls	r3, r7, #1
 8008c7c:	085b      	lsrs	r3, r3, #1
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	9c07      	ldr	r4, [sp, #28]
 8008c82:	4bb2      	ldr	r3, [pc, #712]	; (8008f4c <_dtoa_r+0x324>)
 8008c84:	0022      	movs	r2, r4
 8008c86:	9317      	str	r3, [sp, #92]	; 0x5c
 8008c88:	401a      	ands	r2, r3
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d117      	bne.n	8008cbe <_dtoa_r+0x96>
 8008c8e:	4bb0      	ldr	r3, [pc, #704]	; (8008f50 <_dtoa_r+0x328>)
 8008c90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	9b06      	ldr	r3, [sp, #24]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d103      	bne.n	8008ca2 <_dtoa_r+0x7a>
 8008c9a:	0324      	lsls	r4, r4, #12
 8008c9c:	d101      	bne.n	8008ca2 <_dtoa_r+0x7a>
 8008c9e:	f000 fd87 	bl	80097b0 <_dtoa_r+0xb88>
 8008ca2:	4bac      	ldr	r3, [pc, #688]	; (8008f54 <_dtoa_r+0x32c>)
 8008ca4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ca6:	9308      	str	r3, [sp, #32]
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	d002      	beq.n	8008cb2 <_dtoa_r+0x8a>
 8008cac:	4baa      	ldr	r3, [pc, #680]	; (8008f58 <_dtoa_r+0x330>)
 8008cae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	9808      	ldr	r0, [sp, #32]
 8008cb4:	b01b      	add	sp, #108	; 0x6c
 8008cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cb8:	2300      	movs	r3, #0
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	e7e0      	b.n	8008c80 <_dtoa_r+0x58>
 8008cbe:	9e06      	ldr	r6, [sp, #24]
 8008cc0:	9f07      	ldr	r7, [sp, #28]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	0030      	movs	r0, r6
 8008cc8:	0039      	movs	r1, r7
 8008cca:	f7f7 fbad 	bl	8000428 <__aeabi_dcmpeq>
 8008cce:	1e05      	subs	r5, r0, #0
 8008cd0:	d00b      	beq.n	8008cea <_dtoa_r+0xc2>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	4ba0      	ldr	r3, [pc, #640]	; (8008f5c <_dtoa_r+0x334>)
 8008cda:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008cdc:	9308      	str	r3, [sp, #32]
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	d0e7      	beq.n	8008cb2 <_dtoa_r+0x8a>
 8008ce2:	4a9f      	ldr	r2, [pc, #636]	; (8008f60 <_dtoa_r+0x338>)
 8008ce4:	9924      	ldr	r1, [sp, #144]	; 0x90
 8008ce6:	600a      	str	r2, [r1, #0]
 8008ce8:	e7e3      	b.n	8008cb2 <_dtoa_r+0x8a>
 8008cea:	ab18      	add	r3, sp, #96	; 0x60
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	ab19      	add	r3, sp, #100	; 0x64
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	0032      	movs	r2, r6
 8008cf4:	003b      	movs	r3, r7
 8008cf6:	9802      	ldr	r0, [sp, #8]
 8008cf8:	f7ff fb20 	bl	800833c <__d2b>
 8008cfc:	0063      	lsls	r3, r4, #1
 8008cfe:	9003      	str	r0, [sp, #12]
 8008d00:	0d5b      	lsrs	r3, r3, #21
 8008d02:	d074      	beq.n	8008dee <_dtoa_r+0x1c6>
 8008d04:	033a      	lsls	r2, r7, #12
 8008d06:	4c97      	ldr	r4, [pc, #604]	; (8008f64 <_dtoa_r+0x33c>)
 8008d08:	0b12      	lsrs	r2, r2, #12
 8008d0a:	4314      	orrs	r4, r2
 8008d0c:	0021      	movs	r1, r4
 8008d0e:	4a96      	ldr	r2, [pc, #600]	; (8008f68 <_dtoa_r+0x340>)
 8008d10:	0030      	movs	r0, r6
 8008d12:	9516      	str	r5, [sp, #88]	; 0x58
 8008d14:	189e      	adds	r6, r3, r2
 8008d16:	2200      	movs	r2, #0
 8008d18:	4b94      	ldr	r3, [pc, #592]	; (8008f6c <_dtoa_r+0x344>)
 8008d1a:	f7f9 f95b 	bl	8001fd4 <__aeabi_dsub>
 8008d1e:	4a94      	ldr	r2, [pc, #592]	; (8008f70 <_dtoa_r+0x348>)
 8008d20:	4b94      	ldr	r3, [pc, #592]	; (8008f74 <_dtoa_r+0x34c>)
 8008d22:	f7f8 fee5 	bl	8001af0 <__aeabi_dmul>
 8008d26:	4a94      	ldr	r2, [pc, #592]	; (8008f78 <_dtoa_r+0x350>)
 8008d28:	4b94      	ldr	r3, [pc, #592]	; (8008f7c <_dtoa_r+0x354>)
 8008d2a:	f7f7 ffbb 	bl	8000ca4 <__aeabi_dadd>
 8008d2e:	0004      	movs	r4, r0
 8008d30:	0030      	movs	r0, r6
 8008d32:	000d      	movs	r5, r1
 8008d34:	f7f9 fccc 	bl	80026d0 <__aeabi_i2d>
 8008d38:	4a91      	ldr	r2, [pc, #580]	; (8008f80 <_dtoa_r+0x358>)
 8008d3a:	4b92      	ldr	r3, [pc, #584]	; (8008f84 <_dtoa_r+0x35c>)
 8008d3c:	f7f8 fed8 	bl	8001af0 <__aeabi_dmul>
 8008d40:	0002      	movs	r2, r0
 8008d42:	000b      	movs	r3, r1
 8008d44:	0020      	movs	r0, r4
 8008d46:	0029      	movs	r1, r5
 8008d48:	f7f7 ffac 	bl	8000ca4 <__aeabi_dadd>
 8008d4c:	0004      	movs	r4, r0
 8008d4e:	000d      	movs	r5, r1
 8008d50:	f7f9 fc88 	bl	8002664 <__aeabi_d2iz>
 8008d54:	2200      	movs	r2, #0
 8008d56:	0007      	movs	r7, r0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	0020      	movs	r0, r4
 8008d5c:	0029      	movs	r1, r5
 8008d5e:	f7f7 fb69 	bl	8000434 <__aeabi_dcmplt>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d009      	beq.n	8008d7a <_dtoa_r+0x152>
 8008d66:	0038      	movs	r0, r7
 8008d68:	f7f9 fcb2 	bl	80026d0 <__aeabi_i2d>
 8008d6c:	002b      	movs	r3, r5
 8008d6e:	0022      	movs	r2, r4
 8008d70:	f7f7 fb5a 	bl	8000428 <__aeabi_dcmpeq>
 8008d74:	4243      	negs	r3, r0
 8008d76:	4158      	adcs	r0, r3
 8008d78:	1a3f      	subs	r7, r7, r0
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	9314      	str	r3, [sp, #80]	; 0x50
 8008d7e:	2f16      	cmp	r7, #22
 8008d80:	d80d      	bhi.n	8008d9e <_dtoa_r+0x176>
 8008d82:	4981      	ldr	r1, [pc, #516]	; (8008f88 <_dtoa_r+0x360>)
 8008d84:	00fb      	lsls	r3, r7, #3
 8008d86:	18c9      	adds	r1, r1, r3
 8008d88:	6808      	ldr	r0, [r1, #0]
 8008d8a:	6849      	ldr	r1, [r1, #4]
 8008d8c:	9a06      	ldr	r2, [sp, #24]
 8008d8e:	9b07      	ldr	r3, [sp, #28]
 8008d90:	f7f7 fb64 	bl	800045c <__aeabi_dcmpgt>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d046      	beq.n	8008e26 <_dtoa_r+0x1fe>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	3f01      	subs	r7, #1
 8008d9c:	9314      	str	r3, [sp, #80]	; 0x50
 8008d9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008da0:	1b9e      	subs	r6, r3, r6
 8008da2:	2300      	movs	r3, #0
 8008da4:	930a      	str	r3, [sp, #40]	; 0x28
 8008da6:	0033      	movs	r3, r6
 8008da8:	3b01      	subs	r3, #1
 8008daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dac:	d504      	bpl.n	8008db8 <_dtoa_r+0x190>
 8008dae:	2301      	movs	r3, #1
 8008db0:	1b9b      	subs	r3, r3, r6
 8008db2:	930a      	str	r3, [sp, #40]	; 0x28
 8008db4:	2300      	movs	r3, #0
 8008db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db8:	2f00      	cmp	r7, #0
 8008dba:	db36      	blt.n	8008e2a <_dtoa_r+0x202>
 8008dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dbe:	9711      	str	r7, [sp, #68]	; 0x44
 8008dc0:	19db      	adds	r3, r3, r7
 8008dc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9304      	str	r3, [sp, #16]
 8008dc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008dca:	2401      	movs	r4, #1
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	d900      	bls.n	8008dd2 <_dtoa_r+0x1aa>
 8008dd0:	e084      	b.n	8008edc <_dtoa_r+0x2b4>
 8008dd2:	2b05      	cmp	r3, #5
 8008dd4:	dd02      	ble.n	8008ddc <_dtoa_r+0x1b4>
 8008dd6:	2400      	movs	r4, #0
 8008dd8:	3b04      	subs	r3, #4
 8008dda:	9320      	str	r3, [sp, #128]	; 0x80
 8008ddc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008dde:	1e98      	subs	r0, r3, #2
 8008de0:	2803      	cmp	r0, #3
 8008de2:	d900      	bls.n	8008de6 <_dtoa_r+0x1be>
 8008de4:	e084      	b.n	8008ef0 <_dtoa_r+0x2c8>
 8008de6:	f7f7 f98f 	bl	8000108 <__gnu_thumb1_case_uqi>
 8008dea:	7775      	.short	0x7775
 8008dec:	6a28      	.short	0x6a28
 8008dee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008df2:	189e      	adds	r6, r3, r2
 8008df4:	4b65      	ldr	r3, [pc, #404]	; (8008f8c <_dtoa_r+0x364>)
 8008df6:	18f2      	adds	r2, r6, r3
 8008df8:	2a20      	cmp	r2, #32
 8008dfa:	dd0f      	ble.n	8008e1c <_dtoa_r+0x1f4>
 8008dfc:	2340      	movs	r3, #64	; 0x40
 8008dfe:	1a9b      	subs	r3, r3, r2
 8008e00:	409c      	lsls	r4, r3
 8008e02:	4b63      	ldr	r3, [pc, #396]	; (8008f90 <_dtoa_r+0x368>)
 8008e04:	9806      	ldr	r0, [sp, #24]
 8008e06:	18f3      	adds	r3, r6, r3
 8008e08:	40d8      	lsrs	r0, r3
 8008e0a:	4320      	orrs	r0, r4
 8008e0c:	f7f9 fc9a 	bl	8002744 <__aeabi_ui2d>
 8008e10:	2301      	movs	r3, #1
 8008e12:	4c60      	ldr	r4, [pc, #384]	; (8008f94 <_dtoa_r+0x36c>)
 8008e14:	3e01      	subs	r6, #1
 8008e16:	1909      	adds	r1, r1, r4
 8008e18:	9316      	str	r3, [sp, #88]	; 0x58
 8008e1a:	e77c      	b.n	8008d16 <_dtoa_r+0xee>
 8008e1c:	2320      	movs	r3, #32
 8008e1e:	9806      	ldr	r0, [sp, #24]
 8008e20:	1a9b      	subs	r3, r3, r2
 8008e22:	4098      	lsls	r0, r3
 8008e24:	e7f2      	b.n	8008e0c <_dtoa_r+0x1e4>
 8008e26:	9014      	str	r0, [sp, #80]	; 0x50
 8008e28:	e7b9      	b.n	8008d9e <_dtoa_r+0x176>
 8008e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e2c:	1bdb      	subs	r3, r3, r7
 8008e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e30:	427b      	negs	r3, r7
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	2300      	movs	r3, #0
 8008e36:	9311      	str	r3, [sp, #68]	; 0x44
 8008e38:	e7c6      	b.n	8008dc8 <_dtoa_r+0x1a0>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	930d      	str	r3, [sp, #52]	; 0x34
 8008e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	dd59      	ble.n	8008ef8 <_dtoa_r+0x2d0>
 8008e44:	930c      	str	r3, [sp, #48]	; 0x30
 8008e46:	9309      	str	r3, [sp, #36]	; 0x24
 8008e48:	9a02      	ldr	r2, [sp, #8]
 8008e4a:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	606a      	str	r2, [r5, #4]
 8008e50:	3204      	adds	r2, #4
 8008e52:	0010      	movs	r0, r2
 8008e54:	3014      	adds	r0, #20
 8008e56:	6869      	ldr	r1, [r5, #4]
 8008e58:	4298      	cmp	r0, r3
 8008e5a:	d952      	bls.n	8008f02 <_dtoa_r+0x2da>
 8008e5c:	9802      	ldr	r0, [sp, #8]
 8008e5e:	f7fe ffdb 	bl	8007e18 <_Balloc>
 8008e62:	9b02      	ldr	r3, [sp, #8]
 8008e64:	6028      	str	r0, [r5, #0]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	9308      	str	r3, [sp, #32]
 8008e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e6e:	2b0e      	cmp	r3, #14
 8008e70:	d900      	bls.n	8008e74 <_dtoa_r+0x24c>
 8008e72:	e10a      	b.n	800908a <_dtoa_r+0x462>
 8008e74:	2c00      	cmp	r4, #0
 8008e76:	d100      	bne.n	8008e7a <_dtoa_r+0x252>
 8008e78:	e107      	b.n	800908a <_dtoa_r+0x462>
 8008e7a:	9b06      	ldr	r3, [sp, #24]
 8008e7c:	9c07      	ldr	r4, [sp, #28]
 8008e7e:	9312      	str	r3, [sp, #72]	; 0x48
 8008e80:	9413      	str	r4, [sp, #76]	; 0x4c
 8008e82:	2f00      	cmp	r7, #0
 8008e84:	dc00      	bgt.n	8008e88 <_dtoa_r+0x260>
 8008e86:	e089      	b.n	8008f9c <_dtoa_r+0x374>
 8008e88:	210f      	movs	r1, #15
 8008e8a:	003a      	movs	r2, r7
 8008e8c:	4b3e      	ldr	r3, [pc, #248]	; (8008f88 <_dtoa_r+0x360>)
 8008e8e:	400a      	ands	r2, r1
 8008e90:	00d2      	lsls	r2, r2, #3
 8008e92:	189b      	adds	r3, r3, r2
 8008e94:	681d      	ldr	r5, [r3, #0]
 8008e96:	685e      	ldr	r6, [r3, #4]
 8008e98:	2302      	movs	r3, #2
 8008e9a:	113c      	asrs	r4, r7, #4
 8008e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e9e:	06e3      	lsls	r3, r4, #27
 8008ea0:	d50b      	bpl.n	8008eba <_dtoa_r+0x292>
 8008ea2:	4b3d      	ldr	r3, [pc, #244]	; (8008f98 <_dtoa_r+0x370>)
 8008ea4:	400c      	ands	r4, r1
 8008ea6:	6a1a      	ldr	r2, [r3, #32]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008eac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008eae:	f7f8 fa15 	bl	80012dc <__aeabi_ddiv>
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	9006      	str	r0, [sp, #24]
 8008eb6:	9107      	str	r1, [sp, #28]
 8008eb8:	930e      	str	r3, [sp, #56]	; 0x38
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e03a      	b.n	8008f34 <_dtoa_r+0x30c>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	930d      	str	r3, [sp, #52]	; 0x34
 8008ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ec4:	18fb      	adds	r3, r7, r3
 8008ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ec8:	3301      	adds	r3, #1
 8008eca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dcbb      	bgt.n	8008e48 <_dtoa_r+0x220>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e7b9      	b.n	8008e48 <_dtoa_r+0x220>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	e7b1      	b.n	8008e3c <_dtoa_r+0x214>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e7f1      	b.n	8008ec0 <_dtoa_r+0x298>
 8008edc:	2300      	movs	r3, #0
 8008ede:	940d      	str	r4, [sp, #52]	; 0x34
 8008ee0:	9320      	str	r3, [sp, #128]	; 0x80
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eea:	3313      	adds	r3, #19
 8008eec:	9221      	str	r2, [sp, #132]	; 0x84
 8008eee:	e7ab      	b.n	8008e48 <_dtoa_r+0x220>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ef4:	3b02      	subs	r3, #2
 8008ef6:	e7f5      	b.n	8008ee4 <_dtoa_r+0x2bc>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	930c      	str	r3, [sp, #48]	; 0x30
 8008efc:	9309      	str	r3, [sp, #36]	; 0x24
 8008efe:	001a      	movs	r2, r3
 8008f00:	e7f4      	b.n	8008eec <_dtoa_r+0x2c4>
 8008f02:	3101      	adds	r1, #1
 8008f04:	6069      	str	r1, [r5, #4]
 8008f06:	0052      	lsls	r2, r2, #1
 8008f08:	e7a3      	b.n	8008e52 <_dtoa_r+0x22a>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	421c      	tst	r4, r3
 8008f0e:	d00e      	beq.n	8008f2e <_dtoa_r+0x306>
 8008f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f12:	4a21      	ldr	r2, [pc, #132]	; (8008f98 <_dtoa_r+0x370>)
 8008f14:	3301      	adds	r3, #1
 8008f16:	930e      	str	r3, [sp, #56]	; 0x38
 8008f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f1a:	0028      	movs	r0, r5
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	189b      	adds	r3, r3, r2
 8008f20:	0031      	movs	r1, r6
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f7f8 fde3 	bl	8001af0 <__aeabi_dmul>
 8008f2a:	0005      	movs	r5, r0
 8008f2c:	000e      	movs	r6, r1
 8008f2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f30:	1064      	asrs	r4, r4, #1
 8008f32:	3301      	adds	r3, #1
 8008f34:	9310      	str	r3, [sp, #64]	; 0x40
 8008f36:	2c00      	cmp	r4, #0
 8008f38:	d1e7      	bne.n	8008f0a <_dtoa_r+0x2e2>
 8008f3a:	9806      	ldr	r0, [sp, #24]
 8008f3c:	9907      	ldr	r1, [sp, #28]
 8008f3e:	002a      	movs	r2, r5
 8008f40:	0033      	movs	r3, r6
 8008f42:	f7f8 f9cb 	bl	80012dc <__aeabi_ddiv>
 8008f46:	9006      	str	r0, [sp, #24]
 8008f48:	9107      	str	r1, [sp, #28]
 8008f4a:	e042      	b.n	8008fd2 <_dtoa_r+0x3aa>
 8008f4c:	7ff00000 	.word	0x7ff00000
 8008f50:	0000270f 	.word	0x0000270f
 8008f54:	0800b0e8 	.word	0x0800b0e8
 8008f58:	0800b0eb 	.word	0x0800b0eb
 8008f5c:	0800b0ec 	.word	0x0800b0ec
 8008f60:	0800b0ed 	.word	0x0800b0ed
 8008f64:	3ff00000 	.word	0x3ff00000
 8008f68:	fffffc01 	.word	0xfffffc01
 8008f6c:	3ff80000 	.word	0x3ff80000
 8008f70:	636f4361 	.word	0x636f4361
 8008f74:	3fd287a7 	.word	0x3fd287a7
 8008f78:	8b60c8b3 	.word	0x8b60c8b3
 8008f7c:	3fc68a28 	.word	0x3fc68a28
 8008f80:	509f79fb 	.word	0x509f79fb
 8008f84:	3fd34413 	.word	0x3fd34413
 8008f88:	0800afd8 	.word	0x0800afd8
 8008f8c:	00000432 	.word	0x00000432
 8008f90:	00000412 	.word	0x00000412
 8008f94:	fe100000 	.word	0xfe100000
 8008f98:	0800afb0 	.word	0x0800afb0
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	930e      	str	r3, [sp, #56]	; 0x38
 8008fa0:	2f00      	cmp	r7, #0
 8008fa2:	d016      	beq.n	8008fd2 <_dtoa_r+0x3aa>
 8008fa4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008fa6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008fa8:	427c      	negs	r4, r7
 8008faa:	330d      	adds	r3, #13
 8008fac:	4023      	ands	r3, r4
 8008fae:	4ace      	ldr	r2, [pc, #824]	; (80092e8 <_dtoa_r+0x6c0>)
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	18d3      	adds	r3, r2, r3
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f7f8 fd9a 	bl	8001af0 <__aeabi_dmul>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2601      	movs	r6, #1
 8008fc0:	001d      	movs	r5, r3
 8008fc2:	9006      	str	r0, [sp, #24]
 8008fc4:	9107      	str	r1, [sp, #28]
 8008fc6:	1124      	asrs	r4, r4, #4
 8008fc8:	2c00      	cmp	r4, #0
 8008fca:	d000      	beq.n	8008fce <_dtoa_r+0x3a6>
 8008fcc:	e08c      	b.n	80090e8 <_dtoa_r+0x4c0>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1b9      	bne.n	8008f46 <_dtoa_r+0x31e>
 8008fd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d100      	bne.n	8008fda <_dtoa_r+0x3b2>
 8008fd8:	e096      	b.n	8009108 <_dtoa_r+0x4e0>
 8008fda:	9c06      	ldr	r4, [sp, #24]
 8008fdc:	9d07      	ldr	r5, [sp, #28]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	4bc2      	ldr	r3, [pc, #776]	; (80092ec <_dtoa_r+0x6c4>)
 8008fe2:	0020      	movs	r0, r4
 8008fe4:	0029      	movs	r1, r5
 8008fe6:	f7f7 fa25 	bl	8000434 <__aeabi_dcmplt>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d100      	bne.n	8008ff0 <_dtoa_r+0x3c8>
 8008fee:	e08b      	b.n	8009108 <_dtoa_r+0x4e0>
 8008ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d100      	bne.n	8008ff8 <_dtoa_r+0x3d0>
 8008ff6:	e087      	b.n	8009108 <_dtoa_r+0x4e0>
 8008ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dd41      	ble.n	8009082 <_dtoa_r+0x45a>
 8008ffe:	4bbc      	ldr	r3, [pc, #752]	; (80092f0 <_dtoa_r+0x6c8>)
 8009000:	2200      	movs	r2, #0
 8009002:	0020      	movs	r0, r4
 8009004:	0029      	movs	r1, r5
 8009006:	f7f8 fd73 	bl	8001af0 <__aeabi_dmul>
 800900a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800900c:	9006      	str	r0, [sp, #24]
 800900e:	9107      	str	r1, [sp, #28]
 8009010:	3301      	adds	r3, #1
 8009012:	930e      	str	r3, [sp, #56]	; 0x38
 8009014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009016:	1e7e      	subs	r6, r7, #1
 8009018:	980e      	ldr	r0, [sp, #56]	; 0x38
 800901a:	9310      	str	r3, [sp, #64]	; 0x40
 800901c:	f7f9 fb58 	bl	80026d0 <__aeabi_i2d>
 8009020:	9a06      	ldr	r2, [sp, #24]
 8009022:	9b07      	ldr	r3, [sp, #28]
 8009024:	f7f8 fd64 	bl	8001af0 <__aeabi_dmul>
 8009028:	2200      	movs	r2, #0
 800902a:	4bb2      	ldr	r3, [pc, #712]	; (80092f4 <_dtoa_r+0x6cc>)
 800902c:	f7f7 fe3a 	bl	8000ca4 <__aeabi_dadd>
 8009030:	4ab1      	ldr	r2, [pc, #708]	; (80092f8 <_dtoa_r+0x6d0>)
 8009032:	900e      	str	r0, [sp, #56]	; 0x38
 8009034:	910f      	str	r1, [sp, #60]	; 0x3c
 8009036:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009038:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800903a:	4694      	mov	ip, r2
 800903c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800903e:	4463      	add	r3, ip
 8009040:	9315      	str	r3, [sp, #84]	; 0x54
 8009042:	001d      	movs	r5, r3
 8009044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d161      	bne.n	800910e <_dtoa_r+0x4e6>
 800904a:	9806      	ldr	r0, [sp, #24]
 800904c:	9907      	ldr	r1, [sp, #28]
 800904e:	2200      	movs	r2, #0
 8009050:	4baa      	ldr	r3, [pc, #680]	; (80092fc <_dtoa_r+0x6d4>)
 8009052:	f7f8 ffbf 	bl	8001fd4 <__aeabi_dsub>
 8009056:	0022      	movs	r2, r4
 8009058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800905a:	9006      	str	r0, [sp, #24]
 800905c:	9107      	str	r1, [sp, #28]
 800905e:	f7f7 f9fd 	bl	800045c <__aeabi_dcmpgt>
 8009062:	2800      	cmp	r0, #0
 8009064:	d000      	beq.n	8009068 <_dtoa_r+0x440>
 8009066:	e2a8      	b.n	80095ba <_dtoa_r+0x992>
 8009068:	48a5      	ldr	r0, [pc, #660]	; (8009300 <_dtoa_r+0x6d8>)
 800906a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800906c:	4684      	mov	ip, r0
 800906e:	4461      	add	r1, ip
 8009070:	000b      	movs	r3, r1
 8009072:	9806      	ldr	r0, [sp, #24]
 8009074:	9907      	ldr	r1, [sp, #28]
 8009076:	0022      	movs	r2, r4
 8009078:	f7f7 f9dc 	bl	8000434 <__aeabi_dcmplt>
 800907c:	2800      	cmp	r0, #0
 800907e:	d000      	beq.n	8009082 <_dtoa_r+0x45a>
 8009080:	e295      	b.n	80095ae <_dtoa_r+0x986>
 8009082:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009084:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009086:	9306      	str	r3, [sp, #24]
 8009088:	9407      	str	r4, [sp, #28]
 800908a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800908c:	2b00      	cmp	r3, #0
 800908e:	da00      	bge.n	8009092 <_dtoa_r+0x46a>
 8009090:	e15c      	b.n	800934c <_dtoa_r+0x724>
 8009092:	2f0e      	cmp	r7, #14
 8009094:	dd00      	ble.n	8009098 <_dtoa_r+0x470>
 8009096:	e159      	b.n	800934c <_dtoa_r+0x724>
 8009098:	4b93      	ldr	r3, [pc, #588]	; (80092e8 <_dtoa_r+0x6c0>)
 800909a:	00fa      	lsls	r2, r7, #3
 800909c:	189b      	adds	r3, r3, r2
 800909e:	685c      	ldr	r4, [r3, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	9405      	str	r4, [sp, #20]
 80090a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	db00      	blt.n	80090ae <_dtoa_r+0x486>
 80090ac:	e0d8      	b.n	8009260 <_dtoa_r+0x638>
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dd00      	ble.n	80090b6 <_dtoa_r+0x48e>
 80090b4:	e0d4      	b.n	8009260 <_dtoa_r+0x638>
 80090b6:	d000      	beq.n	80090ba <_dtoa_r+0x492>
 80090b8:	e27d      	b.n	80095b6 <_dtoa_r+0x98e>
 80090ba:	9804      	ldr	r0, [sp, #16]
 80090bc:	9905      	ldr	r1, [sp, #20]
 80090be:	2200      	movs	r2, #0
 80090c0:	4b8e      	ldr	r3, [pc, #568]	; (80092fc <_dtoa_r+0x6d4>)
 80090c2:	f7f8 fd15 	bl	8001af0 <__aeabi_dmul>
 80090c6:	9a06      	ldr	r2, [sp, #24]
 80090c8:	9b07      	ldr	r3, [sp, #28]
 80090ca:	f7f7 f9d1 	bl	8000470 <__aeabi_dcmpge>
 80090ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	001e      	movs	r6, r3
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d000      	beq.n	80090da <_dtoa_r+0x4b2>
 80090d8:	e24f      	b.n	800957a <_dtoa_r+0x952>
 80090da:	9b08      	ldr	r3, [sp, #32]
 80090dc:	9a08      	ldr	r2, [sp, #32]
 80090de:	1c5d      	adds	r5, r3, #1
 80090e0:	2331      	movs	r3, #49	; 0x31
 80090e2:	3701      	adds	r7, #1
 80090e4:	7013      	strb	r3, [r2, #0]
 80090e6:	e24b      	b.n	8009580 <_dtoa_r+0x958>
 80090e8:	4234      	tst	r4, r6
 80090ea:	d00a      	beq.n	8009102 <_dtoa_r+0x4da>
 80090ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090ee:	4a85      	ldr	r2, [pc, #532]	; (8009304 <_dtoa_r+0x6dc>)
 80090f0:	3301      	adds	r3, #1
 80090f2:	930e      	str	r3, [sp, #56]	; 0x38
 80090f4:	00eb      	lsls	r3, r5, #3
 80090f6:	189b      	adds	r3, r3, r2
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f7f8 fcf8 	bl	8001af0 <__aeabi_dmul>
 8009100:	0033      	movs	r3, r6
 8009102:	1064      	asrs	r4, r4, #1
 8009104:	3501      	adds	r5, #1
 8009106:	e75f      	b.n	8008fc8 <_dtoa_r+0x3a0>
 8009108:	003e      	movs	r6, r7
 800910a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910c:	e784      	b.n	8009018 <_dtoa_r+0x3f0>
 800910e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009110:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009112:	1e5a      	subs	r2, r3, #1
 8009114:	4b74      	ldr	r3, [pc, #464]	; (80092e8 <_dtoa_r+0x6c0>)
 8009116:	00d2      	lsls	r2, r2, #3
 8009118:	189b      	adds	r3, r3, r2
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	2900      	cmp	r1, #0
 8009120:	d049      	beq.n	80091b6 <_dtoa_r+0x58e>
 8009122:	2000      	movs	r0, #0
 8009124:	4978      	ldr	r1, [pc, #480]	; (8009308 <_dtoa_r+0x6e0>)
 8009126:	f7f8 f8d9 	bl	80012dc <__aeabi_ddiv>
 800912a:	002b      	movs	r3, r5
 800912c:	0022      	movs	r2, r4
 800912e:	f7f8 ff51 	bl	8001fd4 <__aeabi_dsub>
 8009132:	9b08      	ldr	r3, [sp, #32]
 8009134:	900e      	str	r0, [sp, #56]	; 0x38
 8009136:	910f      	str	r1, [sp, #60]	; 0x3c
 8009138:	9315      	str	r3, [sp, #84]	; 0x54
 800913a:	9806      	ldr	r0, [sp, #24]
 800913c:	9907      	ldr	r1, [sp, #28]
 800913e:	f7f9 fa91 	bl	8002664 <__aeabi_d2iz>
 8009142:	0004      	movs	r4, r0
 8009144:	f7f9 fac4 	bl	80026d0 <__aeabi_i2d>
 8009148:	0002      	movs	r2, r0
 800914a:	000b      	movs	r3, r1
 800914c:	9806      	ldr	r0, [sp, #24]
 800914e:	9907      	ldr	r1, [sp, #28]
 8009150:	f7f8 ff40 	bl	8001fd4 <__aeabi_dsub>
 8009154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009156:	3430      	adds	r4, #48	; 0x30
 8009158:	1c5d      	adds	r5, r3, #1
 800915a:	701c      	strb	r4, [r3, #0]
 800915c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800915e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009160:	9006      	str	r0, [sp, #24]
 8009162:	9107      	str	r1, [sp, #28]
 8009164:	f7f7 f966 	bl	8000434 <__aeabi_dcmplt>
 8009168:	2800      	cmp	r0, #0
 800916a:	d16c      	bne.n	8009246 <_dtoa_r+0x61e>
 800916c:	9a06      	ldr	r2, [sp, #24]
 800916e:	9b07      	ldr	r3, [sp, #28]
 8009170:	2000      	movs	r0, #0
 8009172:	495e      	ldr	r1, [pc, #376]	; (80092ec <_dtoa_r+0x6c4>)
 8009174:	f7f8 ff2e 	bl	8001fd4 <__aeabi_dsub>
 8009178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800917a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800917c:	f7f7 f95a 	bl	8000434 <__aeabi_dcmplt>
 8009180:	2800      	cmp	r0, #0
 8009182:	d000      	beq.n	8009186 <_dtoa_r+0x55e>
 8009184:	e0c3      	b.n	800930e <_dtoa_r+0x6e6>
 8009186:	9b08      	ldr	r3, [sp, #32]
 8009188:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800918a:	1aeb      	subs	r3, r5, r3
 800918c:	429a      	cmp	r2, r3
 800918e:	dc00      	bgt.n	8009192 <_dtoa_r+0x56a>
 8009190:	e777      	b.n	8009082 <_dtoa_r+0x45a>
 8009192:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009194:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009196:	2200      	movs	r2, #0
 8009198:	4b55      	ldr	r3, [pc, #340]	; (80092f0 <_dtoa_r+0x6c8>)
 800919a:	f7f8 fca9 	bl	8001af0 <__aeabi_dmul>
 800919e:	2200      	movs	r2, #0
 80091a0:	900e      	str	r0, [sp, #56]	; 0x38
 80091a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80091a4:	9806      	ldr	r0, [sp, #24]
 80091a6:	9907      	ldr	r1, [sp, #28]
 80091a8:	4b51      	ldr	r3, [pc, #324]	; (80092f0 <_dtoa_r+0x6c8>)
 80091aa:	f7f8 fca1 	bl	8001af0 <__aeabi_dmul>
 80091ae:	9515      	str	r5, [sp, #84]	; 0x54
 80091b0:	9006      	str	r0, [sp, #24]
 80091b2:	9107      	str	r1, [sp, #28]
 80091b4:	e7c1      	b.n	800913a <_dtoa_r+0x512>
 80091b6:	0020      	movs	r0, r4
 80091b8:	0029      	movs	r1, r5
 80091ba:	f7f8 fc99 	bl	8001af0 <__aeabi_dmul>
 80091be:	9c08      	ldr	r4, [sp, #32]
 80091c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091c2:	0023      	movs	r3, r4
 80091c4:	4694      	mov	ip, r2
 80091c6:	900e      	str	r0, [sp, #56]	; 0x38
 80091c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80091ca:	4463      	add	r3, ip
 80091cc:	9315      	str	r3, [sp, #84]	; 0x54
 80091ce:	9806      	ldr	r0, [sp, #24]
 80091d0:	9907      	ldr	r1, [sp, #28]
 80091d2:	f7f9 fa47 	bl	8002664 <__aeabi_d2iz>
 80091d6:	0005      	movs	r5, r0
 80091d8:	f7f9 fa7a 	bl	80026d0 <__aeabi_i2d>
 80091dc:	000b      	movs	r3, r1
 80091de:	0002      	movs	r2, r0
 80091e0:	9806      	ldr	r0, [sp, #24]
 80091e2:	9907      	ldr	r1, [sp, #28]
 80091e4:	f7f8 fef6 	bl	8001fd4 <__aeabi_dsub>
 80091e8:	3530      	adds	r5, #48	; 0x30
 80091ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091ec:	7025      	strb	r5, [r4, #0]
 80091ee:	3401      	adds	r4, #1
 80091f0:	9006      	str	r0, [sp, #24]
 80091f2:	9107      	str	r1, [sp, #28]
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	d12a      	bne.n	800924e <_dtoa_r+0x626>
 80091f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80091fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80091fc:	9a08      	ldr	r2, [sp, #32]
 80091fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009200:	4694      	mov	ip, r2
 8009202:	4463      	add	r3, ip
 8009204:	2200      	movs	r2, #0
 8009206:	001d      	movs	r5, r3
 8009208:	4b3f      	ldr	r3, [pc, #252]	; (8009308 <_dtoa_r+0x6e0>)
 800920a:	f7f7 fd4b 	bl	8000ca4 <__aeabi_dadd>
 800920e:	0002      	movs	r2, r0
 8009210:	000b      	movs	r3, r1
 8009212:	9806      	ldr	r0, [sp, #24]
 8009214:	9907      	ldr	r1, [sp, #28]
 8009216:	f7f7 f921 	bl	800045c <__aeabi_dcmpgt>
 800921a:	2800      	cmp	r0, #0
 800921c:	d000      	beq.n	8009220 <_dtoa_r+0x5f8>
 800921e:	e076      	b.n	800930e <_dtoa_r+0x6e6>
 8009220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009224:	2000      	movs	r0, #0
 8009226:	4938      	ldr	r1, [pc, #224]	; (8009308 <_dtoa_r+0x6e0>)
 8009228:	f7f8 fed4 	bl	8001fd4 <__aeabi_dsub>
 800922c:	0002      	movs	r2, r0
 800922e:	000b      	movs	r3, r1
 8009230:	9806      	ldr	r0, [sp, #24]
 8009232:	9907      	ldr	r1, [sp, #28]
 8009234:	f7f7 f8fe 	bl	8000434 <__aeabi_dcmplt>
 8009238:	2800      	cmp	r0, #0
 800923a:	d100      	bne.n	800923e <_dtoa_r+0x616>
 800923c:	e721      	b.n	8009082 <_dtoa_r+0x45a>
 800923e:	1e6b      	subs	r3, r5, #1
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	2a30      	cmp	r2, #48	; 0x30
 8009244:	d001      	beq.n	800924a <_dtoa_r+0x622>
 8009246:	0037      	movs	r7, r6
 8009248:	e03f      	b.n	80092ca <_dtoa_r+0x6a2>
 800924a:	001d      	movs	r5, r3
 800924c:	e7f7      	b.n	800923e <_dtoa_r+0x616>
 800924e:	9806      	ldr	r0, [sp, #24]
 8009250:	9907      	ldr	r1, [sp, #28]
 8009252:	2200      	movs	r2, #0
 8009254:	4b26      	ldr	r3, [pc, #152]	; (80092f0 <_dtoa_r+0x6c8>)
 8009256:	f7f8 fc4b 	bl	8001af0 <__aeabi_dmul>
 800925a:	9006      	str	r0, [sp, #24]
 800925c:	9107      	str	r1, [sp, #28]
 800925e:	e7b6      	b.n	80091ce <_dtoa_r+0x5a6>
 8009260:	9e08      	ldr	r6, [sp, #32]
 8009262:	9a04      	ldr	r2, [sp, #16]
 8009264:	9b05      	ldr	r3, [sp, #20]
 8009266:	9806      	ldr	r0, [sp, #24]
 8009268:	9907      	ldr	r1, [sp, #28]
 800926a:	f7f8 f837 	bl	80012dc <__aeabi_ddiv>
 800926e:	f7f9 f9f9 	bl	8002664 <__aeabi_d2iz>
 8009272:	0004      	movs	r4, r0
 8009274:	f7f9 fa2c 	bl	80026d0 <__aeabi_i2d>
 8009278:	9a04      	ldr	r2, [sp, #16]
 800927a:	9b05      	ldr	r3, [sp, #20]
 800927c:	f7f8 fc38 	bl	8001af0 <__aeabi_dmul>
 8009280:	0002      	movs	r2, r0
 8009282:	000b      	movs	r3, r1
 8009284:	9806      	ldr	r0, [sp, #24]
 8009286:	9907      	ldr	r1, [sp, #28]
 8009288:	f7f8 fea4 	bl	8001fd4 <__aeabi_dsub>
 800928c:	0023      	movs	r3, r4
 800928e:	3330      	adds	r3, #48	; 0x30
 8009290:	7033      	strb	r3, [r6, #0]
 8009292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009294:	9b08      	ldr	r3, [sp, #32]
 8009296:	1c75      	adds	r5, r6, #1
 8009298:	1aeb      	subs	r3, r5, r3
 800929a:	429a      	cmp	r2, r3
 800929c:	d148      	bne.n	8009330 <_dtoa_r+0x708>
 800929e:	0002      	movs	r2, r0
 80092a0:	000b      	movs	r3, r1
 80092a2:	f7f7 fcff 	bl	8000ca4 <__aeabi_dadd>
 80092a6:	9a04      	ldr	r2, [sp, #16]
 80092a8:	9b05      	ldr	r3, [sp, #20]
 80092aa:	9006      	str	r0, [sp, #24]
 80092ac:	9107      	str	r1, [sp, #28]
 80092ae:	f7f7 f8d5 	bl	800045c <__aeabi_dcmpgt>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d12a      	bne.n	800930c <_dtoa_r+0x6e4>
 80092b6:	9a04      	ldr	r2, [sp, #16]
 80092b8:	9b05      	ldr	r3, [sp, #20]
 80092ba:	9806      	ldr	r0, [sp, #24]
 80092bc:	9907      	ldr	r1, [sp, #28]
 80092be:	f7f7 f8b3 	bl	8000428 <__aeabi_dcmpeq>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d001      	beq.n	80092ca <_dtoa_r+0x6a2>
 80092c6:	07e3      	lsls	r3, r4, #31
 80092c8:	d420      	bmi.n	800930c <_dtoa_r+0x6e4>
 80092ca:	9903      	ldr	r1, [sp, #12]
 80092cc:	9802      	ldr	r0, [sp, #8]
 80092ce:	f7fe fddb 	bl	8007e88 <_Bfree>
 80092d2:	2300      	movs	r3, #0
 80092d4:	702b      	strb	r3, [r5, #0]
 80092d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092d8:	3701      	adds	r7, #1
 80092da:	601f      	str	r7, [r3, #0]
 80092dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d100      	bne.n	80092e4 <_dtoa_r+0x6bc>
 80092e2:	e4e6      	b.n	8008cb2 <_dtoa_r+0x8a>
 80092e4:	601d      	str	r5, [r3, #0]
 80092e6:	e4e4      	b.n	8008cb2 <_dtoa_r+0x8a>
 80092e8:	0800afd8 	.word	0x0800afd8
 80092ec:	3ff00000 	.word	0x3ff00000
 80092f0:	40240000 	.word	0x40240000
 80092f4:	401c0000 	.word	0x401c0000
 80092f8:	fcc00000 	.word	0xfcc00000
 80092fc:	40140000 	.word	0x40140000
 8009300:	7cc00000 	.word	0x7cc00000
 8009304:	0800afb0 	.word	0x0800afb0
 8009308:	3fe00000 	.word	0x3fe00000
 800930c:	003e      	movs	r6, r7
 800930e:	1e6b      	subs	r3, r5, #1
 8009310:	781a      	ldrb	r2, [r3, #0]
 8009312:	2a39      	cmp	r2, #57	; 0x39
 8009314:	d106      	bne.n	8009324 <_dtoa_r+0x6fc>
 8009316:	9a08      	ldr	r2, [sp, #32]
 8009318:	429a      	cmp	r2, r3
 800931a:	d107      	bne.n	800932c <_dtoa_r+0x704>
 800931c:	2330      	movs	r3, #48	; 0x30
 800931e:	7013      	strb	r3, [r2, #0]
 8009320:	0013      	movs	r3, r2
 8009322:	3601      	adds	r6, #1
 8009324:	781a      	ldrb	r2, [r3, #0]
 8009326:	3201      	adds	r2, #1
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	e78c      	b.n	8009246 <_dtoa_r+0x61e>
 800932c:	001d      	movs	r5, r3
 800932e:	e7ee      	b.n	800930e <_dtoa_r+0x6e6>
 8009330:	2200      	movs	r2, #0
 8009332:	4ba4      	ldr	r3, [pc, #656]	; (80095c4 <_dtoa_r+0x99c>)
 8009334:	f7f8 fbdc 	bl	8001af0 <__aeabi_dmul>
 8009338:	2200      	movs	r2, #0
 800933a:	2300      	movs	r3, #0
 800933c:	9006      	str	r0, [sp, #24]
 800933e:	9107      	str	r1, [sp, #28]
 8009340:	002e      	movs	r6, r5
 8009342:	f7f7 f871 	bl	8000428 <__aeabi_dcmpeq>
 8009346:	2800      	cmp	r0, #0
 8009348:	d08b      	beq.n	8009262 <_dtoa_r+0x63a>
 800934a:	e7be      	b.n	80092ca <_dtoa_r+0x6a2>
 800934c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800934e:	2a00      	cmp	r2, #0
 8009350:	d100      	bne.n	8009354 <_dtoa_r+0x72c>
 8009352:	e0da      	b.n	800950a <_dtoa_r+0x8e2>
 8009354:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009356:	2a01      	cmp	r2, #1
 8009358:	dd00      	ble.n	800935c <_dtoa_r+0x734>
 800935a:	e0bd      	b.n	80094d8 <_dtoa_r+0x8b0>
 800935c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800935e:	2a00      	cmp	r2, #0
 8009360:	d100      	bne.n	8009364 <_dtoa_r+0x73c>
 8009362:	e0b5      	b.n	80094d0 <_dtoa_r+0x8a8>
 8009364:	4a98      	ldr	r2, [pc, #608]	; (80095c8 <_dtoa_r+0x9a0>)
 8009366:	189b      	adds	r3, r3, r2
 8009368:	9d04      	ldr	r5, [sp, #16]
 800936a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800936c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800936e:	2101      	movs	r1, #1
 8009370:	18d2      	adds	r2, r2, r3
 8009372:	920a      	str	r2, [sp, #40]	; 0x28
 8009374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009376:	9802      	ldr	r0, [sp, #8]
 8009378:	18d3      	adds	r3, r2, r3
 800937a:	930b      	str	r3, [sp, #44]	; 0x2c
 800937c:	f7fe fe24 	bl	8007fc8 <__i2b>
 8009380:	0006      	movs	r6, r0
 8009382:	2c00      	cmp	r4, #0
 8009384:	dd0e      	ble.n	80093a4 <_dtoa_r+0x77c>
 8009386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009388:	2b00      	cmp	r3, #0
 800938a:	dd0b      	ble.n	80093a4 <_dtoa_r+0x77c>
 800938c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800938e:	0023      	movs	r3, r4
 8009390:	4294      	cmp	r4, r2
 8009392:	dd00      	ble.n	8009396 <_dtoa_r+0x76e>
 8009394:	0013      	movs	r3, r2
 8009396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009398:	1ae4      	subs	r4, r4, r3
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	920a      	str	r2, [sp, #40]	; 0x28
 800939e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80093a4:	9b04      	ldr	r3, [sp, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01f      	beq.n	80093ea <_dtoa_r+0x7c2>
 80093aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d100      	bne.n	80093b2 <_dtoa_r+0x78a>
 80093b0:	e0af      	b.n	8009512 <_dtoa_r+0x8ea>
 80093b2:	2d00      	cmp	r5, #0
 80093b4:	d011      	beq.n	80093da <_dtoa_r+0x7b2>
 80093b6:	0031      	movs	r1, r6
 80093b8:	002a      	movs	r2, r5
 80093ba:	9802      	ldr	r0, [sp, #8]
 80093bc:	f7fe fe9c 	bl	80080f8 <__pow5mult>
 80093c0:	9a03      	ldr	r2, [sp, #12]
 80093c2:	0001      	movs	r1, r0
 80093c4:	0006      	movs	r6, r0
 80093c6:	9802      	ldr	r0, [sp, #8]
 80093c8:	f7fe fe07 	bl	8007fda <__multiply>
 80093cc:	9903      	ldr	r1, [sp, #12]
 80093ce:	9010      	str	r0, [sp, #64]	; 0x40
 80093d0:	9802      	ldr	r0, [sp, #8]
 80093d2:	f7fe fd59 	bl	8007e88 <_Bfree>
 80093d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093d8:	9303      	str	r3, [sp, #12]
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	1b5a      	subs	r2, r3, r5
 80093de:	d004      	beq.n	80093ea <_dtoa_r+0x7c2>
 80093e0:	9903      	ldr	r1, [sp, #12]
 80093e2:	9802      	ldr	r0, [sp, #8]
 80093e4:	f7fe fe88 	bl	80080f8 <__pow5mult>
 80093e8:	9003      	str	r0, [sp, #12]
 80093ea:	2101      	movs	r1, #1
 80093ec:	9802      	ldr	r0, [sp, #8]
 80093ee:	f7fe fdeb 	bl	8007fc8 <__i2b>
 80093f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093f4:	9004      	str	r0, [sp, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d100      	bne.n	80093fc <_dtoa_r+0x7d4>
 80093fa:	e1e3      	b.n	80097c4 <_dtoa_r+0xb9c>
 80093fc:	001a      	movs	r2, r3
 80093fe:	0001      	movs	r1, r0
 8009400:	9802      	ldr	r0, [sp, #8]
 8009402:	f7fe fe79 	bl	80080f8 <__pow5mult>
 8009406:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009408:	9004      	str	r0, [sp, #16]
 800940a:	2b01      	cmp	r3, #1
 800940c:	dd00      	ble.n	8009410 <_dtoa_r+0x7e8>
 800940e:	e082      	b.n	8009516 <_dtoa_r+0x8ee>
 8009410:	2500      	movs	r5, #0
 8009412:	9b06      	ldr	r3, [sp, #24]
 8009414:	42ab      	cmp	r3, r5
 8009416:	d10e      	bne.n	8009436 <_dtoa_r+0x80e>
 8009418:	9b07      	ldr	r3, [sp, #28]
 800941a:	031b      	lsls	r3, r3, #12
 800941c:	42ab      	cmp	r3, r5
 800941e:	d10a      	bne.n	8009436 <_dtoa_r+0x80e>
 8009420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009422:	9a07      	ldr	r2, [sp, #28]
 8009424:	4213      	tst	r3, r2
 8009426:	d006      	beq.n	8009436 <_dtoa_r+0x80e>
 8009428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942a:	3501      	adds	r5, #1
 800942c:	3301      	adds	r3, #1
 800942e:	930a      	str	r3, [sp, #40]	; 0x28
 8009430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009432:	3301      	adds	r3, #1
 8009434:	930b      	str	r3, [sp, #44]	; 0x2c
 8009436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009438:	2001      	movs	r0, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d16c      	bne.n	8009518 <_dtoa_r+0x8f0>
 800943e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009440:	1818      	adds	r0, r3, r0
 8009442:	231f      	movs	r3, #31
 8009444:	4018      	ands	r0, r3
 8009446:	d07e      	beq.n	8009546 <_dtoa_r+0x91e>
 8009448:	3301      	adds	r3, #1
 800944a:	1a1b      	subs	r3, r3, r0
 800944c:	2b04      	cmp	r3, #4
 800944e:	dd70      	ble.n	8009532 <_dtoa_r+0x90a>
 8009450:	231c      	movs	r3, #28
 8009452:	1a18      	subs	r0, r3, r0
 8009454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009456:	1824      	adds	r4, r4, r0
 8009458:	181b      	adds	r3, r3, r0
 800945a:	930a      	str	r3, [sp, #40]	; 0x28
 800945c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800945e:	181b      	adds	r3, r3, r0
 8009460:	930b      	str	r3, [sp, #44]	; 0x2c
 8009462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009464:	2b00      	cmp	r3, #0
 8009466:	dd05      	ble.n	8009474 <_dtoa_r+0x84c>
 8009468:	001a      	movs	r2, r3
 800946a:	9903      	ldr	r1, [sp, #12]
 800946c:	9802      	ldr	r0, [sp, #8]
 800946e:	f7fe fe95 	bl	800819c <__lshift>
 8009472:	9003      	str	r0, [sp, #12]
 8009474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009476:	2b00      	cmp	r3, #0
 8009478:	dd05      	ble.n	8009486 <_dtoa_r+0x85e>
 800947a:	001a      	movs	r2, r3
 800947c:	9904      	ldr	r1, [sp, #16]
 800947e:	9802      	ldr	r0, [sp, #8]
 8009480:	f7fe fe8c 	bl	800819c <__lshift>
 8009484:	9004      	str	r0, [sp, #16]
 8009486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009488:	2b00      	cmp	r3, #0
 800948a:	d05e      	beq.n	800954a <_dtoa_r+0x922>
 800948c:	9904      	ldr	r1, [sp, #16]
 800948e:	9803      	ldr	r0, [sp, #12]
 8009490:	f7fe fed6 	bl	8008240 <__mcmp>
 8009494:	2800      	cmp	r0, #0
 8009496:	da58      	bge.n	800954a <_dtoa_r+0x922>
 8009498:	2300      	movs	r3, #0
 800949a:	220a      	movs	r2, #10
 800949c:	9903      	ldr	r1, [sp, #12]
 800949e:	9802      	ldr	r0, [sp, #8]
 80094a0:	f7fe fd0b 	bl	8007eba <__multadd>
 80094a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094a6:	3f01      	subs	r7, #1
 80094a8:	9003      	str	r0, [sp, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d100      	bne.n	80094b0 <_dtoa_r+0x888>
 80094ae:	e190      	b.n	80097d2 <_dtoa_r+0xbaa>
 80094b0:	2300      	movs	r3, #0
 80094b2:	0031      	movs	r1, r6
 80094b4:	220a      	movs	r2, #10
 80094b6:	9802      	ldr	r0, [sp, #8]
 80094b8:	f7fe fcff 	bl	8007eba <__multadd>
 80094bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094be:	0006      	movs	r6, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	dd00      	ble.n	80094c6 <_dtoa_r+0x89e>
 80094c4:	e088      	b.n	80095d8 <_dtoa_r+0x9b0>
 80094c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	dc00      	bgt.n	80094ce <_dtoa_r+0x8a6>
 80094cc:	e084      	b.n	80095d8 <_dtoa_r+0x9b0>
 80094ce:	e044      	b.n	800955a <_dtoa_r+0x932>
 80094d0:	2336      	movs	r3, #54	; 0x36
 80094d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	e747      	b.n	8009368 <_dtoa_r+0x740>
 80094d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094da:	1e5d      	subs	r5, r3, #1
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	42ab      	cmp	r3, r5
 80094e0:	db08      	blt.n	80094f4 <_dtoa_r+0x8cc>
 80094e2:	1b5d      	subs	r5, r3, r5
 80094e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	da0c      	bge.n	8009504 <_dtoa_r+0x8dc>
 80094ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ee:	1a9c      	subs	r4, r3, r2
 80094f0:	2300      	movs	r3, #0
 80094f2:	e73b      	b.n	800936c <_dtoa_r+0x744>
 80094f4:	9b04      	ldr	r3, [sp, #16]
 80094f6:	9504      	str	r5, [sp, #16]
 80094f8:	1aea      	subs	r2, r5, r3
 80094fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094fc:	2500      	movs	r5, #0
 80094fe:	189b      	adds	r3, r3, r2
 8009500:	9311      	str	r3, [sp, #68]	; 0x44
 8009502:	e7ef      	b.n	80094e4 <_dtoa_r+0x8bc>
 8009504:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009508:	e730      	b.n	800936c <_dtoa_r+0x744>
 800950a:	9d04      	ldr	r5, [sp, #16]
 800950c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800950e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009510:	e737      	b.n	8009382 <_dtoa_r+0x75a>
 8009512:	9a04      	ldr	r2, [sp, #16]
 8009514:	e764      	b.n	80093e0 <_dtoa_r+0x7b8>
 8009516:	2500      	movs	r5, #0
 8009518:	9b04      	ldr	r3, [sp, #16]
 800951a:	9a04      	ldr	r2, [sp, #16]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	9310      	str	r3, [sp, #64]	; 0x40
 8009520:	3303      	adds	r3, #3
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	18d3      	adds	r3, r2, r3
 8009526:	6858      	ldr	r0, [r3, #4]
 8009528:	f7fe fd05 	bl	8007f36 <__hi0bits>
 800952c:	2320      	movs	r3, #32
 800952e:	1a18      	subs	r0, r3, r0
 8009530:	e785      	b.n	800943e <_dtoa_r+0x816>
 8009532:	2b04      	cmp	r3, #4
 8009534:	d095      	beq.n	8009462 <_dtoa_r+0x83a>
 8009536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009538:	331c      	adds	r3, #28
 800953a:	18d2      	adds	r2, r2, r3
 800953c:	920a      	str	r2, [sp, #40]	; 0x28
 800953e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009540:	18e4      	adds	r4, r4, r3
 8009542:	18d3      	adds	r3, r2, r3
 8009544:	e78c      	b.n	8009460 <_dtoa_r+0x838>
 8009546:	0003      	movs	r3, r0
 8009548:	e7f5      	b.n	8009536 <_dtoa_r+0x90e>
 800954a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	dc3d      	bgt.n	80095cc <_dtoa_r+0x9a4>
 8009550:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009552:	2b02      	cmp	r3, #2
 8009554:	dd3a      	ble.n	80095cc <_dtoa_r+0x9a4>
 8009556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009558:	930c      	str	r3, [sp, #48]	; 0x30
 800955a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10c      	bne.n	800957a <_dtoa_r+0x952>
 8009560:	9904      	ldr	r1, [sp, #16]
 8009562:	2205      	movs	r2, #5
 8009564:	9802      	ldr	r0, [sp, #8]
 8009566:	f7fe fca8 	bl	8007eba <__multadd>
 800956a:	9004      	str	r0, [sp, #16]
 800956c:	0001      	movs	r1, r0
 800956e:	9803      	ldr	r0, [sp, #12]
 8009570:	f7fe fe66 	bl	8008240 <__mcmp>
 8009574:	2800      	cmp	r0, #0
 8009576:	dd00      	ble.n	800957a <_dtoa_r+0x952>
 8009578:	e5af      	b.n	80090da <_dtoa_r+0x4b2>
 800957a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800957c:	9d08      	ldr	r5, [sp, #32]
 800957e:	43df      	mvns	r7, r3
 8009580:	2300      	movs	r3, #0
 8009582:	9309      	str	r3, [sp, #36]	; 0x24
 8009584:	9904      	ldr	r1, [sp, #16]
 8009586:	9802      	ldr	r0, [sp, #8]
 8009588:	f7fe fc7e 	bl	8007e88 <_Bfree>
 800958c:	2e00      	cmp	r6, #0
 800958e:	d100      	bne.n	8009592 <_dtoa_r+0x96a>
 8009590:	e69b      	b.n	80092ca <_dtoa_r+0x6a2>
 8009592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	d005      	beq.n	80095a4 <_dtoa_r+0x97c>
 8009598:	42b3      	cmp	r3, r6
 800959a:	d003      	beq.n	80095a4 <_dtoa_r+0x97c>
 800959c:	0019      	movs	r1, r3
 800959e:	9802      	ldr	r0, [sp, #8]
 80095a0:	f7fe fc72 	bl	8007e88 <_Bfree>
 80095a4:	0031      	movs	r1, r6
 80095a6:	9802      	ldr	r0, [sp, #8]
 80095a8:	f7fe fc6e 	bl	8007e88 <_Bfree>
 80095ac:	e68d      	b.n	80092ca <_dtoa_r+0x6a2>
 80095ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	001e      	movs	r6, r3
 80095b4:	e7e1      	b.n	800957a <_dtoa_r+0x952>
 80095b6:	2300      	movs	r3, #0
 80095b8:	e7fa      	b.n	80095b0 <_dtoa_r+0x988>
 80095ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095bc:	0037      	movs	r7, r6
 80095be:	9304      	str	r3, [sp, #16]
 80095c0:	001e      	movs	r6, r3
 80095c2:	e58a      	b.n	80090da <_dtoa_r+0x4b2>
 80095c4:	40240000 	.word	0x40240000
 80095c8:	00000433 	.word	0x00000433
 80095cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d100      	bne.n	80095d4 <_dtoa_r+0x9ac>
 80095d2:	e0b2      	b.n	800973a <_dtoa_r+0xb12>
 80095d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d6:	930c      	str	r3, [sp, #48]	; 0x30
 80095d8:	2c00      	cmp	r4, #0
 80095da:	dd05      	ble.n	80095e8 <_dtoa_r+0x9c0>
 80095dc:	0031      	movs	r1, r6
 80095de:	0022      	movs	r2, r4
 80095e0:	9802      	ldr	r0, [sp, #8]
 80095e2:	f7fe fddb 	bl	800819c <__lshift>
 80095e6:	0006      	movs	r6, r0
 80095e8:	0030      	movs	r0, r6
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	d011      	beq.n	8009612 <_dtoa_r+0x9ea>
 80095ee:	6871      	ldr	r1, [r6, #4]
 80095f0:	9802      	ldr	r0, [sp, #8]
 80095f2:	f7fe fc11 	bl	8007e18 <_Balloc>
 80095f6:	0031      	movs	r1, r6
 80095f8:	0004      	movs	r4, r0
 80095fa:	6933      	ldr	r3, [r6, #16]
 80095fc:	310c      	adds	r1, #12
 80095fe:	1c9a      	adds	r2, r3, #2
 8009600:	0092      	lsls	r2, r2, #2
 8009602:	300c      	adds	r0, #12
 8009604:	f000 f905 	bl	8009812 <memcpy>
 8009608:	2201      	movs	r2, #1
 800960a:	0021      	movs	r1, r4
 800960c:	9802      	ldr	r0, [sp, #8]
 800960e:	f7fe fdc5 	bl	800819c <__lshift>
 8009612:	9609      	str	r6, [sp, #36]	; 0x24
 8009614:	0006      	movs	r6, r0
 8009616:	9b08      	ldr	r3, [sp, #32]
 8009618:	930a      	str	r3, [sp, #40]	; 0x28
 800961a:	9904      	ldr	r1, [sp, #16]
 800961c:	9803      	ldr	r0, [sp, #12]
 800961e:	f7ff fa7d 	bl	8008b1c <quorem>
 8009622:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009624:	900d      	str	r0, [sp, #52]	; 0x34
 8009626:	0004      	movs	r4, r0
 8009628:	9803      	ldr	r0, [sp, #12]
 800962a:	f7fe fe09 	bl	8008240 <__mcmp>
 800962e:	0032      	movs	r2, r6
 8009630:	9010      	str	r0, [sp, #64]	; 0x40
 8009632:	9904      	ldr	r1, [sp, #16]
 8009634:	9802      	ldr	r0, [sp, #8]
 8009636:	f7fe fe1d 	bl	8008274 <__mdiff>
 800963a:	2301      	movs	r3, #1
 800963c:	930b      	str	r3, [sp, #44]	; 0x2c
 800963e:	68c3      	ldr	r3, [r0, #12]
 8009640:	3430      	adds	r4, #48	; 0x30
 8009642:	0005      	movs	r5, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d104      	bne.n	8009652 <_dtoa_r+0xa2a>
 8009648:	0001      	movs	r1, r0
 800964a:	9803      	ldr	r0, [sp, #12]
 800964c:	f7fe fdf8 	bl	8008240 <__mcmp>
 8009650:	900b      	str	r0, [sp, #44]	; 0x2c
 8009652:	0029      	movs	r1, r5
 8009654:	9802      	ldr	r0, [sp, #8]
 8009656:	f7fe fc17 	bl	8007e88 <_Bfree>
 800965a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800965c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800965e:	4313      	orrs	r3, r2
 8009660:	d10e      	bne.n	8009680 <_dtoa_r+0xa58>
 8009662:	9a06      	ldr	r2, [sp, #24]
 8009664:	3301      	adds	r3, #1
 8009666:	4213      	tst	r3, r2
 8009668:	d10a      	bne.n	8009680 <_dtoa_r+0xa58>
 800966a:	2c39      	cmp	r4, #57	; 0x39
 800966c:	d026      	beq.n	80096bc <_dtoa_r+0xa94>
 800966e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009670:	2b00      	cmp	r3, #0
 8009672:	dd01      	ble.n	8009678 <_dtoa_r+0xa50>
 8009674:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009676:	3431      	adds	r4, #49	; 0x31
 8009678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800967a:	1c5d      	adds	r5, r3, #1
 800967c:	701c      	strb	r4, [r3, #0]
 800967e:	e781      	b.n	8009584 <_dtoa_r+0x95c>
 8009680:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009682:	2b00      	cmp	r3, #0
 8009684:	db07      	blt.n	8009696 <_dtoa_r+0xa6e>
 8009686:	001d      	movs	r5, r3
 8009688:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800968a:	431d      	orrs	r5, r3
 800968c:	d122      	bne.n	80096d4 <_dtoa_r+0xaac>
 800968e:	2301      	movs	r3, #1
 8009690:	9a06      	ldr	r2, [sp, #24]
 8009692:	4213      	tst	r3, r2
 8009694:	d11e      	bne.n	80096d4 <_dtoa_r+0xaac>
 8009696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009698:	2b00      	cmp	r3, #0
 800969a:	dded      	ble.n	8009678 <_dtoa_r+0xa50>
 800969c:	9903      	ldr	r1, [sp, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	9802      	ldr	r0, [sp, #8]
 80096a2:	f7fe fd7b 	bl	800819c <__lshift>
 80096a6:	9904      	ldr	r1, [sp, #16]
 80096a8:	9003      	str	r0, [sp, #12]
 80096aa:	f7fe fdc9 	bl	8008240 <__mcmp>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	dc02      	bgt.n	80096b8 <_dtoa_r+0xa90>
 80096b2:	d1e1      	bne.n	8009678 <_dtoa_r+0xa50>
 80096b4:	07e3      	lsls	r3, r4, #31
 80096b6:	d5df      	bpl.n	8009678 <_dtoa_r+0xa50>
 80096b8:	2c39      	cmp	r4, #57	; 0x39
 80096ba:	d1db      	bne.n	8009674 <_dtoa_r+0xa4c>
 80096bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096c0:	1c5d      	adds	r5, r3, #1
 80096c2:	2339      	movs	r3, #57	; 0x39
 80096c4:	7013      	strb	r3, [r2, #0]
 80096c6:	1e6b      	subs	r3, r5, #1
 80096c8:	781a      	ldrb	r2, [r3, #0]
 80096ca:	2a39      	cmp	r2, #57	; 0x39
 80096cc:	d067      	beq.n	800979e <_dtoa_r+0xb76>
 80096ce:	3201      	adds	r2, #1
 80096d0:	701a      	strb	r2, [r3, #0]
 80096d2:	e757      	b.n	8009584 <_dtoa_r+0x95c>
 80096d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d6:	1c5d      	adds	r5, r3, #1
 80096d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	dd04      	ble.n	80096e8 <_dtoa_r+0xac0>
 80096de:	2c39      	cmp	r4, #57	; 0x39
 80096e0:	d0ec      	beq.n	80096bc <_dtoa_r+0xa94>
 80096e2:	3401      	adds	r4, #1
 80096e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096e6:	e7c9      	b.n	800967c <_dtoa_r+0xa54>
 80096e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096ec:	701c      	strb	r4, [r3, #0]
 80096ee:	9b08      	ldr	r3, [sp, #32]
 80096f0:	1aeb      	subs	r3, r5, r3
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d03e      	beq.n	8009774 <_dtoa_r+0xb4c>
 80096f6:	2300      	movs	r3, #0
 80096f8:	220a      	movs	r2, #10
 80096fa:	9903      	ldr	r1, [sp, #12]
 80096fc:	9802      	ldr	r0, [sp, #8]
 80096fe:	f7fe fbdc 	bl	8007eba <__multadd>
 8009702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009704:	9003      	str	r0, [sp, #12]
 8009706:	42b3      	cmp	r3, r6
 8009708:	d109      	bne.n	800971e <_dtoa_r+0xaf6>
 800970a:	2300      	movs	r3, #0
 800970c:	220a      	movs	r2, #10
 800970e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009710:	9802      	ldr	r0, [sp, #8]
 8009712:	f7fe fbd2 	bl	8007eba <__multadd>
 8009716:	9009      	str	r0, [sp, #36]	; 0x24
 8009718:	0006      	movs	r6, r0
 800971a:	950a      	str	r5, [sp, #40]	; 0x28
 800971c:	e77d      	b.n	800961a <_dtoa_r+0x9f2>
 800971e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009720:	2300      	movs	r3, #0
 8009722:	220a      	movs	r2, #10
 8009724:	9802      	ldr	r0, [sp, #8]
 8009726:	f7fe fbc8 	bl	8007eba <__multadd>
 800972a:	2300      	movs	r3, #0
 800972c:	9009      	str	r0, [sp, #36]	; 0x24
 800972e:	220a      	movs	r2, #10
 8009730:	0031      	movs	r1, r6
 8009732:	9802      	ldr	r0, [sp, #8]
 8009734:	f7fe fbc1 	bl	8007eba <__multadd>
 8009738:	e7ee      	b.n	8009718 <_dtoa_r+0xaf0>
 800973a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973c:	930c      	str	r3, [sp, #48]	; 0x30
 800973e:	9b08      	ldr	r3, [sp, #32]
 8009740:	9306      	str	r3, [sp, #24]
 8009742:	9904      	ldr	r1, [sp, #16]
 8009744:	9803      	ldr	r0, [sp, #12]
 8009746:	f7ff f9e9 	bl	8008b1c <quorem>
 800974a:	9b06      	ldr	r3, [sp, #24]
 800974c:	3030      	adds	r0, #48	; 0x30
 800974e:	1c5d      	adds	r5, r3, #1
 8009750:	7018      	strb	r0, [r3, #0]
 8009752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009754:	9b08      	ldr	r3, [sp, #32]
 8009756:	0004      	movs	r4, r0
 8009758:	1aeb      	subs	r3, r5, r3
 800975a:	429a      	cmp	r2, r3
 800975c:	dd08      	ble.n	8009770 <_dtoa_r+0xb48>
 800975e:	2300      	movs	r3, #0
 8009760:	220a      	movs	r2, #10
 8009762:	9903      	ldr	r1, [sp, #12]
 8009764:	9802      	ldr	r0, [sp, #8]
 8009766:	f7fe fba8 	bl	8007eba <__multadd>
 800976a:	9506      	str	r5, [sp, #24]
 800976c:	9003      	str	r0, [sp, #12]
 800976e:	e7e8      	b.n	8009742 <_dtoa_r+0xb1a>
 8009770:	2300      	movs	r3, #0
 8009772:	9309      	str	r3, [sp, #36]	; 0x24
 8009774:	9903      	ldr	r1, [sp, #12]
 8009776:	2201      	movs	r2, #1
 8009778:	9802      	ldr	r0, [sp, #8]
 800977a:	f7fe fd0f 	bl	800819c <__lshift>
 800977e:	9904      	ldr	r1, [sp, #16]
 8009780:	9003      	str	r0, [sp, #12]
 8009782:	f7fe fd5d 	bl	8008240 <__mcmp>
 8009786:	2800      	cmp	r0, #0
 8009788:	dc9d      	bgt.n	80096c6 <_dtoa_r+0xa9e>
 800978a:	d101      	bne.n	8009790 <_dtoa_r+0xb68>
 800978c:	07e3      	lsls	r3, r4, #31
 800978e:	d49a      	bmi.n	80096c6 <_dtoa_r+0xa9e>
 8009790:	1e6b      	subs	r3, r5, #1
 8009792:	781a      	ldrb	r2, [r3, #0]
 8009794:	2a30      	cmp	r2, #48	; 0x30
 8009796:	d000      	beq.n	800979a <_dtoa_r+0xb72>
 8009798:	e6f4      	b.n	8009584 <_dtoa_r+0x95c>
 800979a:	001d      	movs	r5, r3
 800979c:	e7f8      	b.n	8009790 <_dtoa_r+0xb68>
 800979e:	9a08      	ldr	r2, [sp, #32]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d103      	bne.n	80097ac <_dtoa_r+0xb84>
 80097a4:	2331      	movs	r3, #49	; 0x31
 80097a6:	3701      	adds	r7, #1
 80097a8:	7013      	strb	r3, [r2, #0]
 80097aa:	e6eb      	b.n	8009584 <_dtoa_r+0x95c>
 80097ac:	001d      	movs	r5, r3
 80097ae:	e78a      	b.n	80096c6 <_dtoa_r+0xa9e>
 80097b0:	4b0b      	ldr	r3, [pc, #44]	; (80097e0 <_dtoa_r+0xbb8>)
 80097b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80097b4:	9308      	str	r3, [sp, #32]
 80097b6:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <_dtoa_r+0xbbc>)
 80097b8:	2a00      	cmp	r2, #0
 80097ba:	d001      	beq.n	80097c0 <_dtoa_r+0xb98>
 80097bc:	f7ff fa77 	bl	8008cae <_dtoa_r+0x86>
 80097c0:	f7ff fa77 	bl	8008cb2 <_dtoa_r+0x8a>
 80097c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	dc00      	bgt.n	80097cc <_dtoa_r+0xba4>
 80097ca:	e621      	b.n	8009410 <_dtoa_r+0x7e8>
 80097cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80097ce:	2001      	movs	r0, #1
 80097d0:	e635      	b.n	800943e <_dtoa_r+0x816>
 80097d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dcb2      	bgt.n	800973e <_dtoa_r+0xb16>
 80097d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80097da:	2b02      	cmp	r3, #2
 80097dc:	ddaf      	ble.n	800973e <_dtoa_r+0xb16>
 80097de:	e6bc      	b.n	800955a <_dtoa_r+0x932>
 80097e0:	0800b0df 	.word	0x0800b0df
 80097e4:	0800b0e7 	.word	0x0800b0e7

080097e8 <malloc>:
 80097e8:	b510      	push	{r4, lr}
 80097ea:	4b03      	ldr	r3, [pc, #12]	; (80097f8 <malloc+0x10>)
 80097ec:	0001      	movs	r1, r0
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	f7fe fe20 	bl	8008434 <_malloc_r>
 80097f4:	bd10      	pop	{r4, pc}
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	2000001c 	.word	0x2000001c

080097fc <memchr>:
 80097fc:	b2c9      	uxtb	r1, r1
 80097fe:	1882      	adds	r2, r0, r2
 8009800:	4290      	cmp	r0, r2
 8009802:	d101      	bne.n	8009808 <memchr+0xc>
 8009804:	2000      	movs	r0, #0
 8009806:	4770      	bx	lr
 8009808:	7803      	ldrb	r3, [r0, #0]
 800980a:	428b      	cmp	r3, r1
 800980c:	d0fb      	beq.n	8009806 <memchr+0xa>
 800980e:	3001      	adds	r0, #1
 8009810:	e7f6      	b.n	8009800 <memchr+0x4>

08009812 <memcpy>:
 8009812:	2300      	movs	r3, #0
 8009814:	b510      	push	{r4, lr}
 8009816:	429a      	cmp	r2, r3
 8009818:	d100      	bne.n	800981c <memcpy+0xa>
 800981a:	bd10      	pop	{r4, pc}
 800981c:	5ccc      	ldrb	r4, [r1, r3]
 800981e:	54c4      	strb	r4, [r0, r3]
 8009820:	3301      	adds	r3, #1
 8009822:	e7f8      	b.n	8009816 <memcpy+0x4>

08009824 <memmove>:
 8009824:	b510      	push	{r4, lr}
 8009826:	4288      	cmp	r0, r1
 8009828:	d902      	bls.n	8009830 <memmove+0xc>
 800982a:	188b      	adds	r3, r1, r2
 800982c:	4298      	cmp	r0, r3
 800982e:	d303      	bcc.n	8009838 <memmove+0x14>
 8009830:	2300      	movs	r3, #0
 8009832:	e007      	b.n	8009844 <memmove+0x20>
 8009834:	5c8b      	ldrb	r3, [r1, r2]
 8009836:	5483      	strb	r3, [r0, r2]
 8009838:	3a01      	subs	r2, #1
 800983a:	d2fb      	bcs.n	8009834 <memmove+0x10>
 800983c:	bd10      	pop	{r4, pc}
 800983e:	5ccc      	ldrb	r4, [r1, r3]
 8009840:	54c4      	strb	r4, [r0, r3]
 8009842:	3301      	adds	r3, #1
 8009844:	429a      	cmp	r2, r3
 8009846:	d1fa      	bne.n	800983e <memmove+0x1a>
 8009848:	e7f8      	b.n	800983c <memmove+0x18>

0800984a <__malloc_lock>:
 800984a:	4770      	bx	lr

0800984c <__malloc_unlock>:
 800984c:	4770      	bx	lr
	...

08009850 <_free_r>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	0005      	movs	r5, r0
 8009854:	2900      	cmp	r1, #0
 8009856:	d010      	beq.n	800987a <_free_r+0x2a>
 8009858:	1f0c      	subs	r4, r1, #4
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	da00      	bge.n	8009862 <_free_r+0x12>
 8009860:	18e4      	adds	r4, r4, r3
 8009862:	0028      	movs	r0, r5
 8009864:	f7ff fff1 	bl	800984a <__malloc_lock>
 8009868:	4a1d      	ldr	r2, [pc, #116]	; (80098e0 <_free_r+0x90>)
 800986a:	6813      	ldr	r3, [r2, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d105      	bne.n	800987c <_free_r+0x2c>
 8009870:	6063      	str	r3, [r4, #4]
 8009872:	6014      	str	r4, [r2, #0]
 8009874:	0028      	movs	r0, r5
 8009876:	f7ff ffe9 	bl	800984c <__malloc_unlock>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	42a3      	cmp	r3, r4
 800987e:	d909      	bls.n	8009894 <_free_r+0x44>
 8009880:	6821      	ldr	r1, [r4, #0]
 8009882:	1860      	adds	r0, r4, r1
 8009884:	4283      	cmp	r3, r0
 8009886:	d1f3      	bne.n	8009870 <_free_r+0x20>
 8009888:	6818      	ldr	r0, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	1841      	adds	r1, r0, r1
 800988e:	6021      	str	r1, [r4, #0]
 8009890:	e7ee      	b.n	8009870 <_free_r+0x20>
 8009892:	0013      	movs	r3, r2
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	2a00      	cmp	r2, #0
 8009898:	d001      	beq.n	800989e <_free_r+0x4e>
 800989a:	42a2      	cmp	r2, r4
 800989c:	d9f9      	bls.n	8009892 <_free_r+0x42>
 800989e:	6819      	ldr	r1, [r3, #0]
 80098a0:	1858      	adds	r0, r3, r1
 80098a2:	42a0      	cmp	r0, r4
 80098a4:	d10b      	bne.n	80098be <_free_r+0x6e>
 80098a6:	6820      	ldr	r0, [r4, #0]
 80098a8:	1809      	adds	r1, r1, r0
 80098aa:	1858      	adds	r0, r3, r1
 80098ac:	6019      	str	r1, [r3, #0]
 80098ae:	4282      	cmp	r2, r0
 80098b0:	d1e0      	bne.n	8009874 <_free_r+0x24>
 80098b2:	6810      	ldr	r0, [r2, #0]
 80098b4:	6852      	ldr	r2, [r2, #4]
 80098b6:	1841      	adds	r1, r0, r1
 80098b8:	6019      	str	r1, [r3, #0]
 80098ba:	605a      	str	r2, [r3, #4]
 80098bc:	e7da      	b.n	8009874 <_free_r+0x24>
 80098be:	42a0      	cmp	r0, r4
 80098c0:	d902      	bls.n	80098c8 <_free_r+0x78>
 80098c2:	230c      	movs	r3, #12
 80098c4:	602b      	str	r3, [r5, #0]
 80098c6:	e7d5      	b.n	8009874 <_free_r+0x24>
 80098c8:	6821      	ldr	r1, [r4, #0]
 80098ca:	1860      	adds	r0, r4, r1
 80098cc:	4282      	cmp	r2, r0
 80098ce:	d103      	bne.n	80098d8 <_free_r+0x88>
 80098d0:	6810      	ldr	r0, [r2, #0]
 80098d2:	6852      	ldr	r2, [r2, #4]
 80098d4:	1841      	adds	r1, r0, r1
 80098d6:	6021      	str	r1, [r4, #0]
 80098d8:	6062      	str	r2, [r4, #4]
 80098da:	605c      	str	r4, [r3, #4]
 80098dc:	e7ca      	b.n	8009874 <_free_r+0x24>
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	200004d4 	.word	0x200004d4

080098e4 <_malloc_usable_size_r>:
 80098e4:	1f0b      	subs	r3, r1, #4
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	1f18      	subs	r0, r3, #4
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	da01      	bge.n	80098f2 <_malloc_usable_size_r+0xe>
 80098ee:	580b      	ldr	r3, [r1, r0]
 80098f0:	18c0      	adds	r0, r0, r3
 80098f2:	4770      	bx	lr

080098f4 <_init>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	46c0      	nop			; (mov r8, r8)
 80098f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fa:	bc08      	pop	{r3}
 80098fc:	469e      	mov	lr, r3
 80098fe:	4770      	bx	lr

08009900 <_fini>:
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	46c0      	nop			; (mov r8, r8)
 8009904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009906:	bc08      	pop	{r3}
 8009908:	469e      	mov	lr, r3
 800990a:	4770      	bx	lr
